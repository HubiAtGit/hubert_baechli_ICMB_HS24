{
  "hash": "88deb0e82fcb29ae2e2d8c4f7c261709",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simple Learning kurve\"\nauthor: \"Hubert Baechli\"\n---\n\n\n\n\n# Simple Learning kurve\n\nFirst and foremost, the distribution of information and knowledge should have something to do with learning. So I start with an exponential learning curve, which is easy to implement.\n\n# Definitions\n\nLoading some Packages for easier Data management and Presentation of Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# set.seed(1)\n```\n:::\n\n\n\n\n## Population for testing the Functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnA = 5            # number of Agents\nID = seq_len(nA)  # ID of the Agents\n\nPop <- tibble( ID = ID )\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n     ID\n  <int>\n1     1\n2     2\n3     3\n4     4\n5     5\n```\n\n\n:::\n:::\n\n\n\n\n# Functions\n\n## Knowledge\n\nFunctions to set and update Knowledge\n\n### Set Knowledge\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's\n\n2.  A value for the Knowledge (K) between 0 and 1. could be a scalar or e vector with the same length as the Population\n\n3.  optional for future implementations a name (Typ) for the specific Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_Knowledge <- function(Pop = Pop,\n                          Typ = FALSE,\n                          K = Knowledge) {\n  Kname <- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname <- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop <- Pop %>%\n      mutate(!!Kname := K)\n  } else {\n    Pop[[Kname]] <- K\n  }\n  Pop <- Pop %>%\n\n  return(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with the defined Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK <- seq_len(nA)/5\n\nPop <- set_Knowledge( Pop = Pop, K = 0.5 )\nPop <- set_Knowledge( Pop = Pop, Typ = \"A\", K = K )\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     ID Knowledge Knowledge_A\n  <int>     <dbl>       <dbl>\n1     1       0.5         0.2\n2     2       0.5         0.4\n3     3       0.5         0.6\n4     4       0.5         0.8\n5     5       0.5         1  \n```\n\n\n:::\n:::\n\n\n\n\n### Update Knowledge\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's\n\n2.  A value to add to the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 0 is used to add\n\n3.  A value to multiplie (fac) the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 1 is used for the multiplikation\n\n4.  optional for future implementations a name (Typ) for the specific Knowledge\n\n#### Hints\n\n-   The add operation is always used first!\n\n-   If the Knowledge is not defined before it will be generated with the start value (add) and the multiplication with the value (fac)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Knowledge <- function(Pop = Pop,\n                            Typ = FALSE,\n                            add = 0,\n                            fac = 1) {\n  Kname <- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname <- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop <- Pop %>%\n      mutate( !!Kname := ( .data[[Kname]] + add ) * fac )\n  } else {\n    Pop <- set_Knowledge(Pop = Pop, K = add, Typ = Typ)\n    Pop <- Pop %>%\n      mutate( !!Kname := .data[[Kname]] * fac )\n  }\n  return(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with the defined Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- seq_len(nA)/20\nfac <- seq_len(nA)/10 \n\nPop <- update_Knowledge( Pop = Pop, add = add ) \nPop <- update_Knowledge( Pop = Pop, Typ = \"A\", fac = fac ) \nPop <- update_Knowledge( Pop = Pop, Typ = \"B\", add = add, fac = fac ) \nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n     ID Knowledge Knowledge_A Knowledge_B\n  <int>     <dbl>       <dbl>       <dbl>\n1     1      0.55        0.02       0.005\n2     2      0.6         0.08       0.02 \n3     3      0.65        0.18       0.045\n4     4      0.7         0.32       0.08 \n5     5      0.75        0.5        0.125\n```\n\n\n:::\n:::\n\n\n\n\n## LearnRate\n\nFunctions to set and update the learn rate\n\n### Set LearnRate\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's\n\n2.  A value for the learn rate (LR) greater than 0 and up to 1. could be a scalar or e vector with the same length as the Population\n\n#### Hints\n\n-   LernRate 0 leads to Problems so it ist limited it to 1E-3\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_LearnRate <- function(Pop = Pop,\n                          LR = LearnRate) {\n  LRname <- \"LearnRate\"\n  Pop <- Pop %>%\n    mutate(!!LRname := LR,\n           !!LRname := pmax(.data[[LRname]],1E-3))\n  return(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with the defined learn rate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLR <- seq_len(nA)/5  \nPop <- set_LearnRate( Pop = Pop, LR = 1 ) \nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  <int>     <dbl>       <dbl>       <dbl>     <dbl>\n1     1      0.55        0.02       0.005         1\n2     2      0.6         0.08       0.02          1\n3     3      0.65        0.18       0.045         1\n4     4      0.7         0.32       0.08          1\n5     5      0.75        0.5        0.125         1\n```\n\n\n:::\n:::\n\n\n\n\n## StudyTime\n\nFunctions to set and update the StudyTime\n\n### Set StudyTime\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's\n\n2.  A value for the StudyTime (ST). could be a scalar or a vector with the same length as the Population\n\n#### Hints\n\n-   If StudyTime isn't given the Population will be initializing with 0\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_StudyTime <- function(Pop = Pop,\n                          ST = 0) {\n  STname <- \"StudyTime\"\n  Pop <- Pop %>%\n    mutate(!!STname := ST)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with the defined StudyTime\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- set_StudyTime( Pop = Pop, ST = 3)  \nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  <int>     <dbl>       <dbl>       <dbl>     <dbl>     <dbl>\n1     1      0.55        0.02       0.005         1         3\n2     2      0.6         0.08       0.02          1         3\n3     3      0.65        0.18       0.045         1         3\n4     4      0.7         0.32       0.08          1         3\n5     5      0.75        0.5        0.125         1         3\n```\n\n\n:::\n:::\n\n\n\n\n### Update StudyTime\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's and StudyTime\n\n2.  A Time (dT) that should added.\n\n#### Hints\n\n-   If StudyTime isn't defined in Population it will be initialising with dT\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_StudyTime <- function(Pop = Pop,\n                             dT = TimeToAdd) {\n  STname <- \"StudyTime\"\n  if (STname %in% colnames(Pop)) {\n    Pop <- Pop %>%\n      mutate( !!STname := .data[[STname]] + dT )\n  } else {\n    Pop <- set_StudyTime(Pop = Pop, ST = dT )\n  }\n  return(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with the defined StudyTime\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- update_StudyTime( Pop = Pop, dT = 1)   \nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  <int>     <dbl>       <dbl>       <dbl>     <dbl>     <dbl>\n1     1      0.55        0.02       0.005         1         4\n2     2      0.6         0.08       0.02          1         4\n3     3      0.65        0.18       0.045         1         4\n4     4      0.7         0.32       0.08          1         4\n5     5      0.75        0.5        0.125         1         4\n```\n\n\n:::\n:::\n\n\n\n\n## Timelines\n\nsaving Timelines during Simulations\n\n### Get Agents-Timelines\n\n#### Needs\n\n1.  A containername for the Timeline\n\n2.  A value for the Time\n\n3.  A Population (Pop) with several Agents defined by ID's\n\n4.  A colname from the Population which should followed ver Time\n\n5.  optional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_Timeline <- function(TL = Timeline,\n                          Time = 0,\n                          Pop = Pop,\n                          Info = name,\n                          Sum = 0) {\n  TLadd <- tibble( ID = Pop[[\"ID\"]],\n                   Time = Time,\n                   !!Info := Pop[[Info]])\n  if (Sum == 1) {\n    Sumname1 <- paste(Info,\"mean\", sep = \"_\")\n    Sumname2 <- paste(Info,\"median\", sep = \"_\")\n    TLadd <- TLadd %>%\n        mutate(!!Sumname1 := mean(Pop[[Info]], na.rm = TRUE),\n               !!Sumname2 := median(Pop[[Info]], na.rm = TRUE))\n    }\n  if (Time == 0) {\n    TL <- TLadd\n  } else {\n    TL <- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  A Timeline in a long format\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTimeline <- get_Timeline( TL = Timeline, \n                           Time = 0, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline <- get_Timeline( TL = Timeline, \n                           Time = 1, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n      ID  Time Knowledge Knowledge_mean Knowledge_median\n   <int> <dbl>     <dbl>          <dbl>            <dbl>\n 1     1     0      0.55           0.65             0.65\n 2     2     0      0.6            0.65             0.65\n 3     3     0      0.65           0.65             0.65\n 4     4     0      0.7            0.65             0.65\n 5     5     0      0.75           0.65             0.65\n 6     1     1      0.55           0.65             0.65\n 7     2     1      0.6            0.65             0.65\n 8     3     1      0.65           0.65             0.65\n 9     4     1      0.7            0.65             0.65\n10     5     1      0.75           0.65             0.65\n```\n\n\n:::\n:::\n\n\n\n\n## **Learning**\n\nLearning with a exponential Lernrate\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's and Knowledge\n\n2.  optional for future implementations a name (Typ) for the specific Knowledge\n\n3.  A value for the lLearnRate (LR). could be a scalar or e vector with the same length as the Population\n\n4.  A value for the StudyTime (ST). could be a scalar or e vector with the same length as the Population\n\n#### Hints\n\n-   If LearnRate isn't given the values from the Population will be used, if this is missing in the Population 0 is used.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearn <- function(Pop = Pop,\n                  Typ = FALSE,\n                  LR = FALSE,\n                  ST = StudyTime) {\n  Kname <- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname <- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    K <- Pop[[Kname]]\n  }\n  if (LR == FALSE) {\n    if (\"LearnRate\" %in% colnames(Pop)) {\n      LR <- Pop[[\"LearnRate\"]]\n    }\n  }\n\n  T0 <- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K <- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  \n  Pop <- set_Knowledge(Pop = Pop, Typ = Typ, K = K)\n  Pop <- update_StudyTime(Pop = Pop, dT = ST)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with updated Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- tibble( ID = ID )\nPop <- set_Knowledge(Pop = Pop, K = 0.1)\nPop <- set_LearnRate(Pop = Pop, LR = 1)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     ID Knowledge LearnRate\n  <int>     <dbl>     <dbl>\n1     1       0.1         1\n2     2       0.1         1\n3     3       0.1         1\n4     4       0.1         1\n5     5       0.1         1\n```\n\n\n:::\n\n```{.r .cell-code}\nPop <- learn( Pop = Pop, ST = 10)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n     ID Knowledge LearnRate StudyTime\n  <int>     <dbl>     <dbl>     <dbl>\n1     1      0.91         1        10\n2     2      0.91         1        10\n3     3      0.91         1        10\n4     4      0.91         1        10\n5     5      0.91         1        10\n```\n\n\n:::\n:::\n\n\n\n\n## **Plots**\n\n### Plot Timeline\n\n#### Needs\n\n1.  A Timeline from get_Timeline\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Timeline <- function(TL = Timeline) {\n  ggplot(data = TL, aes(x = Time)) +\n  geom_line(aes(y = Knowledge, group = ID, color = \"Agents\"), \n            alpha = 0.5,\n            linetype = \"solid\") +\n  geom_line(aes(y = Knowledge_mean, color = \"Mean\"),\n            linetype = \"solid\")  +\n  geom_line(aes(y = Knowledge_median, color = \"Median\"),\n            linetype = \"dashed\") +\n  ggtitle(\"Timeline\") +\n  xlab(\"Number of itterations\") +\n  ylab(\"Knowledge\") +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, 0.2)\n  ) +\n    scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Mean\" = \"black\", \"Median\" = \"black\"),\n    labels = c(\"Agents\" = \"Agents\", \"Mean\" = \"Mean\", \"Median\" = \"Median\")\n  ) +\n  theme_light() +\n  theme(legend.title = element_blank(),\n        legend.position = c(1, 0),\n        legend.justification = c(1, 0))\n}\n```\n:::\n\n\n\n\n# **Simulation**\n\nA learning process with fixed LearnRate\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's and Knowledge\n\n2.  optional for future implementations a name (Typ) for the specific Knowledge\n\n3.  A value for the learn rate (LR) greater than 0 and up to 1. could be a scalar or e vector with the same length as the Population\n\n4.  A value for the StudyTime (ST). could be a scalar or a vector with the same length as the Population\n\n5.  A number of itterations (STn)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_learn <- function(Pop = Pop,\n                      Typ = FALSE,\n                      LR = LearnRate,\n                      ST = 1,\n                      STn = Itterations) {\n  Kname <- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname <- paste(Kname, Typ, sep = \"_\")\n  }\n  Pop <- set_LearnRate( Pop = Pop, \n                        LR = LR)\n  Pop <- set_StudyTime( Pop = Pop )\n  TL <- get_Timeline( TL =TL,\n                       Time = 0,\n                       Pop = Pop,\n                       Info = Kname,\n                       Sum = 1 )\n  \n  for(i in 1:STn) {\n    Pop <- learn(  Pop = Pop,\n                   LR = LR,\n                   ST = ST)\n    TL <- get_Timeline( TL =TL,\n                         Time = i,\n                         Pop = Pop,\n                         Info = Kname,\n                         Sum = 1 )\n  }\n    \n  Output <- list( Pop = Pop,\n                  TL = TL)\n  return(Output)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  A List with the new Population and a Timeline over the number of itterations\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnA = 50                          # number of Agents\nID = seq_len(nA)                 # ID of the Agents\nK = (seq_len(nA)-1)/50           # Knowledge\n\nPop <- tibble( ID = ID )\nPop <- set_Knowledge( Pop = Pop, K = K )\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 2\n      ID Knowledge\n   <int>     <dbl>\n 1     1      0   \n 2     2      0.02\n 3     3      0.04\n 4     4      0.06\n 5     5      0.08\n 6     6      0.1 \n 7     7      0.12\n 8     8      0.14\n 9     9      0.16\n10    10      0.18\n# ℹ 40 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_learn(Pop = Pop,\n                 LR = 0.1,\n                 ST = 1,\n                 STn = 500)\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 4\n      ID Knowledge LearnRate StudyTime\n   <int>     <dbl>     <dbl>     <dbl>\n 1     1     0.463       0.1       500\n 2     2     0.463       0.1       500\n 3     3     0.463       0.1       500\n 4     4     0.463       0.1       500\n 5     5     0.463       0.1       500\n 6     6     0.463       0.1       500\n 7     7     0.463       0.1       500\n 8     8     0.463       0.1       500\n 9     9     0.463       0.1       500\n10    10     0.464       0.1       500\n# ℹ 40 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nplt_Timeline(res$TL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sketchbook00_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}