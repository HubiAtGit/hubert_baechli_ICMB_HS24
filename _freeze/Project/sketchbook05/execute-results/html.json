{
  "hash": "089a75a472107c1b7842d835ddcdf1a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Areas of Knowledge\"\nauthor: \"Hubert Baechli\"\n\nexecute: \n  cache: false\n---\n\n\n\n\n# Simulating random meetings (Areas of Knowledge)\n\nThe basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.\n\nIf it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.\n\nNow it seems to be time to add other aspects. At first it seems central that different areas of knowledge should be possible.\n\n# Definitions\n\nLoading some Packages for easier Data management and Presentation of Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# set.seed(1)\n```\n:::\n\n\n\n\n# Generic Functions\n\n## update_Pop\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Pop <- function(Pop = Pop,\n                       name = Parametername,\n                       add = 0,\n                       fac = 1,\n                       set = FALSE) {\n\n  if (set == FALSE & name %in% colnames(Pop)) {\n    Pop <- Pop %>%\n      mutate( !!name := ( .data[[name]] + add ) * fac )\n  } else {\n    Pop <- Pop %>%\n      mutate( !!name := add * fac )\n  }\n  return(Pop)\n}\n```\n:::\n\n\n\n\n## sort_Pop\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort_Colnames <- function(Pop = Pop,\n                          name = name) {\n    cols <- Pop %>%\n      select(starts_with(name)) %>%\n      colnames()\n  \n  if (length(cols) == 0) { return(character(0)) }\n  return(sort(cols)) \n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsort_Pop <- function(Pop = Pop,\n                     sort_Par = TRUE,\n                     clean_Par = FALSE,\n                     sort_Agents = NA){\n  if (sort_Par == TRUE) {\n    Pop <- Pop %>%\n      select(tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"ID\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Agents\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Learnrate\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Knowledge\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Counter\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Resources\")),\n             everything())\n    }\n  if (clean_Par == TRUE) {\n    Pop <- Pop %>%\n      select(tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"ID\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Agents\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Learnrate\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Knowledge\")),\n             tidyselect::all_of(sort_Colnames(Pop = Pop, name = \"Counter\")))\n    }\n  if (!is.na(sort_Agents)) {\n    Pop <- Pop %>%\n      arrange(across(all_of(sort_Agents)))\n    }\n  return(Pop)\n}\n```\n:::\n\n\n\n\n## update_Typ\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_Typ <- function(Pop = Pop,\n                    name = name){\n  syntax_remove <- paste0(\"^\", name, \"_\")\n  Typ <- Pop %>%\n    select(starts_with(name)) %>%\n    colnames() %>%\n    str_remove(syntax_remove) \n  return(Typ)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Typ <- function(Pop = Pop,\n                       name = Parametername,\n                       Typ = Typ,\n                       add = 0,\n                       fac = 1,\n                       set = FALSE) {\n  if (length(Typ) != length(add)) {\n    add <- rep(add, length(Typ))\n  }\n  if (length(Typ) != length(fac)) {\n    fac <- rep(fac, length(Typ))\n  }\n  if (length(Typ) != length(set)) {\n    set <- rep(set, length(Typ))\n  }\n  for (i in seq_along(Typ)) {\n    name_i <- paste(name, Typ[[i]], sep = \"_\")\n    Pop <- update_Pop(Pop = Pop, \n                      name = name_i, \n                      add = add[[i]],\n                      fac = fac[[i]],\n                      set = set[[i]])\n    }\n  Pop <- sort_Pop(Pop = Pop)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n## Transform Population-Matrix\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndel_tmp <- function(Pop = Pop,\n                    name = \"tmp_\"){\n  Pop <- Pop %>%\n    select(-starts_with(name))\n  return(Pop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlonger_Pop <- function(Pop = Pop,\n                       name = name){\n  syntax_remove <- paste0(name, \"_\")\n  Pop_long <- Pop %>%\n  pivot_longer(cols = starts_with(name),\n               names_to = \"Typ\",\n               names_prefix = syntax_remove,  \n               values_to = name )\n  return(Pop_long)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwider_Pop <- function(Pop_long = Pop_long,\n                      name = name){\n  syntax_add <- paste0(name, \"_\")\n  Pop <- Pop_long %>%\n    pivot_wider(names_from = Typ,\n                values_from = all_of(name),\n                names_prefix = syntax_add)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n## Calculated Agents Information\n\n### update_Learnrate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Learnrate <- function(Pop = Pop,\n                             sort_Par = TRUE,\n                             clean_Par = FALSE,\n                             sort_Agents = NA){\n  Pop_long <- longer_Pop(Pop = Pop, name = \"Knowledge\")\n  Pop_long <- Pop_long %>%\n    group_by(ID) %>%\n    mutate(tmp_Rank = rank(Knowledge, ties.method = \"random\"),\n           tmp_Rank = max(tmp_Rank) - tmp_Rank + 1,\n           tmp_Rank = 0.5 ^ tmp_Rank,\n           tmp_LR = Knowledge * tmp_Rank,\n           tmp_LR = max(sum(tmp_LR),1E-3),\n           tmp_KxR = max(Knowledge) * sum(tmp_Rank),\n           tmp_Profile = (min(tmp_LR / tmp_KxR, 1) - 0.5) * 2,\n           Agents_Knowledge_Max = max(Knowledge),\n           Agents_Knowledge_Profile = tmp_Profile,\n           Learnrate_Topic = tmp_LR,\n           Learnrate_Others = tmp_LR * tmp_Profile) %>%\n    ungroup() \n  Pop_long <- del_tmp(Pop = Pop_long)\n  Pop <- wider_Pop(Pop_long = Pop_long, name = \"Knowledge\")\n  Pop <- sort_Pop(Pop = Pop,\n                  sort_Par = sort_Par,\n                  clean_Par = clean_Par,\n                  sort_Agents = sort_Agents)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n### update_Topic\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Topic <- function(Pop = Pop,\n                                sort_Par = TRUE,\n                                clean_Par = FALSE,\n                                sort_Agents = NA){\n  Pop_long <- longer_Pop(Pop = Pop, name = \"Knowledge\")\n  Pop_long <- Pop_long %>%\n    group_by(ID) %>%\n    mutate(tmp_Rank = rank(Knowledge, ties.method = \"random\"),\n           tmp_Rank = max(tmp_Rank) - tmp_Rank + 1,\n           tmp_Rank = 0.5 ^ tmp_Rank,\n           ID_Topic = Typ[which.max(tmp_Rank)]) %>%\n    ungroup() \n  Pop_long <- del_tmp(Pop = Pop_long)\n  Pop <- wider_Pop(Pop_long = Pop_long, name = \"Knowledge\")\n  Pop <- sort_Pop(Pop = Pop,\n                  sort_Par = sort_Par,\n                  clean_Par = clean_Par,\n                  sort_Agents = sort_Agents)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n## Generate grouped Population\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngen_Pop <- function(addToPop = NULL,\n                    nA = NumberOfAgents,\n                    ID_Group = ID_Group,\n                    K = Knowledge,\n                    Typ = SpezKnowledge,\n                    pWD = percentsWorkingaDay,\n                    pMD = percentsMeetingsaDay){\n  ID <- seq_len(nA)\n  Pop <- tibble(ID = ID,\n                ID_Group = ID_Group)\n  Pop <- update_Typ(Pop = Pop, \n                    name = \"Agents\", \n                    Typ = list(\"p_WorkDay\", \"p_MeetDay\"),\n                    add = list(pWD, pMD),\n                    set = TRUE)\n  Pop <- update_Typ(Pop = Pop, \n                    name = \"Knowledge\", \n                    Typ = Typ, \n                    add = K,\n                    set = TRUE)\n\n  if (!is.null(addToPop)) {\n    Pop <- Pop %>%\n      mutate(ID = ID + max(addToPop$ID))\n    Typ_add <- get_Typ(Pop = addToPop, name = \"Knowledge\")\n    Pop <- update_Typ(Pop = Pop, \n                      name = \"Knowledge\", \n                      Typ = Typ_add, \n                      add = 0)\n    addToPop <- update_Typ(Pop = addToPop, \n                           name = \"Knowledge\", \n                           Typ = Typ, \n                           add = 0)\n    Pop <- bind_rows(addToPop,Pop)\n    }\n  Pop <- update_Learnrate(Pop = Pop)\n  Pop <- update_Topic(Pop = Pop)\n  Pop <- sort_Pop(Pop = Pop)\n  return(Pop)\n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = 3, \n                ID_Group = \"Zürich\",\n                K = list(0.01, 0.2), \n                Typ = list(\"M1\", \"M2\"), \n                pWD = 0.5,\n                pMD = 0.8)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 2, \n                ID_Group = \"Bern\",\n                K = list(0.01, 0.2), \n                Typ = list(\"M3\", \"M1\"), \n                pWD = 0.2,\n                pMD = 0.5)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 1, \n                ID_Group = \"Bern\",\n                K = list(0.8), \n                Typ = list(\"M1\"), \n                pWD = 0.2,\n                pMD = 0.5)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 1, \n                ID_Group = \"Bern\",\n                K = list(0.3, 0.3, 0.3), \n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.2,\n                pMD = 0.5)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 1, \n                ID_Group = \"Bern\",\n                K = list(0.0, 0.0, 0.0), \n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.2,\n                pMD = 0.5)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 12\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M2                        0.2                    0.171\n2     2 Zürich   M2                        0.2                    0.171\n3     3 Zürich   M2                        0.2                    0.171\n4     4 Bern     M1                        0.2                    0.171\n5     5 Bern     M1                        0.2                    0.171\n6     6 Bern     M1                        0.8                    0.143\n7     7 Bern     M3                        0.3                    1    \n8     8 Bern     M1                        0                      1    \n# ℹ 7 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Simulation parameter\n\n### reset_Counter\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreset_Counter <- function(Pop = Pop){\n  Pop <- update_Typ(Pop = Pop,\n                    name = \"Counter\",\n                    Typ = list(\"Day\", \n                               \"Time_total\",\n                               \"Time_meet\",\n                               \"Time_learnd\",\n                               \"Number_meet\"),\n                    add = 0,\n                    set = TRUE)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n### update_Resources\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Resources <- function(Pop = Pop,\n                             time_day = hoursDay,\n                             set = TRUE){\n  tmp_Time <- time_day * Pop[[\"Agents_p_WorkDay\"]]\n  tmp_p <- Pop[[\"Agents_p_MeetDay\"]]\n  Pop <- update_Typ(Pop = Pop,\n                  name = \"Resources\",\n                  Typ = list(\"Time_total\",\n                             \"Time_meet\",\n                             \"Time_learnd\"),\n                  add = list(tmp_Time,\n                             tmp_Time * tmp_p,\n                             tmp_Time * (1-tmp_p)),\n                  set = set)\n  return(Pop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- reset_Counter(Pop = Pop)\nPop <- update_Resources(Pop = Pop, time_day = 8)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M2                        0.2                    0.171\n2     2 Zürich   M2                        0.2                    0.171\n3     3 Zürich   M2                        0.2                    0.171\n4     4 Bern     M1                        0.2                    0.171\n5     5 Bern     M1                        0.2                    0.171\n6     6 Bern     M1                        0.8                    0.143\n7     7 Bern     M3                        0.3                    1    \n8     8 Bern     M1                        0                      1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# Meetings\n\nFunctions to select and reintegrate a Sub Populations\n\n### Select a Sub Population (random)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_SubPop <- function(Pop = Pop,\n                       IDs = NULL,\n                       n = 2) {\n  if (is.null(IDs)) {\n    IDs <- sample( Pop[[\"ID\"]], size=n )\n    }\n  SubPop <- list()\n  SubPop$sel <- Pop %>%\n    filter(ID %in% IDs) %>%\n    arrange(match(ID, IDs))\n  SubPop$rest <- Pop %>%\n    filter(!ID %in% IDs)\n  return(SubPop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSubPop <- sel_SubPop( Pop = Pop )\nSubPop$sel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     3 Zürich   M2                        0.2                    0.171\n2     7 Bern     M3                        0.3                    1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nSubPop$rest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M2                        0.2                    0.171\n2     2 Zürich   M2                        0.2                    0.171\n3     4 Bern     M1                        0.2                    0.171\n4     5 Bern     M1                        0.2                    0.171\n5     6 Bern     M1                        0.8                    0.143\n6     8 Bern     M1                        0                      1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSubPop <- sel_SubPop( Pop = Pop , IDs = c(2, 1))\nSubPop$sel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     2 Zürich   M2                        0.2                    0.171\n2     1 Zürich   M2                        0.2                    0.171\n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nSubPop$rest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     3 Zürich   M2                        0.2                    0.171\n2     4 Bern     M1                        0.2                    0.171\n3     5 Bern     M1                        0.2                    0.171\n4     6 Bern     M1                        0.8                    0.143\n5     7 Bern     M3                        0.3                    1    \n6     8 Bern     M1                        0                      1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n### Integrate Sub Population\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nint_SubPop <- function(SubPop = SubPop,\n                       Pop = Pop) {\n  col_sort <- colnames(Pop)\n  SubPop <- SubPop[, col_sort]\n  IDs <- SubPop[[\"ID\"]]\n  Pop[Pop$ID %in% IDs,] <- SubPop\n  Pop <- Pop %>%\n    arrange(ID)\n  return(Pop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M2                        0.2                    0.171\n2     2 Zürich   M2                        0.2                    0.171\n3     3 Zürich   M2                        0.2                    0.171\n4     4 Bern     M1                        0.2                    0.171\n5     5 Bern     M1                        0.2                    0.171\n6     6 Bern     M1                        0.8                    0.143\n7     7 Bern     M3                        0.3                    1    \n8     8 Bern     M1                        0                      1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nSubPop <- sel_SubPop(Pop = Pop, IDs = c(2, 1) )$sel\nSubPop <- update_Pop(Pop = SubPop,\n                     name = \"Knowledge_M2\",\n                     add = 0,\n                     set = TRUE)\nPop <- int_SubPop(SubPop = SubPop, Pop = Pop)\nPop <- update_Learnrate(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                       0.01                    0.143\n2     2 Zürich   M1                       0.01                    0.143\n3     3 Zürich   M2                       0.2                     0.171\n4     4 Bern     M1                       0.2                     0.171\n5     5 Bern     M1                       0.2                     0.171\n6     6 Bern     M1                       0.8                     0.143\n7     7 Bern     M3                       0.3                     1    \n8     8 Bern     M3                       0                       1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Select a random Slot of pairs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_Pairs_rnd <- function(Pop = Pop,\n                          psize = percentsOfPop) {      \n  psize <- min(psize, 1)   \n  nR <- nrow(Pop)   \n  n <- round(nR * psize * 0.4999, 0)   \n  n <- max(n, 1)      \n  SubPop <- sel_SubPop( Pop = Pop, n = n)      \n  Slot1 <- SubPop$sel %>%          \n    mutate(tmp_ID = seq_len(n))   \n  if (nrow(SubPop$rest) == n) {     \n    Slot2 <- SubPop$rest   \n  } else {     \n      SubPop <- sel_SubPop( Pop = SubPop$rest, n = n)      \n      Slot2 <- SubPop$sel   \n  }   \n  Slot2 <- Slot2 %>%          \n    mutate(tmp_ID = seq_len(n))   \n  Pairs <- bind_rows(Slot1, Slot2)   \n  return(Pairs)     \n  }  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                       0.01                    0.143\n2     2 Zürich   M1                       0.01                    0.143\n3     3 Zürich   M2                       0.2                     0.171\n4     4 Bern     M1                       0.2                     0.171\n5     5 Bern     M1                       0.2                     0.171\n6     6 Bern     M1                       0.8                     0.143\n7     7 Bern     M3                       0.3                     1    \n8     8 Bern     M3                       0                       1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPairs <- sel_Pairs_rnd(Pop = Pop, psize = 0.5) \nPairs \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 21\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     4 Bern     M1                       0.2                     0.171\n2     7 Bern     M3                       0.3                     1    \n3     2 Zürich   M1                       0.01                    0.143\n4     6 Bern     M1                       0.8                     0.143\n# ℹ 16 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>, tmp_ID <int>\n```\n\n\n:::\n\n```{.r .cell-code}\nPairs <- sel_Pairs_rnd(Pop = Pairs, psize = 0.5) \nPairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 21\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     4 Bern     M1                       0.2                     0.171\n2     2 Zürich   M1                       0.01                    0.143\n# ℹ 16 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>, tmp_ID <int>\n```\n\n\n:::\n:::\n\n\n\n\n# **Learning**\n\nLearning with a exponential lernrate\n\n## **... by Pairs**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearn_Pairs <- function(Pairs = Pairs,\n                        time_meet = time_meet) {\n  Pop_long <- longer_Pop(Pop = Pairs, name = \"Knowledge\")\n  Pop_long <- Pop_long %>%\n    mutate(tmp_Learnrate = ifelse(\n      Typ == ID_Topic, \n      Learnrate_Topic, \n      Learnrate_Others)) %>%\n  group_by(tmp_ID) %>%\n    mutate(tmp_facT = ifelse(\n      Typ == ID_Topic, 1, 0)) %>%\n  group_by(tmp_ID, Typ) %>%\n    mutate(tmp_facT = mean(tmp_facT ),\n           tmp_Learnrate = mean(tmp_Learnrate)) %>%\n  group_by(ID) %>%\n    mutate(tmp_time_learn = tmp_facT * time_meet,\n           tmp_Time0 = ( 1 - Knowledge )^( 1 / -tmp_Learnrate ),\n           Knowledge = 1 - ( tmp_Time0 + tmp_time_learn)^( -tmp_Learnrate )) %>%\n    ungroup()\n  \n  Pop_long <- del_tmp(Pop = Pop_long)\n  Pairs <- wider_Pop(Pop_long = Pop_long, name = \"Knowledge\")\n  Pairs <- sort_Pop(Pop = Pairs)\n  \n  Pairs <- update_Typ(Pop = Pairs,\n                      name = \"Counter\",\n                      Typ = list(\"Time_total\",\n                                 \"Time_meet\", \n                                 \"Number_meet\"),\n                      add = list(time_meet,\n                                 time_meet,\n                                 1))\n  Pairs <- update_Typ(Pop = Pairs,\n                      name = \"Resources\",\n                      Typ = list(\"Time_total\",\"Time_meet\"),\n                      add = list(-time_meet))\n  return(Pairs)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 21\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     4 Bern     M1                       0.2                     0.171\n2     2 Zürich   M1                       0.01                    0.143\n# ℹ 16 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>, tmp_ID <int>\n```\n\n\n:::\n\n```{.r .cell-code}\nPairsT <- learn_Pairs(Pairs = Pairs, time_meet = 0.75)\nPairsT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     4 Bern     M1                       0.2                     0.171\n2     2 Zürich   M1                       0.01                    0.143\n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPop <- int_SubPop(SubPop = PairsT, Pop = Pop)\nPop <- update_Learnrate(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                     0.01                      0.143\n2     2 Zürich   M1                     0.0354                    0.143\n3     3 Zürich   M2                     0.2                       0.171\n4     4 Bern     M1                     0.201                     0.171\n5     5 Bern     M1                     0.2                       0.171\n6     6 Bern     M1                     0.8                       0.143\n7     7 Bern     M3                     0.3                       1    \n8     8 Bern     M3                     0                         1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## ... by it Own\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearn <- function(Pop = Pop,                   \n                  con = TRUE) {   \n  if (con == TRUE){     \n    tmp_Learnrate <- Pop[[\"Learnrate_Topic\"]]\n    Pop <- update_Learnrate(Pop = Pop)     \n    Pop <- update_Topic(Pop = Pop) \n    Pop <- update_Pop(Pop = Pop,\n                      name = \"Learnrate_Topic\",\n                      add = tmp_Learnrate, \n                      fac = 0.5)\n    tmp_Time <- Pop[[\"Resources_Time_meet\"]]\n    Pop <- update_Typ(Pop = Pop, \n                      name = \"Resources_Time\",\n                      Typ = list(\"meet\", \"learnd\"),\n                      add = list(-tmp_Time, tmp_Time))\n  } \n  \n  Pop_long <- longer_Pop(Pop = Pop, name = \"Knowledge\") \n  Pop_long <- Pop_long %>%     \n    group_by(ID) %>%     \n    mutate(tmp_Time_learnd = ifelse(\n      Typ == ID_Topic, \n      Resources_Time_learnd, \n      0)) %>%  \n    mutate(tmp_Learnrate = Learnrate_Topic,            \n           tmp_Time0 = ( 1 - Knowledge )^( 1 / -tmp_Learnrate ),\n           tmp_Time1 = tmp_Time0 + tmp_Time_learnd,\n           Knowledge = 1 - ( tmp_Time1 )^( -tmp_Learnrate )) %>%\n    ungroup()   \n  \n  Pop_long <- del_tmp(Pop = Pop_long)\n  Pop <- wider_Pop(Pop_long = Pop_long, name = \"Knowledge\") \n  Pop <- sort_Pop(Pop = Pop)\n  \n  tmp_Time <- Pop[[\"Resources_Time_learnd\"]]\n  Pop <- update_Typ(Pop = Pop,\n                    name = \"Counter\",\n                    Typ = list(\"Time_total\", \"Time_learnd\"),\n                    add = list(tmp_Time))\n  Pop <- update_Typ(Pop = Pop,\n                    name = \"Resources\",\n                    Typ = list(\"Time_total\", \"Time_learnd\"),\n                    add = list(-tmp_Time))\n  Pop <- update_Learnrate(Pop = Pop)     \n  Pop <- update_Topic(Pop = Pop)\n  \n  return(Pop) \n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                     0.01                      0.143\n2     2 Zürich   M1                     0.0354                    0.143\n3     3 Zürich   M2                     0.2                       0.171\n4     4 Bern     M1                     0.201                     0.171\n5     5 Bern     M1                     0.2                       0.171\n6     6 Bern     M1                     0.8                       0.143\n7     7 Bern     M3                     0.3                       1    \n8     8 Bern     M3                     0                         1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPop <- learn(Pop = Pop, con = FALSE) \nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                   0.0105                      0.143\n2     2 Zürich   M1                   0.0371                      0.143\n3     3 Zürich   M2                   0.207                       0.170\n4     4 Bern     M1                   0.208                       0.170\n5     5 Bern     M1                   0.207                       0.170\n6     6 Bern     M1                   0.801                       0.143\n7     7 Bern     M3                   0.334                       0.914\n8     8 Bern     M3                   0.000588                    1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPop <- learn(Pop = Pop, con = TRUE) \nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                   0.0124                      0.143\n2     2 Zürich   M1                   0.0420                      0.143\n3     3 Zürich   M2                   0.232                       0.167\n4     4 Bern     M1                   0.208                       0.170\n5     5 Bern     M1                   0.214                       0.170\n6     6 Bern     M1                   0.802                       0.143\n7     7 Bern     M3                   0.365                       0.848\n8     8 Bern     M3                   0.000955                    1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## ... **by** Days\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearn_Day <- function(Pop = Pop,\n                      time_day = time_day,\n                      time_meet = time_meet) { \nif (!any(startsWith(names(Pop), \"Counter_\"))) {\n  Pop <- reset_Counter(Pop = Pop)\n  }\nPop <- update_Resources(Pop = Pop, time_day = time_day)\n\nnR_Pop <- nrow(Pop)\npsize <- median(Pop[[\"Agents_p_MeetDay\"]])\niD <- round(time_day / time_meet, digits = 0)\n\nfor(i in 1:iD) {\n  Par <- Pop %>%\n    select(Resources_Time_meet) %>%\n    mutate(Break = ifelse(\n      Resources_Time_meet >= time_meet, \n      1,\n      0))\n  ParBreak <- sum(Par$Break)\n  if (ParBreak < 2) { break }\n   \n  Pop_Res <- Pop[Pop$Resources_Time_meet >= time_meet, ]\n  \n  nR_Pop_Res <- nrow(Pop_Res)\n  psize_i <- psize / nR_Pop_Res * nR_Pop\n  \n  Pairs <- sel_Pairs_rnd(Pop = Pop_Res, psize = psize_i)\n  Pairs <- learn_Pairs(Pairs = Pairs, time_meet = time_meet)\n  \n  Pop <- int_SubPop(SubPop = Pairs, Pop = Pop)\n} \nPop <- learn(Pop = Pop, con = TRUE)\n\nreturn(Pop) \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- reset_Counter(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                   0.0124                      0.143\n2     2 Zürich   M1                   0.0420                      0.143\n3     3 Zürich   M2                   0.232                       0.167\n4     4 Bern     M1                   0.208                       0.170\n5     5 Bern     M1                   0.214                       0.170\n6     6 Bern     M1                   0.802                       0.143\n7     7 Bern     M3                   0.365                       0.848\n8     8 Bern     M3                   0.000955                    1    \n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPop <- learn_Day(Pop = Pop, time_day = 8, time_meet = 0.75)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 20\n     ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n  <int> <chr>    <chr>                   <dbl>                    <dbl>\n1     1 Zürich   M1                     0.0179                    0.143\n2     2 Zürich   M1                     0.0494                    0.662\n3     3 Zürich   M2                     0.243                     0.222\n4     4 Bern     M1                     0.216                     0.172\n5     5 Bern     M1                     0.223                     0.211\n6     6 Bern     M1                     0.804                     0.182\n7     7 Bern     M3                     0.399                     0.825\n8     8 Bern     M1                     0.0171                    0.268\n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>,\n#   Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# Visualization\n\n### Get Agents-Timelines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_Timeline <- function(TL = Timeline,                          \n                         Pop = Pop) {   \n  TLadd <- sort_Pop(Pop = Pop, clean_Par = TRUE)\n  Time <- unique(Pop[[\"Counter_Day\"]])\n  if (Time == 0) {\n    TL <- TLadd \n  } else {\n    TL <- bind_rows(TL, TLadd)   \n  }\n  return(TL)  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTimeline <- get_Timeline(TL = Timeline,                          \n                         Pop = Pop) \nPop1 <- update_Pop(Pop = Pop,\n                   name = \"Counter_Day\",\n                   add = 1)\nTimeline <- get_Timeline(TL = Timeline,                          \n                         Pop = Pop1) \nTimeline \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 17\n      ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n   <int> <chr>    <chr>                   <dbl>                    <dbl>\n 1     1 Zürich   M1                     0.0179                    0.143\n 2     2 Zürich   M1                     0.0494                    0.662\n 3     3 Zürich   M2                     0.243                     0.222\n 4     4 Bern     M1                     0.216                     0.172\n 5     5 Bern     M1                     0.223                     0.211\n 6     6 Bern     M1                     0.804                     0.182\n 7     7 Bern     M3                     0.399                     0.825\n 8     8 Bern     M1                     0.0171                    0.268\n 9     1 Zürich   M1                     0.0179                    0.143\n10     2 Zürich   M1                     0.0494                    0.662\n11     3 Zürich   M2                     0.243                     0.222\n12     4 Bern     M1                     0.216                     0.172\n13     5 Bern     M1                     0.223                     0.211\n14     6 Bern     M1                     0.804                     0.182\n15     7 Bern     M3                     0.399                     0.825\n16     8 Bern     M1                     0.0171                    0.268\n# ℹ 12 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Timeline**plots**\n\n### plt_Learnrate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Learnrate <- function(TL = Timeline,\n                          Group = NA) { \n  Grouping <- c(\"Counter_Day\", \"Typ\")\n  Data <- longer_Pop(Pop = TL, name = \"Learnrate\")\n  \n  if (Group %in% colnames(Data)) {\n    Grouping <- c(Grouping, Group)\n    Data <- Data %>%\n      group_by(across(all_of(Grouping))) %>%\n      summarise(Learnrate = mean(Learnrate, na.rm = TRUE), .groups = \"drop\") %>%\n      mutate( plt_Typ = interaction(Typ, .data[[Group]], sep = \"_\"),\n              !!Group := factor(.data[[Group]]))\n  } else {\n    Data <- Data %>%\n      group_by(across(all_of(Grouping))) %>%\n      summarise(Learnrate = mean(Learnrate, na.rm = TRUE), .groups = \"drop\") %>%\n      mutate( plt_Typ = Typ)\n  }\n    \n  Data$Typ <- factor(Data$Typ, levels = c(\"Topic\", \"Others\"))\n  \n  plt <- ggplot(data = Data, \n                aes(x = Counter_Day, y = Learnrate, group = plt_Typ)) +\n    geom_line(aes(linetype = Typ), linewidth = 1) +\n    scale_linetype_manual(values = c(\"Topic\" = \"solid\", \n                                     \"Others\" = \"dashed\")) +\n    ggtitle(\"Timeline - Mean Learnrate\") +     \n    xlab(\"Number of Days\") +     \n    scale_x_continuous(\n      limits = c(0, max(Data$Counter_Day, na.rm = TRUE))) +\n    scale_y_continuous(\n      limits = c(0, 1), \n      breaks = seq(0, 1, 0.2)) + \n    guides(linetype = guide_legend(title = \"\"))+\n    theme_minimal() +\n    theme(legend.position = \"top\",\n          legend.justification = \"left\")\n  \n  if (Group %in% colnames(Data)) {\n    str_remove(Group,\"^ID_\")\n    plt <- plt +\n      aes(color = .data[[Group]]) +\n      guides(color = guide_legend(title = str_remove(Group,\"^ID_\"), \n                                  position = \"right\" ),\n             override.aes = list(linewidth = 1,\n                                 alpha = 1))\n    }\n  \n  return(plt)\n}\n```\n:::\n\n\n\n\n### plt_Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Knowledge <- function(TL = Timeline) {  \n   \n  TL <- longer_Pop(Pop = TL, name = \"Knowledge\") %>%     \n    group_by(Counter_Day, Typ) %>%  \n    summarise(Knowledge = mean(Knowledge, na.rm = TRUE), .groups = \"drop\") %>%\n    mutate(TopicColor = case_when(\n      grepl(\"M1\", Typ) ~ \"blue\",  \n      grepl(\"M2\", Typ) ~ \"green\",  \n      grepl(\"M3\", Typ) ~ \"red\",  \n      TRUE ~ \"lightgray\")\n      )\n  ggplot(TL, aes(x = Counter_Day, y = Knowledge, group = Typ, color = Typ)) +\n    geom_line(linewidth = 1) +\n    scale_color_manual(values = unique(TL$TopicColor)) + \n    ggtitle(\"Timeline - Mean Knowledge\") +     \n    xlab(\"Number of Days\") +     \n    scale_x_continuous(\n      limits = c(0, max(TL$Counter_Day, na.rm = TRUE)), \n      expand = expansion(mult = c(0, 0)) ) +\n    scale_y_continuous(\n      limits = c(0, 1), \n      breaks = seq(0, 1, 0.2)) + \n    theme_minimal() +\n    theme(\n      legend.title = element_blank(),       \n      legend.position = \"top\",       \n      legend.justification = \"left\"\n    )\n\n}\n```\n:::\n\n\n\n\n### plt_Topics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Topics <- function(TL = Timeline) {   \n  TL <- TL %>%\n    group_by(Counter_Day, ID_Topic) %>%\n    summarise(Frequency = n(), .groups = \"drop\") %>%\n    mutate(TopicColor = case_when(\n      grepl(\"M1\", ID_Topic) ~ \"blue\",  \n      grepl(\"M2\", ID_Topic) ~ \"green\",  \n      grepl(\"M3\", ID_Topic) ~ \"red\",  \n      TRUE ~ \"lightgray\")\n      )\n  \n  TL$Time <- factor(TL$Counter_Day, levels = unique(TL$Counter_Day))\n  \n  ggplot(TL, aes(x = Time, y = Frequency, fill = ID_Topic)) +\n    geom_bar(stat = \"identity\", \n             position = \"stack\",\n             width = 0.8) +\n    scale_fill_manual(values = unique(TL$TopicColor)) +\n    ggtitle(\"Timeline - Agent's Topic\") +     \n    xlab(\"Number of Days\") +\n    scale_x_discrete(\n      expand = expansion(mult = c(0, 0))) +\n    theme_minimal() +\n    theme(legend.title = element_blank(),       \n          legend.position = \"top\",       \n          legend.justification = \"left\")\n}\n```\n:::\n\n\n\n\n## Timepoint**plots**\n\n### Number of Meetings\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Number_meet <- function(TL = Timeline,\n                            TP = NA,\n                            Group = Group) {\n  if (is.na(TP)) {\n    TP <- unique(TL$Counter_Day)\n  } \n  Titel <- paste(\"Number of Meetings - Day\", TP)\n  Data <- TL %>%\n    filter(Counter_Day == TP)\n  \n  if (Group %in% colnames(Data)) {\n    Data <- Data %>%\n      mutate( !!Group := factor(.data[[Group]]))\n  } else {\n    Group <- \"without\"\n    Data <- Data %>%\n      mutate( !!Group := \"Population\")\n  }\n  \n  plt <- ggplot(Data, \n                aes(x = ID, y = Counter_Number_meet, color = .data[[Group]])) +\n    geom_step(direction = \"mid\",linewidth = 1) +\n    scale_x_continuous(limits = c(1,max(Data$ID))) +\n    scale_y_continuous(limits = c(0,max(Data$Counter_Number_meet))) +\n    ggtitle(Titel) +     \n    xlab(\"Agents\") +     \n    ylab(\"Frequency\") +\n    theme_minimal() +\n    theme(\n      legend.title = element_blank(),       \n      legend.position = \"top\",       \n      legend.justification = \"left\"\n    )\n  \n  return(plt)\n  }\n```\n:::\n\n\n\n\n### Time_invested\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Time_invest <- function(TL = Timeline,\n                            TP = NA,\n                            Group = NA) {\n  if (is.na(TP)) {\n    TP <- unique(TL$Counter_Day)\n  }\n  Titel <- paste(\"Time invested until Day\", TP)\n  Data <- longer_Pop(Pop = TL, name = \"Counter_Time\") %>%\n    filter(Counter_Day == TP)\n  \n  Grouping <- c(\"Typ\")\n  \n  if (Group %in% colnames(Data)) {\n    Grouping <- c(Grouping, Group)\n    Data <- Data %>%\n      mutate( plt_Typ = interaction(Typ, .data[[Group]], sep = \"_\"),\n              !!Group := factor(.data[[Group]]))\n  } else {\n    Data <- Data %>%\n      mutate( plt_Typ = Typ)\n  }\n    \n  Data$Typ <- factor(Data$Typ, levels = c(\"meet\", \"learnd\", \"total\"))\n\n  plt <- ggplot(Data, \n                aes(x = ID, y = Counter_Time, \n                    group = plt_Typ, \n                    alpha = Typ,\n                    linewidth = Typ)) +\n    \n    geom_step(direction = \"mid\") +\n    scale_alpha_manual(values = c(\"total\" = 0.4, \n                                  \"learnd\" = 0.6, \n                                  \"meet\" = 1.0)) +\n    scale_linewidth_manual(values = c(\"total\" = 1.5, \n                                      \"learnd\" = 0.5, \n                                      \"meet\" = 1.0)) +\n    scale_x_continuous(limits = c(1,max(Data$ID))) +\n    scale_y_continuous(limits = c(0,max(Data$Counter_Time))) +\n    ggtitle(Titel) +     \n    xlab(\"Agents\") +     \n    ylab(\"Hours\") +\n    guides(alpha = \"none\",\n           linewidth = guide_legend(title = \"\"))+\n    theme_minimal() +\n    theme(\n      legend.title = element_blank(),       \n      legend.position = \"top\",       \n      legend.justification = \"left\"\n    )\n  \n  if (Group %in% colnames(Data)) {\n    str_remove(Group,\"^ID_\")\n    plt <- plt +\n      aes(color = .data[[Group]]) +\n      guides(color = guide_legend(title = str_remove(Group,\"^ID_\"), \n                                  position = \"right\" ),\n             override.aes = list(linewidth = 1,\n                                 alpha = 1))\n    }\n  \n  return(plt)\n  }\n```\n:::\n\n\n\n\n### Learnrate at Timepoint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Learnrate_Timet <- function(TL = Timeline,\n                                TP = NA,\n                                Group = NA) {\n  if (is.na(TP)) {\n    TP <- unique(TL$Counter_Day)\n  }\n  Titel <- paste(\"Learnrate at Day\", TP)\n  Data <- longer_Pop(Pop = TL, name = \"Learnrate\") %>%\n    filter(Counter_Day == TP)\n  \n  Grouping <- c(\"Typ\")\n  \n  if (Group %in% colnames(Data)) {\n    Grouping <- c(Grouping, Group)\n    Data <- Data %>%\n      mutate( plt_Typ = interaction(Typ, .data[[Group]], sep = \"_\"),\n              !!Group := factor(.data[[Group]]))\n  } else {\n    Data <- Data %>%\n      mutate( plt_Typ = Typ)\n  }\n  \n  Data$Typ <- factor(Data$Typ, levels = c(\"Topic\", \"Others\"))\n  \n  plt <- ggplot(data = Data, \n                aes(x = ID, \n                    y = Learnrate, \n                    group = plt_Typ,\n                    linewidth = Typ)) +\n    geom_step(direction = \"mid\") +\n    scale_linewidth_manual(values = c(\"Topic\" = 1.0, \n                                      \"Others\" = 0.8)) +\n    scale_x_continuous(limits = c(min(Data$ID), max(Data$ID))) +\n    scale_y_continuous(limits = c(0, 1)) +\n    ggtitle(Titel) +     \n    xlab(\"Agents\") +     \n    ylab(\"Learnrate\") +\n    guides(linewidth = guide_legend(title = \"\"))+\n    theme_minimal() +\n    theme(\n      legend.title = element_blank(),       \n      legend.position = \"top\",       \n      legend.justification = \"left\"\n    )\n  \n  if (Group %in% colnames(Data)) {\n    str_remove(Group,\"^ID_\")\n    plt <- plt +\n      aes(color = .data[[Group]]) +\n      guides(color = guide_legend(title = str_remove(Group,\"^ID_\"), \n                                  position = \"right\" ),\n             override.aes = list(linewidth = 1,\n                                 alpha = 1))\n    }\n\n  return(plt)\n}\n```\n:::\n\n\n\n\n### Knowledge at Timepoint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Knowledge_Time <- function(TL = Timeline, \n                               TP = NA) {\n  if (is.na(TP)) {\n    TP <- unique(TL$Counter_Day)\n  }\n  \n  Titel <- paste(\"Knowledge at Day\", TP)\n  Data <- longer_Pop(Pop = TL, name = \"Knowledge\") %>%\n    filter(Counter_Day == TP)\n  \n  plt <- ggplot(Data, \n                aes(x = ID, y = Knowledge, group = Typ, color = Typ)) +\n    geom_step(direction = \"mid\", linewidth = 1) +\n    scale_x_continuous(limits = c(min(Data$ID), max(Data$ID))) +\n    scale_y_continuous(limits = c(0, 1)) +\n    ggtitle(Titel) +     \n    xlab(\"Agents\") +     \n    ylab(\"Knowledge\") +\n    theme_minimal() +\n    theme(\n      legend.title = element_blank(),       \n      legend.position = \"top\",       \n      legend.justification = \"left\"\n    )\n  \n  return(plt)\n}\n```\n:::\n\n\n\n\n# **Simulation**\n\n## Function\n\nA learning process with updated learn rate by current knowledge when Agents meet randomly by Days\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_Days <- function(Pop = Pop,\n                     nD = nubmberDay,\n                     time_day = 8,\n                     time_meet = 0.75) {\n  Pop <- update_Learnrate(Pop = Pop)\n  Pop <- update_Topic(Pop = Pop)\n  Pop <- reset_Counter( Pop = Pop)\n  Pop <- update_Resources( Pop = Pop, time_day = time_day)\n  TL <- get_Timeline(TL = TL, Pop = Pop)\n  for(i in 1:nD) {\n    Pop <- learn_Day(Pop = Pop,\n                     time_day = time_day,\n                     time_meet = time_meet)\n    Pop <- update_Typ(Pop = Pop,\n                      name = \"Counter\",\n                      Typ = list(\"Day\"),\n                      add = list(i),\n                      set = TRUE)\n    TL <- get_Timeline(TL = TL, Pop = Pop)\n  }\n    \n  Output <- list( Pop = Pop,\n                  TL = TL)\n  return(Output)\n}\n```\n:::\n\n\n\n\n## Definition & Calculation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = 30, \n                ID_Group = \"Zürich\",\n                K = list(0.01), \n                Typ = list(\"M1\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 30, \n                ID_Group = \"Bern\",\n                K = list(0.01), \n                Typ = list(\"M2\"), \n                pWD = 0.4,\n                pMD = 0.8)\n\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 × 11\n      ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n   <int> <chr>    <chr>                   <dbl>                    <dbl>\n 1     1 Zürich   M1                       0.01                    0.333\n 2     2 Zürich   M1                       0.01                    0.333\n 3     3 Zürich   M1                       0.01                    0.333\n 4     4 Zürich   M1                       0.01                    0.333\n 5     5 Zürich   M1                       0.01                    0.333\n 6     6 Zürich   M1                       0.01                    0.333\n 7     7 Zürich   M1                       0.01                    0.333\n 8     8 Zürich   M1                       0.01                    0.333\n 9     9 Zürich   M1                       0.01                    0.333\n10    10 Zürich   M1                       0.01                    0.333\n# ℹ 50 more rows\n# ℹ 6 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 × 19\n      ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n   <int> <chr>    <chr>                   <dbl>                    <dbl>\n 1     1 Zürich   M1                      0.696                    0.602\n 2     2 Zürich   M1                      0.693                    0.568\n 3     3 Zürich   M1                      0.698                    0.600\n 4     4 Zürich   M1                      0.699                    0.615\n 5     5 Zürich   M1                      0.699                    0.577\n 6     6 Zürich   M1                      0.699                    0.587\n 7     7 Zürich   M1                      0.701                    0.574\n 8     8 Zürich   M1                      0.699                    0.585\n 9     9 Zürich   M1                      0.695                    0.544\n10    10 Zürich   M1                      0.694                    0.646\n# ℹ 50 more rows\n# ℹ 14 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Counter_Day <dbl>, Counter_Number_meet <dbl>,\n#   Counter_Time_learnd <dbl>, Counter_Time_meet <dbl>,\n#   Counter_Time_total <dbl>, Resources_Time_learnd <dbl>,\n#   Resources_Time_meet <dbl>, Resources_Time_total <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n### Visualization Results \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Topics(TL = res$TL)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Knowledge(TL = res$TL)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-41-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate(TL = res$TL)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-41-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate(TL = res$TL, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-41-4.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate(TL = res$TL, Group = \"ID_Topic\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-41-5.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Number_meet(TL = res$TL, TP = 10, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Time_invest(TL = res$TL, TP = 20, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-42-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Time_invest(TL = res$TL, TP = 10)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-42-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate_Timet(TL = res$TL, TP = 20, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-42-4.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate_Timet(TL = res$TL, TP = 10)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-42-5.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Knowledge_Time(TL = res$TL, TP = 10)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-42-6.png){width=672}\n:::\n:::\n\n\n\n\n# Special Cases\n\n### Only one Agent with Knowledge (0.8)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = 29, \n                ID_Group = \"Zürich\",\n                K = list(0.01), \n                Typ = list(\"M1\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 1, \n                ID_Group = \"Zürich\",\n                K = list(0.8), \n                Typ = list(\"M1\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 29, \n                ID_Group = \"Bern\",\n                K = list(0.01), \n                Typ = list(\"M2\"), \n                pWD = 0.4,\n                pMD = 0.8)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 1, \n                ID_Group = \"Bern\",\n                K = list(0.8), \n                Typ = list(\"M2\"), \n                pWD = 0.4,\n                pMD = 0.4)\nPop <- gen_Pop( addToPop = Pop,\n                nA = 30, \n                ID_Group = \"Basel\",\n                K = list(0.01), \n                Typ = list(\"M3\"), \n                pWD = 0.8,\n                pMD = 0.4)\n\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 90 × 12\n      ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n   <int> <chr>    <chr>                   <dbl>                    <dbl>\n 1     1 Zürich   M1                       0.01                    0.143\n 2     2 Zürich   M1                       0.01                    0.143\n 3     3 Zürich   M1                       0.01                    0.143\n 4     4 Zürich   M1                       0.01                    0.143\n 5     5 Zürich   M1                       0.01                    0.143\n 6     6 Zürich   M1                       0.01                    0.143\n 7     7 Zürich   M1                       0.01                    0.143\n 8     8 Zürich   M1                       0.01                    0.143\n 9     9 Zürich   M1                       0.01                    0.143\n10    10 Zürich   M1                       0.01                    0.143\n# ℹ 80 more rows\n# ℹ 7 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres1 <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres1$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 90 × 20\n      ID ID_Group ID_Topic Agents_Knowledge_Max Agents_Knowledge_Profile\n   <int> <chr>    <chr>                   <dbl>                    <dbl>\n 1     1 Zürich   M1                      0.787                    0.384\n 2     2 Zürich   M1                      0.784                    0.408\n 3     3 Zürich   M1                      0.805                    0.372\n 4     4 Zürich   M1                      0.785                    0.400\n 5     5 Zürich   M1                      0.785                    0.267\n 6     6 Zürich   M1                      0.806                    0.435\n 7     7 Zürich   M1                      0.796                    0.378\n 8     8 Zürich   M1                      0.803                    0.434\n 9     9 Zürich   M1                      0.794                    0.358\n10    10 Zürich   M1                      0.800                    0.396\n# ℹ 80 more rows\n# ℹ 15 more variables: Agents_p_MeetDay <dbl>, Agents_p_WorkDay <dbl>,\n#   Learnrate_Others <dbl>, Learnrate_Topic <dbl>, Knowledge_M1 <dbl>,\n#   Knowledge_M2 <dbl>, Knowledge_M3 <dbl>, Counter_Day <dbl>,\n#   Counter_Number_meet <dbl>, Counter_Time_learnd <dbl>,\n#   Counter_Time_meet <dbl>, Counter_Time_total <dbl>,\n#   Resources_Time_learnd <dbl>, Resources_Time_meet <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n### Visualization Results \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Topics(TL = res1$TL)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Knowledge(TL = res1$TL)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-44-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate(TL = res1$TL)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-44-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate(TL = res1$TL, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-44-4.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate(TL = res1$TL, Group = \"ID_Topic\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-44-5.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Number_meet(TL = res1$TL, TP = 20, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Time_invest(TL = res1$TL, TP = 20, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-45-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Learnrate_Timet(TL = res1$TL, TP = 20, Group = \"ID_Group\")\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-45-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplt_Knowledge_Time(TL = res1$TL, TP = 20)\n```\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-45-4.png){width=672}\n:::\n:::\n",
    "supporting": [
      "sketchbook05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}