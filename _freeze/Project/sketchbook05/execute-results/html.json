{
  "hash": "c38cdbe2a140e060387177de1a9037af",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Areas of Knowledge\"\nauthor: \"Hubert Baechli\"\n\nexecute: \n  cache: false\n---\n\n\n\n\n# Simulating random meetings (Areas of Knowledge)\n\nThe basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.\n\nIf it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.\n\nNow it seems to be time to add other aspects. At first it seems central that different areas of knowledge should be possible.\n\n# Definitions\n\nLoading some Packages for easier Data management and Presentation of Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# set.seed(1)\n```\n:::\n\n\n\n\n# Population\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnA = 10           # number of Agents\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Pop <- function(Pop = Pop,\n                       name = Parametername,\n                       Typ = \"\",\n                       add = 0,\n                       fac = 1,\n                       set = FALSE) {\n  if (Typ != \"\") {\n    name <- paste(name, Typ, sep = \"_\")\n  }\n  if (set == FALSE) {\n    if (name %in% colnames(Pop)) {\n      Pop <- Pop %>%\n        mutate( !!name := ( .data[[name]] + add ) * fac )\n    }\n  } else {\n    Pop <- Pop %>%\n      mutate( !!name := add * fac )\n  }\n  return(Pop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlonger_Pop <- function(Pop = Pop){\n  Pop_long <- Pop %>%\n  pivot_longer(cols = starts_with(\"Knowledge_\"),\n               names_to = \"Typ\",\n               names_prefix = \"Knowledge_\",  \n               values_to = \"Knowledge\" )\n  return(Pop_long)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwider_Pop <- function(Pop_long = Pop_long){\n  Pop <- Pop_long %>%\n    select(-starts_with(\"tmp_\")) %>%\n    pivot_wider(names_from = Typ,\n                values_from = Knowledge,\n                names_prefix = \"Knowledge_\" ) %>%\n  select(starts_with(\"ID\"),\n         starts_with(\"A_\"),\n         starts_with(\"Knowledge_\"),\n         starts_with(\"r_\"),\n         starts_with(\"c_\"),\n         everything())\n  return(Pop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Knowledge <- function(Pop = Pop){\n  Pop_long <- longer_Pop(Pop = Pop)\n  Pop_long <- Pop_long %>%\n    group_by(ID) %>%\n    mutate(tmp_Rank = rank(Knowledge, ties.method = \"random\"),\n           tmp_Rank = max(tmp_Rank) - tmp_Rank + 1,\n           tmp_Rank = 0.5 ^ tmp_Rank,\n           tmp_LR = Knowledge * tmp_Rank,\n           A_Knowledge = max(Knowledge),\n           A_LearnRate = max(sum(tmp_LR),1E-3),\n           A_Profile = min((A_LearnRate) / (A_Knowledge * sum(tmp_Rank)), 1),\n           A_Profile = (A_Profile - 0.5) * 2,\n           A_Knowledge = round(A_Knowledge, digits = 2)) %>%\n    ungroup() \n  Pop <- wider_Pop(Pop_long = Pop_long)\nreturn(Pop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_Topic <- function(Pop = Pop){\n  Pop_long <- longer_Pop(Pop = Pop)\n  Pop_long <- Pop_long %>%\n    group_by(ID) %>%\n    mutate(tmp_Rank = rank(Knowledge, ties.method = \"random\"),\n           tmp_Rank = max(tmp_Rank) - tmp_Rank + 1,\n           tmp_Rank = 0.5 ^ tmp_Rank,\n           A_Topic = Typ[which.max(tmp_Rank)]) %>%\n    ungroup() \n  Pop <- wider_Pop(Pop_long = Pop_long)\nreturn(Pop)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngen_Pop <- function(nA = NumberOfAgents,\n                    K = Knowledge,\n                    Typ = SpezKnowledge,\n                    pWD = percentsWorkingaDay,\n                    pMD = percentsMeetingsaDay){\n  ID <- seq_len(nA)\n  Pop <- tibble( ID = ID, \"A_Topic\" = \"\")\n  Pop <- update_Pop(Pop = Pop, name = \"A_Knowledge\", add = 0, set = TRUE)\n  Pop <- update_Pop(Pop = Pop, name = \"A_Profile\", add = 0, set = TRUE)\n  Pop <- update_Pop(Pop = Pop, name = \"A_LearnRate\", add = 0, set = TRUE)\n  Pop <- update_Pop(Pop = Pop, name = \"A_pWorkDay\", add = pWD, set = TRUE)\n  Pop <- update_Pop(Pop = Pop, name = \"A_pMeetDay\", add = pMD, set = TRUE)\n  if (length(Typ) > 0) {\n    for (i in seq_along(Typ)) {\n      Pop <- update_Pop(Pop = Pop, \n                        name = \"Knowledge\", \n                        Typ = Typ[[i]], \n                        add = K[[i]],\n                        set = TRUE)\n    }\n  }\n  Pop <- update_Knowledge(Pop = Pop)\n  Pop <- update_Topic(Pop = Pop)\n  return(Pop)\n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = 10, \n                K = list(0.2,0.2), \n                Typ = list(\"M0\", \"M1\"), \n                pWD = 1, \n                pMD = 0.8)\nPop <- gen_Pop( nA = 10, \n                K = list(0.1, 0.2, 0.0), \n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 1,\n                pMD = 0.8)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M2              0.2     0.429       0.125          1        0.8\n 2     2 M2              0.2     0.429       0.125          1        0.8\n 3     3 M2              0.2     0.429       0.125          1        0.8\n 4     4 M2              0.2     0.429       0.125          1        0.8\n 5     5 M2              0.2     0.429       0.125          1        0.8\n 6     6 M2              0.2     0.429       0.125          1        0.8\n 7     7 M2              0.2     0.429       0.125          1        0.8\n 8     8 M2              0.2     0.429       0.125          1        0.8\n 9     9 M2              0.2     0.429       0.125          1        0.8\n10    10 M2              0.2     0.429       0.125          1        0.8\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_Counter <- function(Pop = Pop,\n                         set = TRUE){\n  Pop <- update_Pop(Pop = Pop, name = \"c_time_meet\", add = 0, set = set)\n  Pop <- update_Pop(Pop = Pop, name = \"c_time_learn\", add = 0, set = set)\n  Pop <- update_Pop(Pop = Pop, name = \"c_n_meet\", add = 0, set = set)\n  return(Pop)\n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_Res <- function(Pop = Pop,\n                        time_day = hoursDay,\n                        set = TRUE){\n  Pop <- update_Pop(Pop = Pop, \n                    name = \"r_time_meet\", \n                    add = time_day * Pop[[\"A_pWorkDay\"]], \n                    fac = Pop[[\"A_pMeetDay\"]],\n                    set = set)\n  Pop <- update_Pop(Pop = Pop, \n                    name = \"r_time_learn\", \n                    add = time_day * Pop[[\"A_pWorkDay\"]], \n                    fac = 1 - (Pop[[\"A_pMeetDay\"]]) ,\n                    set = set)\n  return(Pop)\n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = 10, \n                K = list(0.01, 0.2), \n                Typ = list(\"M1\", \"M2\"), \n                pWD = 0.5,\n                pMD = 0.8)\nPop <- prep_Counter( Pop = Pop)\nPop <- prep_Res( Pop = Pop, time_day = 8)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 14\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M2              0.2     0.367       0.103        0.5        0.8\n 2     2 M2              0.2     0.367       0.103        0.5        0.8\n 3     3 M2              0.2     0.367       0.103        0.5        0.8\n 4     4 M2              0.2     0.367       0.103        0.5        0.8\n 5     5 M2              0.2     0.367       0.103        0.5        0.8\n 6     6 M2              0.2     0.367       0.103        0.5        0.8\n 7     7 M2              0.2     0.367       0.103        0.5        0.8\n 8     8 M2              0.2     0.367       0.103        0.5        0.8\n 9     9 M2              0.2     0.367       0.103        0.5        0.8\n10    10 M2              0.2     0.367       0.103        0.5        0.8\n# ℹ 7 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, r_time_meet <dbl>,\n#   r_time_learn <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# Data Management\n\nFunctions to select and reintegrate a Sub Populations\n\n### Select a Sub Population\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's\n\n2.  A vector wit ID's(IDs). If no vector is defined it needs a (n, witch is initialised by 2) for selecting random ID's\n\n3.  A value (n) if the selection should be random\n\n#### Hints\n\n-   If StudyTime isn't given the Population will be initialising with 0\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_SubPop <- function(Pop = Pop,\n                       IDs = NULL,\n                       n = 2) {\n  if (is.null(IDs)) {\n    IDs <- sample( Pop[[\"ID\"]], size=n )\n    }\n  SubPop <- list()\n  SubPop$sel <- Pop %>%\n    filter(ID %in% IDs) %>%\n    arrange(match(ID, IDs))\n  SubPop$rest <- Pop %>%\n    filter(!ID %in% IDs)\n  return(SubPop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  List with Sub Population (\\$sel) and the rest of the Population(\\$rest)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSubPop <- sel_SubPop( Pop = Pop )\nSubPop$sel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 14\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M2              0.2     0.367       0.103        0.5        0.8\n2     2 M2              0.2     0.367       0.103        0.5        0.8\n# ℹ 7 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, r_time_meet <dbl>,\n#   r_time_learn <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nSubPop$rest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 14\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     3 M2              0.2     0.367       0.103        0.5        0.8\n2     4 M2              0.2     0.367       0.103        0.5        0.8\n3     5 M2              0.2     0.367       0.103        0.5        0.8\n4     6 M2              0.2     0.367       0.103        0.5        0.8\n5     7 M2              0.2     0.367       0.103        0.5        0.8\n6     8 M2              0.2     0.367       0.103        0.5        0.8\n7     9 M2              0.2     0.367       0.103        0.5        0.8\n8    10 M2              0.2     0.367       0.103        0.5        0.8\n# ℹ 7 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, r_time_meet <dbl>,\n#   r_time_learn <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSubPop <- sel_SubPop( Pop = Pop , IDs = c(2, 1))\nSubPop$sel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 14\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     2 M2              0.2     0.367       0.103        0.5        0.8\n2     1 M2              0.2     0.367       0.103        0.5        0.8\n# ℹ 7 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, r_time_meet <dbl>,\n#   r_time_learn <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nSubPop$rest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 14\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     3 M2              0.2     0.367       0.103        0.5        0.8\n2     4 M2              0.2     0.367       0.103        0.5        0.8\n3     5 M2              0.2     0.367       0.103        0.5        0.8\n4     6 M2              0.2     0.367       0.103        0.5        0.8\n5     7 M2              0.2     0.367       0.103        0.5        0.8\n6     8 M2              0.2     0.367       0.103        0.5        0.8\n7     9 M2              0.2     0.367       0.103        0.5        0.8\n8    10 M2              0.2     0.367       0.103        0.5        0.8\n# ℹ 7 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, r_time_meet <dbl>,\n#   r_time_learn <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n### Integrate Sub Population\n\n#### Needs\n\n1.  A Sub Population (SubPop) with Agents defined by ID's which are also defined in Population\n\n2.  A Population (Pop) with several Agents defined by ID's\n\n#### Hints\n\n-   SubPop and Pop has to have the same cols\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nint_SubPop <- function(SubPop = SubPop,\n                       Pop = Pop) {\n  col_sort <- colnames(Pop)\n  SubPop <- SubPop[, col_sort]\n  IDs <- SubPop[[\"ID\"]]\n  Pop[Pop$ID %in% IDs,] <- SubPop\n  Pop <- Pop %>%\n    arrange(ID)\n  return(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with the defined StudyTime\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 14\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M2              0.2     0.367       0.103        0.5        0.8\n 2     2 M2              0.2     0.367       0.103        0.5        0.8\n 3     3 M2              0.2     0.367       0.103        0.5        0.8\n 4     4 M2              0.2     0.367       0.103        0.5        0.8\n 5     5 M2              0.2     0.367       0.103        0.5        0.8\n 6     6 M2              0.2     0.367       0.103        0.5        0.8\n 7     7 M2              0.2     0.367       0.103        0.5        0.8\n 8     8 M2              0.2     0.367       0.103        0.5        0.8\n 9     9 M2              0.2     0.367       0.103        0.5        0.8\n10    10 M2              0.2     0.367       0.103        0.5        0.8\n# ℹ 7 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, r_time_meet <dbl>,\n#   r_time_learn <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nSubPop <- sel_SubPop(Pop = Pop, n = 2 )$sel\nSubPop <- update_Pop(Pop = SubPop,\n                     name = \"Knowledge\",\n                     Typ = \"M2\",\n                     add = 0,\n                     set = TRUE)\nPop <- int_SubPop(SubPop = SubPop, Pop = Pop)\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 14\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.01     0.333       0.005        0.5        0.8\n 2     2 M2             0.2      0.367       0.103        0.5        0.8\n 3     3 M2             0.2      0.367       0.103        0.5        0.8\n 4     4 M2             0.2      0.367       0.103        0.5        0.8\n 5     5 M2             0.2      0.367       0.103        0.5        0.8\n 6     6 M2             0.2      0.367       0.103        0.5        0.8\n 7     7 M1             0.01     0.333       0.005        0.5        0.8\n 8     8 M2             0.2      0.367       0.103        0.5        0.8\n 9     9 M2             0.2      0.367       0.103        0.5        0.8\n10    10 M2             0.2      0.367       0.103        0.5        0.8\n# ℹ 7 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   r_time_meet <dbl>, r_time_learn <dbl>, c_time_meet <dbl>,\n#   c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Timelines\n\nsaving Timelines during Simulations\n\n### Get Agents-Timelines\n\n#### Needs\n\n1.  A container name for the Timeline\n\n2.  A value for the Time\n\n3.  A Population (Pop) with several Agents defined by ID's\n\n4.  A colname from the Population which should followed ver Time\n\n5.  optional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_Timeline <- function(TL = Timeline,\n                         Time = 0,\n                         Pop = Pop) {\n  TLadd <- Pop %>%\n    mutate(Time = Time) %>%\n    select(starts_with(\"ID\"),\n           starts_with(\"Time\"),\n           starts_with(\"A_Knowledge\"),\n           starts_with(\"Knowledge_\"))\n  if (Time == 0) {\n    TL <- TLadd\n  } else {\n    TL <- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  A Timeline in a long format\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTimeline <- get_Timeline(TL = Timeline,\n                         Time = 0,\n                         Pop = Pop)\nTimeline <- get_Timeline(TL = Timeline,\n                         Time = 1,\n                         Pop = Pop)\nTimeline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 5\n      ID  Time A_Knowledge Knowledge_M1 Knowledge_M2\n   <int> <dbl>       <dbl>        <dbl>        <dbl>\n 1     1     0        0.01         0.01          0  \n 2     2     0        0.2          0.01          0.2\n 3     3     0        0.2          0.01          0.2\n 4     4     0        0.2          0.01          0.2\n 5     5     0        0.2          0.01          0.2\n 6     6     0        0.2          0.01          0.2\n 7     7     0        0.01         0.01          0  \n 8     8     0        0.2          0.01          0.2\n 9     9     0        0.2          0.01          0.2\n10    10     0        0.2          0.01          0.2\n11     1     1        0.01         0.01          0  \n12     2     1        0.2          0.01          0.2\n13     3     1        0.2          0.01          0.2\n14     4     1        0.2          0.01          0.2\n15     5     1        0.2          0.01          0.2\n16     6     1        0.2          0.01          0.2\n17     7     1        0.01         0.01          0  \n18     8     1        0.2          0.01          0.2\n19     9     1        0.2          0.01          0.2\n20    10     1        0.2          0.01          0.2\n```\n\n\n:::\n:::\n\n\n\n\n# **Learning**\n\nLearning with a exponential lern rate\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's and Knowledge\n\n2.  optional for future implementations a name (Typ) for the specific Knowledge\n\n3.  A value for the learn rate (LR). could be a scalar or e vector with the same length as the Population\n\n4.  A value for the study time (ST). could be a scalar or e vector with the same length as the Population\n\n#### Hints\n\n-   If learn rate isn't given the values from the Population will be used, if this is missing in the Population 0 is used.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearn <- function(Pop = Pop,\n                  con = TRUE) {\n  if (con == TRUE){\n    Pop <- Pop %>%\n      mutate(r_time_learn = r_time_learn + r_time_meet,\n             r_time_meet = 0)\n    Pop <- update_Knowledge(Pop = Pop)\n    Pop <- update_Topic(Pop = Pop)\n  } \n  \n  Pop_long <- longer_Pop(Pop = Pop)\n  Pop_long <- Pop_long %>%\n    group_by(ID) %>%\n    mutate(r_time_learn = ifelse(Typ == A_Topic, r_time_learn, 0)) %>%\n    mutate(tmp_LearnRate = A_LearnRate,\n           tmp_Time0 = ( 1 - Knowledge )^( 1 / -tmp_LearnRate ),\n           Knowledge = 1 - ( tmp_Time0 + r_time_learn )^( -tmp_LearnRate )) %>%\n    mutate(c_time_learn = c_time_learn + sum(r_time_learn),\n           r_time_learn = 0) %>%\n    ungroup()\n  Pop <- wider_Pop(Pop_long = Pop_long)\nreturn(Pop)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with updated Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = 5, \n                K = list(c(0.8, 0.3, 0, 0 ,0), \n                         c(0.0, 0.4, 0.7, 0 ,0), \n                         c(0.0, 0.4, 0.7, 0 ,0)), \n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 1.0,\n                pMD = 0.8)\n\nPop <- prep_Counter( Pop = Pop)\nPop <- prep_Res( Pop = Pop, time_day = 8)\nPop <- learn(Pop = Pop, con = FALSE)\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n3     3 M3             0.72     0.696       0.536          1        0.8\n4     4 M2             0        1           0.001          1        0.8\n5     5 M3             0        1           0.001          1        0.8\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Slots\n\nFunctions to select and sets learning slots from a Population\n\n### Select a random Slot of pairs\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's\n\n2.  A size of the Slot in percents of the population\n\n#### Hints\n\n-   because it leads to trouble will selecting otherwise the calculated n is limited at the moment between 1 and half of the Population\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_Pairs_rnd <- function(Pop = Pop,\n                          psize = percentsOfPop) {   \n  sID <- \"tmp_ID\"\n  psize <- min(psize, 1)\n  nR <- nrow(Pop)\n  n <- round(nR * psize * 0.49, 0)\n  n <- max(n, 1)\n  \n  SubPop <- sel_SubPop( Pop = Pop, n = n)   \n  Slot1 <- SubPop$sel %>%     \n    mutate(!!sID := seq_len(n))\n  if (nrow(SubPop$rest) == n) {\n    Slot2 <- SubPop$rest\n  } else {\n    SubPop <- sel_SubPop( Pop = SubPop$rest, n = n) \n    Slot2 <- SubPop$sel\n  }\n  Slot2 <- Slot2 %>%     \n    mutate(!!sID := seq_len(n))\n  Pairs <- bind_rows(Slot1, Slot2)\n  return(Pairs)  \n  }  \n```\n:::\n\n\n\n\n#### Output\n\n1.  A random Slot-Population with Slot ID's which marks the pairs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n3     3 M3             0.72     0.696       0.536          1        0.8\n4     4 M2             0        1           0.001          1        0.8\n5     5 M3             0        1           0.001          1        0.8\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPairs <- sel_Pairs_rnd(Pop = Pop, psize = 0.5)\nPairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 16\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 9 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, tmp_ID <int>\n```\n\n\n:::\n\n```{.r .cell-code}\nPairs <- sel_Pairs_rnd(Pop = Pairs, psize = 1)\nPairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 16\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 9 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, tmp_ID <int>\n```\n\n\n:::\n:::\n\n\n\n\n### **Learning by Pairs**\n\nLearning with a exponential learn rate defined by pairs\n\n#### Needs\n\n1.  A Slot-Population with several paired Agents defined by Slot-ID's. Prepaerd by the function set_SlotPar()\n\n2.  optional for future implementations a name (Typ) for the specific Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearn_Pairs <- function(Pairs = Pairs,\n                        time_meet = time_meet) {\n  Pop_long <- longer_Pop(Pop = Pairs)\n  Pop_long <- Pop_long %>%\n  group_by(tmp_ID) %>%\n    mutate(tmp_LearnRate = mean(A_LearnRate),\n           tmp_facT = ifelse(Typ == A_Topic, 1, 0)) %>%\n  group_by(tmp_ID, Typ) %>%\n    mutate(tmp_facT = mean(tmp_facT )) %>%\n  group_by(ID) %>%\n    mutate(tmp_time_learn = tmp_facT * time_meet,\n           tmp_Time0 = ( 1 - Knowledge )^( 1 / -tmp_LearnRate ),\n           Knowledge = 1 - ( tmp_Time0 + tmp_time_learn)^( -tmp_LearnRate )) %>%\n    ungroup()\n  \n  Pairs <- wider_Pop(Pop_long = Pop_long)\n  Pairs <- Pairs %>%\n    mutate(c_n_meet = c_n_meet + 1,\n           c_time_meet = c_time_meet + time_meet,\n           r_time_meet = r_time_meet - time_meet) \n  return(Pairs)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Slot-Population with updated Knowledge\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 16\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 9 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>, tmp_ID <int>\n```\n\n\n:::\n\n```{.r .cell-code}\nPairs <- learn_Pairs(Pairs = Pairs, time_meet = 0.75)\nPairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPop <- int_SubPop(SubPop = Pairs, Pop = Pop)\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.225       0.430          1        0.8\n2     2 M2             0.47     0.829       0.379          1        0.8\n3     3 M3             0.72     0.696       0.536          1        0.8\n4     4 M2             0        1           0.001          1        0.8\n5     5 M3             0        1           0.001          1        0.8\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## L**earning by** Days\n\nLearning by Days with a exponential learn rate defined by pairs according learning by Slots\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's and Knowledge\n\n2.  optional for future implementations a name (Typ) for the specific Knowledge\n\n3.  A percentage of Daytime which each agents stays in meetings (mean-value). has to be a scalar.\n\n4.  A amount of hours for the day, is set to 8\n\n5.  A duration for the meetings in hours, is set to 1\n\n#### Hints\n\n-   The learn rate is fixed during the Day and updated at the end of the Day\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearn_Day <- function(Pop = Pop,\n                      time_day = time_day,\n                      time_meet = time_meet) { \nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nif (!any(startsWith(names(Pop), \"c_\"))) {\n  Pop <- prep_Counter( Pop = Pop)\n  Pop <- prep_Res( Pop = Pop, time_day = time_day, set = TRUE)\n}\nPop <- prep_Res( Pop = Pop, time_day = time_day)\n\nnR_Pop <- nrow(Pop)\npsize <- mean(Pop[[\"A_pMeetDay\"]])\niD <- round(time_day / time_meet, digits = 0)\n\nfor(i in 1:iD) {\n  ParBreak <- Pop %>%\n    select(r_time_meet) %>%\n    mutate(r_time_meet = ifelse(r_time_meet >= time_meet, 1, 0))\n  \n  if (sum(ParBreak$r_time_meet) < 2) { break }\n   \n  Pop_Res <- Pop[Pop$r_time_meet >= time_meet, ]\n  nR_Pop_Res <- nrow(Pop_Res)\n  \n  psize_i <- psize / nR_Pop_Res * nR_Pop\n  \n  Pairs <- sel_Pairs_rnd(Pop = Pop_Res, psize = psize_i)\n  Pairs <- learn_Pairs(Pairs = Pairs, time_meet = time_meet)\n  \n  Pop <- int_SubPop(SubPop = Pairs, Pop = Pop)\n} \nPop <- learn(Pop = Pop, con = TRUE)\nreturn(Pop) \n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  Population with updated Knowledge, learn rate and study time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = 5, \n                K = list(c(0.8, 0.3, 0, 0 ,0), \n                         c(0.0, 0.4, 0.7, 0 ,0), \n                         c(0.0, 0.4, 0.7, 0 ,0)), \n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.5)\n\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1              0.8     0.143       0.4          0.8        0.5\n2     2 M2              0.4     0.929       0.338        0.8        0.5\n3     3 M2              0.7     0.714       0.525        0.8        0.5\n4     4 M1              0       1           0.001        0.8        0.5\n5     5 M1              0       1           0.001        0.8        0.5\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nPop <- learn_Day(Pop = Pop, time_day = 8, time_meet = 0.75)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n1     1 M1             0.8      0.324      0.464         0.8        0.5\n2     2 M3             0.47     0.902      0.389         0.8        0.5\n3     3 M2             0.71     0.766      0.548         0.8        0.5\n4     4 M3             0.05     0.716      0.0394        0.8        0.5\n5     5 M2             0.19     0.459      0.123         0.8        0.5\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## **Plots**\n\n### Plot Timeline\n\n#### Needs\n\n1.  A Timeline from get_Timeline\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplt_Timeline <- function(TL) {\n  Knowledges <- names(TL)[startsWith(names(TL), \"Knowledge_\")]\n  TL <- TL %>%\n    group_by(Time) %>%\n    mutate(mean_A_Knowledge = mean(A_Knowledge, na.rm = TRUE)) %>%\n    mutate(across(all_of(Knowledges),\n                  ~ mean(.x, na.rm = TRUE),\n                  .names = \"mean_{.col}\")) %>%\n    ungroup()\n\n  p <- ggplot(data = TL, aes(x = Time)) +\n    geom_line(aes(y = A_Knowledge, group = ID, color = \"Agents\"),\n              alpha = 0.5, linetype = \"solid\") +\n    geom_line(aes(y = mean_A_Knowledge, color = \"Knowledge\"), linetype = \"solid\") +\n    ggtitle(\"Timeline\") +\n    xlab(\"Number of Days\") +\n    ylab(\"Knowledge\") +\n    scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +\n    theme_light() +\n    theme(\n      legend.title = element_blank(),\n      legend.position = \"top\",\n      legend.justification = \"left\"\n    )\n  \n  colors <- setNames(rainbow(length(Knowledges)), Knowledges)\n\n  for (var in Knowledges) {\n    mean_var <- paste0(\"mean_\", var)\n    p <- p + geom_line(aes_string(y = mean_var, color = shQuote(var)), \n                       linetype = \"solid\")\n    p <- p + scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Knowledge\" = \"black\", colors),\n    labels = c(\"Agents\" = \"Agents\", \"Knowledge\" = \"A_Knowledge\", Knowledges))\n    }\n\n  return(p)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  ggplot2\n\n# **Simulation**\n\nA learning process with updated learn rate by current knowledge when Agents meet randomly by Days\n\n#### Needs\n\n1.  A Population (Pop) with several Agents defined by ID's and Knowledge\n\n2.  optional for future implementations a name (Typ) for the specific Knowledge\n\n3.  A number of Days (nD)\n\n4.  A percentage of Daytime which each agents stays in meetings (mean-value). has to be a scalar.\n\n5.  A amount of hours for the day, is set to 8\n\n6.  A duration for the meetings in hours, is set to 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_Days <- function(Pop = Pop,\n                     nD = nubmberDay,\n                     time_day = 8,\n                     time_meet = 0.75) {\n  Pop <- update_Knowledge(Pop = Pop)\n  Pop <- update_Topic(Pop = Pop)\n  Pop <- prep_Counter( Pop = Pop)\n  Pop <- prep_Res( Pop = Pop, time_day = time_day)\n  TL <- get_Timeline(TL = TL,\n                     Time = 0,\n                     Pop = Pop)\n  for(i in 1:nD) {\n    Pop <- learn_Day(Pop = Pop,\n                     time_day = time_day,\n                     time_meet = time_meet)\n    TL <- get_Timeline(TL = TL,\n                       Time = i,\n                       Pop = Pop)\n  }\n    \n  Output <- list( Pop = Pop,\n                  TL = TL)\n  return(Output)\n}\n```\n:::\n\n\n\n\n#### Output\n\n1.  A List with the new Population and a Timeline over the number of Days\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnA <- 50                          # number of Agents\n\nPop <- gen_Pop( nA = nA, \n                K = list(0.0, 0.0, 0.0),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M2                0         1       0.001        0.8        0.8\n 2     2 M3                0         1       0.001        0.8        0.8\n 3     3 M3                0         1       0.001        0.8        0.8\n 4     4 M3                0         1       0.001        0.8        0.8\n 5     5 M1                0         1       0.001        0.8        0.8\n 6     6 M3                0         1       0.001        0.8        0.8\n 7     7 M3                0         1       0.001        0.8        0.8\n 8     8 M2                0         1       0.001        0.8        0.8\n 9     9 M2                0         1       0.001        0.8        0.8\n10    10 M2                0         1       0.001        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M3             0.82     0.787       0.643        0.8        0.8\n 2     2 M1             0.82     0.792       0.639        0.8        0.8\n 3     3 M1             0.82     0.742       0.626        0.8        0.8\n 4     4 M2             0.82     0.711       0.615        0.8        0.8\n 5     5 M1             0.82     0.742       0.627        0.8        0.8\n 6     6 M1             0.82     0.760       0.635        0.8        0.8\n 7     7 M3             0.82     0.804       0.646        0.8        0.8\n 8     8 M2             0.82     0.753       0.631        0.8        0.8\n 9     9 M2             0.82     0.771       0.634        0.8        0.8\n10    10 M1             0.83     0.732       0.625        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nplt_Timeline(TL = res$TL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n## ... Special Cases\n\n### Only one Agent with Knowledge (0.8)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = nA, \n                K = list(0.0, 0.0, 0.0),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] <- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] <- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] <- 0.8\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1              0.8     0.143       0.4          0.8        0.8\n 2     2 M2              0       1           0.001        0.8        0.8\n 3     3 M3              0       1           0.001        0.8        0.8\n 4     4 M3              0       1           0.001        0.8        0.8\n 5     5 M2              0       1           0.001        0.8        0.8\n 6     6 M1              0       1           0.001        0.8        0.8\n 7     7 M2              0       1           0.001        0.8        0.8\n 8     8 M1              0       1           0.001        0.8        0.8\n 9     9 M2              0       1           0.001        0.8        0.8\n10    10 M1              0       1           0.001        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.95     0.863       0.773        0.8        0.8\n 2     2 M1             0.93     0.873       0.760        0.8        0.8\n 3     3 M3             0.93     0.847       0.752        0.8        0.8\n 4     4 M1             0.93     0.859       0.756        0.8        0.8\n 5     5 M3             0.93     0.799       0.730        0.8        0.8\n 6     6 M3             0.93     0.829       0.745        0.8        0.8\n 7     7 M1             0.93     0.876       0.760        0.8        0.8\n 8     8 M2             0.92     0.895       0.767        0.8        0.8\n 9     9 M1             0.93     0.855       0.756        0.8        0.8\n10    10 M1             0.93     0.854       0.753        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nplt_Timeline(res$TL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = nA, \n                K = list(0.02, 0.01, 0.0),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] <- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] <- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] <- 0.8\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.8      0.150      0.402         0.8        0.8\n 2     2 M1             0.02     0.429      0.0125        0.8        0.8\n 3     3 M1             0.02     0.429      0.0125        0.8        0.8\n 4     4 M1             0.02     0.429      0.0125        0.8        0.8\n 5     5 M1             0.02     0.429      0.0125        0.8        0.8\n 6     6 M1             0.02     0.429      0.0125        0.8        0.8\n 7     7 M1             0.02     0.429      0.0125        0.8        0.8\n 8     8 M1             0.02     0.429      0.0125        0.8        0.8\n 9     9 M1             0.02     0.429      0.0125        0.8        0.8\n10    10 M1             0.02     0.429      0.0125        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.86     0.149       0.433        0.8        0.8\n 2     2 M1             0.76     0.150       0.385        0.8        0.8\n 3     3 M1             0.76     0.150       0.384        0.8        0.8\n 4     4 M1             0.76     0.150       0.384        0.8        0.8\n 5     5 M1             0.77     0.150       0.388        0.8        0.8\n 6     6 M1             0.76     0.150       0.383        0.8        0.8\n 7     7 M1             0.76     0.150       0.382        0.8        0.8\n 8     8 M1             0.76     0.150       0.385        0.8        0.8\n 9     9 M1             0.76     0.150       0.384        0.8        0.8\n10    10 M1             0.76     0.150       0.381        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nplt_Timeline(res$TL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = nA, \n                K = list(0.01, 0.02, 0.0),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] <- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] <- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] <- 0.8\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.8      0.157      0.405         0.8        0.8\n 2     2 M2             0.02     0.429      0.0125        0.8        0.8\n 3     3 M2             0.02     0.429      0.0125        0.8        0.8\n 4     4 M2             0.02     0.429      0.0125        0.8        0.8\n 5     5 M2             0.02     0.429      0.0125        0.8        0.8\n 6     6 M2             0.02     0.429      0.0125        0.8        0.8\n 7     7 M2             0.02     0.429      0.0125        0.8        0.8\n 8     8 M2             0.02     0.429      0.0125        0.8        0.8\n 9     9 M2             0.02     0.429      0.0125        0.8        0.8\n10    10 M2             0.02     0.429      0.0125        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.92     0.664       0.668        0.8        0.8\n 2     2 M2             0.8      0.150       0.403        0.8        0.8\n 3     3 M2             0.82     0.220       0.436        0.8        0.8\n 4     4 M2             0.82     0.323       0.473        0.8        0.8\n 5     5 M2             0.83     0.262       0.459        0.8        0.8\n 6     6 M2             0.83     0.447       0.525        0.8        0.8\n 7     7 M2             0.84     0.340       0.491        0.8        0.8\n 8     8 M2             0.85     0.416       0.526        0.8        0.8\n 9     9 M2             0.83     0.366       0.494        0.8        0.8\n10    10 M2             0.84     0.329       0.491        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nplt_Timeline(res$TL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = nA, \n                K = list(0.0, 0.0, 0.01),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] <- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] <- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] <- 0.8\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.8      0.150       0.402        0.8        0.8\n 2     2 M3             0.01     0.143       0.005        0.8        0.8\n 3     3 M3             0.01     0.143       0.005        0.8        0.8\n 4     4 M3             0.01     0.143       0.005        0.8        0.8\n 5     5 M3             0.01     0.143       0.005        0.8        0.8\n 6     6 M3             0.01     0.143       0.005        0.8        0.8\n 7     7 M3             0.01     0.143       0.005        0.8        0.8\n 8     8 M3             0.01     0.143       0.005        0.8        0.8\n 9     9 M3             0.01     0.143       0.005        0.8        0.8\n10    10 M3             0.01     0.143       0.005        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M1             0.92     0.659       0.665        0.8        0.8\n 2     2 M3             0.82     0.255       0.452        0.8        0.8\n 3     3 M3             0.81     0.227       0.436        0.8        0.8\n 4     4 M3             0.82     0.282       0.459        0.8        0.8\n 5     5 M3             0.79     0.328       0.461        0.8        0.8\n 6     6 M3             0.82     0.290       0.464        0.8        0.8\n 7     7 M3             0.83     0.423       0.519        0.8        0.8\n 8     8 M3             0.85     0.352       0.500        0.8        0.8\n 9     9 M3             0.81     0.199       0.427        0.8        0.8\n10    10 M3             0.82     0.265       0.455        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nplt_Timeline(res$TL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPop <- gen_Pop( nA = nA, \n                K = list(0.0, 0.0, 0.01),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\n#Pop[Pop$ID == 1, \"Knowledge_M1\"] <- 0.8\nPop[Pop$ID == 2, \"Knowledge_M2\"] <- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] <- 0.8\nPop <- update_Knowledge(Pop = Pop)\nPop <- update_Topic(Pop = Pop)\nPop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M3             0.01     0.143       0.005        0.8        0.8\n 2     2 M2             0.8      0.150       0.402        0.8        0.8\n 3     3 M3             0.01     0.143       0.005        0.8        0.8\n 4     4 M3             0.01     0.143       0.005        0.8        0.8\n 5     5 M3             0.01     0.143       0.005        0.8        0.8\n 6     6 M3             0.01     0.143       0.005        0.8        0.8\n 7     7 M3             0.01     0.143       0.005        0.8        0.8\n 8     8 M3             0.01     0.143       0.005        0.8        0.8\n 9     9 M3             0.01     0.143       0.005        0.8        0.8\n10    10 M3             0.01     0.143       0.005        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   <int> <chr>         <dbl>     <dbl>       <dbl>      <dbl>      <dbl>\n 1     1 M3             0.81     0.214       0.430        0.8        0.8\n 2     2 M2             0.92     0.660       0.665        0.8        0.8\n 3     3 M3             0.83     0.306       0.472        0.8        0.8\n 4     4 M3             0.83     0.336       0.487        0.8        0.8\n 5     5 M3             0.84     0.356       0.500        0.8        0.8\n 6     6 M3             0.81     0.235       0.437        0.8        0.8\n 7     7 M3             0.83     0.381       0.504        0.8        0.8\n 8     8 M3             0.82     0.310       0.468        0.8        0.8\n 9     9 M3             0.81     0.351       0.479        0.8        0.8\n10    10 M3             0.83     0.341       0.486        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 <dbl>, Knowledge_M2 <dbl>,\n#   Knowledge_M3 <dbl>, r_time_meet <dbl>, r_time_learn <dbl>,\n#   c_time_meet <dbl>, c_time_learn <dbl>, c_n_meet <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nplt_Timeline(res$TL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](sketchbook05_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "sketchbook05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}