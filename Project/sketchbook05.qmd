---
title: "in a Day Structure"
author: "Hubert Baechli"

execute: 
  cache: false
---

# Simulating random meetings (in a Day Structure)

The basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.

If it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.

# Definitions

Loading some Packages for easier Data management and Presentation of Results

```{r}
library(tidyverse)  
# set.seed(1)
```

# Population

```{r}
nA = 10           # number of Agents
```

```{r}
update_Pop <- function(Pop = Pop,
                       name = Parametername,
                       Typ = "",
                       add = 0,
                       fac = 1,
                       set = FALSE) {
  if (Typ != "") {
    name <- paste(name, Typ, sep = "_")
  }
  if (set == FALSE) {
    if (name %in% colnames(Pop)) {
      Pop <- Pop %>%
        mutate( !!name := ( .data[[name]] + add ) * fac )
    }
  } else {
    Pop <- Pop %>%
      mutate( !!name := add * fac )
  }
  return(Pop)
}
```

```{r}
longer_Pop <- function(Pop = Pop){
  Pop_long <- Pop %>%
  pivot_longer(cols = starts_with("Knowledge_"),
               names_to = "Typ",
               names_prefix = "Knowledge_",  
               values_to = "Knowledge" )
  return(Pop_long)
}
```

```{r}
wider_Pop <- function(Pop_long = Pop_long){
  Pop <- Pop_long %>%
    select(-starts_with("tmp_")) %>%
    pivot_wider(names_from = Typ,
                values_from = Knowledge,
                names_prefix = "Knowledge_" ) %>%
  select(starts_with("ID"),
         starts_with("A_"),
         starts_with("Knowledge_"),
         starts_with("r_"),
         starts_with("c_"),
         everything())
  return(Pop)
}
```

```{r}
update_Knowledge <- function(Pop = Pop){
  Pop_long <- longer_Pop(Pop = Pop)
  Pop_long <- Pop_long %>%
    group_by(ID) %>%
    mutate(tmp_Rank = rank(Knowledge, ties.method = "random"),
           tmp_Rank = max(tmp_Rank) - tmp_Rank + 1,
           tmp_Rank = 0.5 ^ tmp_Rank,
           tmp_LR = Knowledge * tmp_Rank,
           A_Knowledge = max(Knowledge),
           A_LearnRate = max(sum(tmp_LR),1E-3),
           A_Profile = min((A_LearnRate) / (A_Knowledge * sum(tmp_Rank)), 1),
           A_Profile = (A_Profile - 0.5) * 2,
           A_Knowledge = round(A_Knowledge, digits = 2)) %>%
    ungroup() 
  Pop <- wider_Pop(Pop_long = Pop_long)
return(Pop)
}
```

```{r}
update_Topic <- function(Pop = Pop){
  Pop_long <- longer_Pop(Pop = Pop)
  Pop_long <- Pop_long %>%
    group_by(ID) %>%
    mutate(tmp_Rank = rank(Knowledge, ties.method = "random"),
           tmp_Rank = max(tmp_Rank) - tmp_Rank + 1,
           tmp_Rank = 0.5 ^ tmp_Rank,
           A_Topic = Typ[which.max(tmp_Rank)]) %>%
    ungroup() 
  Pop <- wider_Pop(Pop_long = Pop_long)
return(Pop)
}
```

```{r}
gen_Pop <- function(nA = NumberOfAgents,
                    K = Knowledge,
                    Typ = SpezKnowledge,
                    pMD = percentsMeetingsaDay){
  ID <- seq_len(nA)
  Pop <- tibble( ID = ID, "A_Topic" = "")
  Pop <- update_Pop(Pop = Pop, name = "A_Knowledge", add = 0, set = TRUE)
  Pop <- update_Pop(Pop = Pop, name = "A_Profile", add = 0, set = TRUE)
  Pop <- update_Pop(Pop = Pop, name = "A_LearnRate", add = 0, set = TRUE)
  Pop <- update_Pop(Pop = Pop, name = "A_pMeetDay", add = pMD, set = TRUE)
  if (length(Typ) > 0) {
    for (i in seq_along(Typ)) {
      Pop <- update_Pop(Pop = Pop, 
                        name = "Knowledge", 
                        Typ = Typ[[i]], 
                        add = K[[i]],
                        set = TRUE)
    }
  }
  Pop <- update_Knowledge(Pop = Pop)
  Pop <- update_Topic(Pop = Pop)
  return(Pop)
  }

```

```{r}
Pop <- gen_Pop( nA = 10, K = list(0.2,0.2), Typ = list("M0", "M1"), pMD = 0.8)
Pop <- gen_Pop( nA = 10, 
                K = list(0.1, 0.2, 0.0), 
                Typ = list("M1", "M2", "M3"), 
                pMD = 0.8)
Pop
```

```{r}
prep_Counter <- function(Pop = Pop,
                         set = TRUE){
  Pop <- update_Pop(Pop = Pop, name = "c_time_meet", add = 0, set = set)
  Pop <- update_Pop(Pop = Pop, name = "c_time_learn", add = 0, set = set)
  Pop <- update_Pop(Pop = Pop, name = "c_n_meet", add = 0, set = set)
  return(Pop)
  }
```

```{r}
prep_DayRes <- function(Pop = Pop,
                        tD = hoursDay,
                        set = TRUE){
  Pop <- update_Pop(Pop = Pop, name = "r_time_meetDay", 
                    add = tD, 
                    fac = Pop[["A_pMeetDay"]],
                    set = set)
  Pop <- update_Pop(Pop = Pop, name = "r_time_learnDay", 
                    add = tD, 
                    fac = 1 - Pop[["A_pMeetDay"]],
                    set = set)
  return(Pop)
  }
```

```{r}
Pop <- gen_Pop( nA = 10, 
                K = list(0.01, 0.2), 
                Typ = list("M1", "M2"), 
                pMD = 0.8)
Pop <- prep_Counter( Pop = Pop)
Pop <- prep_DayRes( Pop = Pop, tD = 8)
Pop
```

# Data Management

Functions to select and reintegrate a Sub Populations

### Select a Sub Population

#### Needs

1.  A Population (Pop) with several Agents defined by ID's

2.  A vector wit ID's(IDs). If no vector is defined it needs a (n, witch is initialised by 2) for selecting random ID's

3.  A value (n) if the selection should be random

#### Hints

-   If StudyTime isn't given the Population will be initialising with 0

```{r}
sel_SubPop <- function(Pop = Pop,
                       IDs = NULL,
                       n = 2) {
  if (is.null(IDs)) {
    IDs <- sample( Pop[["ID"]], size=n )
    }
  SubPop <- list()
  SubPop$sel <- Pop %>%
    filter(ID %in% IDs) %>%
    arrange(match(ID, IDs))
  SubPop$rest <- Pop %>%
    filter(!ID %in% IDs)
  return(SubPop)
}
```

#### Output

1.  List with Sub Population (\$sel) and the rest of the Population(\$rest)

```{r}
SubPop <- sel_SubPop( Pop = Pop )
SubPop$sel
SubPop$rest
```

```{r}
SubPop <- sel_SubPop( Pop = Pop , IDs = c(2, 1))
SubPop$sel
SubPop$rest
```

### Integrate Sub Population

#### Needs

1.  A Sub Population (SubPop) with Agents defined by ID's which are also defined in Population

2.  A Population (Pop) with several Agents defined by ID's

#### Hints

-   SubPop and Pop has to have the same cols

```{r}
int_SubPop <- function(SubPop = SubPop,
                       Pop = Pop) {
  col_sort <- colnames(Pop)
  SubPop <- SubPop[, col_sort]
  IDs <- SubPop[["ID"]]
  Pop[Pop$ID %in% IDs,] <- SubPop
  Pop <- Pop %>%
    arrange(ID)
  return(Pop)
}
```

#### Output

1.  Population with the defined StudyTime

```{r}
Pop
SubPop <- sel_SubPop(Pop = Pop, n = 2 )$sel
SubPop <- update_Pop(Pop = SubPop,
                     name = "Knowledge",
                     Typ = "M2",
                     add = 0,
                     set = TRUE)
Pop <- int_SubPop(SubPop = SubPop, Pop = Pop)
Pop <- update_Knowledge(Pop = Pop)
Pop <- update_Topic(Pop = Pop)
Pop
```

## Timelines

saving Timelines during Simulations

### Get Agents-Timelines

#### Needs

1.  A container name for the Timeline

2.  A value for the Time

3.  A Population (Pop) with several Agents defined by ID's

4.  A colname from the Population which should followed ver Time

5.  optional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time

```{r}

get_Timeline <- function(TL = Timeline,
                          Time = 0,
                          Pop = Pop,
                          Info = name,
                          Sum = 0) {
  TLadd <- tibble( ID = Pop[["ID"]],
                   Time = Time,
                   !!Info := Pop[[Info]])
  if (Sum == 1) {
    Sumname1 <- paste(Info,"mean", sep = "_")
    Sumname2 <- paste(Info,"median", sep = "_")
    TLadd <- TLadd %>%
        mutate(!!Sumname1 := mean(Pop[[Info]], na.rm = TRUE),
               !!Sumname2 := median(Pop[[Info]], na.rm = TRUE))
    }
  if (Time == 0) {
    TL <- TLadd
  } else {
    TL <- bind_rows(TL, TLadd)
  }
  return(TL) 
}
```

#### Output

1.  A Timeline in a long format

```{r}
Timeline <- get_Timeline( TL = Timeline, 
                           Time = 0, 
                           Pop = Pop, 
                           Info = "Knowledge", 
                           Sum = 1)
Timeline <- get_Timeline( TL = Timeline, 
                           Time = 1, 
                           Pop = Pop, 
                           Info = "Knowledge", 
                           Sum = 1)
Timeline

```

# **Learning**

Learning with a exponential lern rate

#### Needs

1.  A Population (Pop) with several Agents defined by ID's and Knowledge

2.  optional for future implementations a name (Typ) for the specific Knowledge

3.  A value for the learn rate (LR). could be a scalar or e vector with the same length as the Population

4.  A value for the study time (ST). could be a scalar or e vector with the same length as the Population

#### Hints

-   If learn rate isn't given the values from the Population will be used, if this is missing in the Population 0 is used.

```{r}
learn <- function(Pop = Pop) {
  Pop_long <- longer_Pop(Pop = Pop)
  Pop_long <- Pop_long %>%
    group_by(ID) %>%
    mutate(r_time_learnDay = ifelse(Typ == A_Topic, r_time_learnDay, 0)) %>%
    mutate(tmp_Time0 = ( 1 - Knowledge )^( 1 / -A_LearnRate ),
           Knowledge = 1 - ( tmp_Time0 + r_time_learnDay )^( -A_LearnRate )) %>%
    mutate(c_time_learn = c_time_learn + sum(r_time_learnDay),
           r_time_learnDay = 0) %>%
    ungroup()
  Pop <- wider_Pop(Pop_long = Pop_long)
return(Pop)
}
```

#### Output

1.  Population with updated Knowledge

```{r}
Pop <- gen_Pop( nA = 3, 
                K = list(c(0.8, 0.3, 0.0), c(0.0, 0.4, 0.7)), 
                Typ = list("M1", "M2"), 
                pMD = 0.8)

Pop <- prep_Counter( Pop = Pop)
Pop <- prep_DayRes( Pop = Pop, tD = 8)
Pop <- learn(Pop = Pop)
Pop <- update_Knowledge(Pop = Pop)
Pop <- update_Topic(Pop = Pop)
Pop
```

## Slots

Functions to select and sets learning slots from a Population

### Select a random Slot of pairs

#### Needs

1.  A Population (Pop) with several Agents defined by ID's

2.  A size of the Slot in percents of the population

#### Hints

-   because it leads to trouble will selecting otherwise the calculated n is limited at the moment between 1 and half of the Population

```{r}
sel_Slot_rnd <- function(Pop = Pop,
                         psize = percentsOfPop) {   
  sID <- "Slot_ID"
  n <- round(nrow(Pop)*psize / 2, 0)
  n <- max(n, 1)
  n <- min(n, round(nrow(Pop) / 2, 0))
  
  SubPop <- sel_SubPop( Pop = Pop, n = n)   
  Slot1 <- SubPop$sel %>%     
    mutate(!!sID := seq_len(n)) 
  SubPop <- sel_SubPop( Pop = SubPop$rest, n = n) 
  Slot2 <- SubPop$sel %>%     
    mutate(!!sID := seq_len(n))
  Slot <- bind_rows(Slot1, Slot2)
  return(Slot)  
  }  
```

#### Output

1.  A random Slot-Population with Slot ID's which marks the pairs

```{r}
Pop
Slot <- sel_Slot_rnd(Pop = Pop, psize = 0.6)
Slot
```

### Sets Slot parameter by Slot-ID's

#### Needs

1.  A Slot of paird Agents defined by Slot_ID's

2.  A duration of the slot. could be a scalar or a vector with the same length as the number of pairs in the Slot

```{r}
set_SlotPar <- function(Slot = Slot,
                        ST = SlotDuration) {
  LRname <- "LearnRate"
  sLRname <- "Slot_LearnRate"
  STname <- "Slot_Duration"
  Slot <- Slot %>%
    group_by(Slot_ID) %>%
    mutate( !!sLRname := mean(.data[[LRname]], na.rm = TRUE),
            !!STname := ST) %>%
    ungroup()
  return(Slot)
}

```

#### Output

1.  A random Slot-Population with Slot ID's which marks the pairs, learn rate and duration of the Slot defined by pairs

```{r}
Slot <- set_SlotPar(Slot = Slot, ST = 1)
Slot
Slot %>%
  group_by(Slot_ID) %>%
  mutate( test := sum(.data[["ID"]], na.rm = TRUE) - .data[["ID"]])
  
```

### **Learning by Slots**

Learning with a exponential learn rate defined by pairs

#### Needs

1.  A Slot-Population with several paired Agents defined by Slot-ID's. Prepaerd by the function set_SlotPar()

2.  optional for future implementations a name (Typ) for the specific Knowledge

```{r}
learn_Slot <- function(Slot = Slot,
                       Typ = FALSE) {
  Kname <- "Knowledge"
  if (Typ != FALSE) {
    Kname <- paste(Kname, Typ, sep = "_")
  }
  LRname <- "Slot_LearnRate"
  STname <- "Slot_Duration"
  K <- Slot[[Kname]]
  LR <- Slot[[LRname]]
  ST <- Slot[[STname]]

  T0 <- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready
  K <- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd
  Slot <- set_Knowledge(Pop = Slot, Typ = Typ, K = K)
  Slot <- update_StudyTime(Pop = Slot, dT = ST)
  return(Slot)
}
```

#### Output

1.  Slot-Population with updated Knowledge

```{r}
Slot <- learn_Slot(Slot = Slot)
Slot
```

## L**earning by** Days

Learning by Days with a exponential learn rate defined by pairs according learning by Slots

#### Needs

1.  A Population (Pop) with several Agents defined by ID's and Knowledge

2.  optional for future implementations a name (Typ) for the specific Knowledge

3.  A percentage of Daytime which each agents stays in meetings (mean-value). has to be a scalar.

4.  A amount of hours for the day, is set to 8

5.  A duration for the meetings in hours, is set to 1

#### Hints

-   The learn rate is fixed during the Day and updated at the end of the Day

```{r}
learn_Days <- function(Pop = Pop,                        
                       Typ = FALSE,
                       pM = percentsOfMeetings,
                       dH = 8,
                       ST = 1) { 
  Pop <- update_LearnRate_Knowledge( Pop = Pop, Typ = Typ )
  Pop <- update_StudyTime( Pop = Pop , dT = 0)
  for(i in 1:dH) {
    Slot <- sel_Slot_rnd( Pop = Pop, psize = pM )
    Slot <- set_SlotPar(Slot = Slot, ST = ST)
    Slot <- learn_Slot(Slot = Slot, Typ = Typ)
    Pop <- int_SubPop( SubPop = Slot, Pop = Pop )
  } 
  Pop <- update_LearnRate_Knowledge( Pop = Pop, Typ = Typ )
  return(Pop) 
  }
```

#### Output

1.  Population with updated Knowledge, learn rate and study time

```{r}
Pop <- update_LearnRate_Knowledge( Pop = Pop, Typ = FALSE )
Pop <- set_StudyTime( Pop = Pop , ST = 0)
Pop
Pop <- learn_Days(Pop = Pop, pM = 0.8, dH = 2 ) 
Pop
```

## **Plots**

### Plot Timeline

#### Needs

1.  A Timeline from get_Timeline

```{r}
plt_Timeline <- function(TL = Timeline) {
  ggplot(data = TL, aes(x = Time)) +
  geom_line(aes(y = Knowledge, group = ID, color = "Agents"), 
            alpha = 0.5,
            linetype = "solid") +
  geom_line(aes(y = Knowledge_mean, color = "Mean"),
            linetype = "solid")  +
  geom_line(aes(y = Knowledge_median, color = "Median"),
            linetype = "dashed") +
  ggtitle("Timeline") +
  xlab("Number of Days") +
  ylab("Knowledge") +
  scale_y_continuous(
    limits = c(0, 1),
    breaks = seq(0, 1, 0.2)
  ) +
  scale_color_manual(
    values = c("Agents" = "grey", "Mean" = "black", "Median" = "black"),
    labels = c("Agents" = "Agents", "Mean" = "Mean", "Median" = "Median")
  ) +
  theme_light() +
  theme(legend.title = element_blank(),
        legend.position = "top",
        legend.justification = "left"
        )
}
```

#### Output

1.  ggplot2

# **Simulation**

A learning process with updated learn rate by current knowledge when Agents meet randomly by Days

#### Needs

1.  A Population (Pop) with several Agents defined by ID's and Knowledge

2.  optional for future implementations a name (Typ) for the specific Knowledge

3.  A number of Days (nD)

4.  A percentage of Daytime which each agents stays in meetings (mean-value). has to be a scalar.

5.  A amount of hours for the day, is set to 8

6.  A duration for the meetings in hours, is set to 1

```{r}

sim_Days <- function(Pop = Pop,
                     Typ = FALSE,
                     nD = NumberOfDays,
                     pM = precentsOfMeetings,
                     dH = 8,
                     ST = 1) {
  Kname <- "Knowledge"
  if (Typ != FALSE) {
    Kname <- paste(Kname, Typ, sep = "_")
  }
  Pop <- update_LearnRate_Knowledge( Pop = Pop )
  Pop <- set_StudyTime( Pop = Pop, ST = 0 )
  TL <- get_Timeline( TL =TL,
                       Time = 0,
                       Pop = Pop,
                       Info = Kname,
                       Sum = 1 )
  for(i in 1:nD) {
    Pop <- learn_Days(Pop = Pop,
                      Typ = Typ,
                      pM = pM,
                      dH = dH,
                      ST = ST)
    TL <- get_Timeline( TL =TL,
                         Time = i,
                         Pop = Pop,
                         Info = Kname,
                         Sum = 1 )
  }
    
  Output <- list( Pop = Pop,
                  TL = TL)
  return(Output)
}
```

#### Output

1.  A List with the new Population and a Timeline over the number of Days

```{r}

nA <- 50                          # number of Agents
ID <- seq_len(nA)                 # ID of the Agents
K <- (seq_len(nA)-1)/50           # Knowledge

nM <- 160                         # number of meetings(mean)
pM <- 0.80
nD <- nM / 8 / pM

Pop <- tibble( ID = ID )
Pop <- set_Knowledge( Pop = Pop, K = K )
Pop

res <- sim_Days(Pop = Pop,
                nD = nD,
                pM = pM)

mean(res$Pop[["StudyTime"]])
res$Pop
plt_Timeline(res$TL)

```

## ... Special Cases

### Only one Agent with Knowledge (0.8)

```{r}
K <- 0           # Knowledge

Pop <- tibble( ID = ID )
Pop <- set_Knowledge( Pop = Pop, K = K )
Pop[ID == 1, "Knowledge"] <- 0.8
Pop

res <- sim_Days(Pop = Pop,
                nD = nD,
                pM = pM)

res$Pop
plt_Timeline(res$TL)
```
