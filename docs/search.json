[
  {
    "objectID": "Snippets/index.html",
    "href": "Snippets/index.html",
    "title": "Snippets",
    "section": "",
    "text": "BetaDistribution\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Snippets"
    ]
  },
  {
    "objectID": "Project/sketchbook05.html",
    "href": "Project/sketchbook05.html",
    "title": "Areas of Knowledge",
    "section": "",
    "text": "The basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.\nIf it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.\nNow it seems to be time to add other aspects. At first it seems central that different areas of knowledge should be possible."
  },
  {
    "objectID": "Project/sketchbook05.html#timelines",
    "href": "Project/sketchbook05.html#timelines",
    "title": "Areas of Knowledge",
    "section": "Timelines",
    "text": "Timelines\nsaving Timelines during Simulations\nGet Agents-Timelines\nNeeds\n\nA container name for the Timeline\nA value for the Time\nA Population (Pop) with several Agents defined by ID’s\nA colname from the Population which should followed ver Time\noptional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\nCodeget_Timeline &lt;- function(TL = Timeline,\n                         Time = 0,\n                         Pop = Pop) {\n  TLadd &lt;- Pop %&gt;%\n    mutate(Time = Time) %&gt;%\n    select(starts_with(\"ID\"),\n           starts_with(\"Time\"),\n           starts_with(\"A_Knowledge\"),\n           starts_with(\"Knowledge_\"))\n  if (Time == 0) {\n    TL &lt;- TLadd\n  } else {\n    TL &lt;- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n\n\nOutput\n\nA Timeline in a long format\n\n\nCodeTimeline &lt;- get_Timeline(TL = Timeline,\n                         Time = 0,\n                         Pop = Pop)\nTimeline &lt;- get_Timeline(TL = Timeline,\n                         Time = 1,\n                         Pop = Pop)\nTimeline\n\n# A tibble: 20 × 5\n      ID  Time A_Knowledge Knowledge_M1 Knowledge_M2\n   &lt;int&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1     1     0        0.01         0.01          0  \n 2     2     0        0.2          0.01          0.2\n 3     3     0        0.2          0.01          0.2\n 4     4     0        0.2          0.01          0.2\n 5     5     0        0.2          0.01          0.2\n 6     6     0        0.2          0.01          0.2\n 7     7     0        0.01         0.01          0  \n 8     8     0        0.2          0.01          0.2\n 9     9     0        0.2          0.01          0.2\n10    10     0        0.2          0.01          0.2\n11     1     1        0.01         0.01          0  \n12     2     1        0.2          0.01          0.2\n13     3     1        0.2          0.01          0.2\n14     4     1        0.2          0.01          0.2\n15     5     1        0.2          0.01          0.2\n16     6     1        0.2          0.01          0.2\n17     7     1        0.01         0.01          0  \n18     8     1        0.2          0.01          0.2\n19     9     1        0.2          0.01          0.2\n20    10     1        0.2          0.01          0.2"
  },
  {
    "objectID": "Project/sketchbook05.html#slots",
    "href": "Project/sketchbook05.html#slots",
    "title": "Areas of Knowledge",
    "section": "Slots",
    "text": "Slots\nFunctions to select and sets learning slots from a Population\nSelect a random Slot of pairs\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA size of the Slot in percents of the population\nHints\n\nbecause it leads to trouble will selecting otherwise the calculated n is limited at the moment between 1 and half of the Population\n\n\nCodesel_Pairs_rnd &lt;- function(Pop = Pop,\n                          psize = percentsOfPop) {   \n  sID &lt;- \"tmp_ID\"\n  psize &lt;- min(psize, 1)\n  nR &lt;- nrow(Pop)\n  n &lt;- round(nR * psize * 0.49, 0)\n  n &lt;- max(n, 1)\n  \n  SubPop &lt;- sel_SubPop( Pop = Pop, n = n)   \n  Slot1 &lt;- SubPop$sel %&gt;%     \n    mutate(!!sID := seq_len(n))\n  if (nrow(SubPop$rest) == n) {\n    Slot2 &lt;- SubPop$rest\n  } else {\n    SubPop &lt;- sel_SubPop( Pop = SubPop$rest, n = n) \n    Slot2 &lt;- SubPop$sel\n  }\n  Slot2 &lt;- Slot2 %&gt;%     \n    mutate(!!sID := seq_len(n))\n  Pairs &lt;- bind_rows(Slot1, Slot2)\n  return(Pairs)  \n  }  \n\n\nOutput\n\nA random Slot-Population with Slot ID’s which marks the pairs\n\n\nCodePop\n\n# A tibble: 5 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n3     3 M3             0.72     0.696       0.536          1        0.8\n4     4 M2             0        1           0.001          1        0.8\n5     5 M3             0        1           0.001          1        0.8\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;\n\nCodePairs &lt;- sel_Pairs_rnd(Pop = Pop, psize = 0.5)\nPairs\n\n# A tibble: 2 × 16\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 9 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;, tmp_ID &lt;int&gt;\n\nCodePairs &lt;- sel_Pairs_rnd(Pop = Pairs, psize = 1)\nPairs\n\n# A tibble: 2 × 16\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 9 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;, tmp_ID &lt;int&gt;\n\n\nLearning by Pairs\nLearning with a exponential learn rate defined by pairs\nNeeds\n\nA Slot-Population with several paired Agents defined by Slot-ID’s. Prepaerd by the function set_SlotPar()\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodelearn_Pairs &lt;- function(Pairs = Pairs,\n                        time_meet = time_meet) {\n  Pop_long &lt;- longer_Pop(Pop = Pairs)\n  Pop_long &lt;- Pop_long %&gt;%\n  group_by(tmp_ID) %&gt;%\n    mutate(tmp_LearnRate = mean(A_LearnRate),\n           tmp_facT = ifelse(Typ == A_Topic, 1, 0)) %&gt;%\n  group_by(tmp_ID, Typ) %&gt;%\n    mutate(tmp_facT = mean(tmp_facT )) %&gt;%\n  group_by(ID) %&gt;%\n    mutate(tmp_time_learn = tmp_facT * time_meet,\n           tmp_Time0 = ( 1 - Knowledge )^( 1 / -tmp_LearnRate ),\n           Knowledge = 1 - ( tmp_Time0 + tmp_time_learn)^( -tmp_LearnRate )) %&gt;%\n    ungroup()\n  \n  Pairs &lt;- wider_Pop(Pop_long = Pop_long)\n  Pairs &lt;- Pairs %&gt;%\n    mutate(c_n_meet = c_n_meet + 1,\n           c_time_meet = c_time_meet + time_meet,\n           r_time_meet = r_time_meet - time_meet) \n  return(Pairs)\n}\n\n\nOutput\n\nSlot-Population with updated Knowledge\n\n\nCodePairs\n\n# A tibble: 2 × 16\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 9 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;, tmp_ID &lt;int&gt;\n\nCodePairs &lt;- learn_Pairs(Pairs = Pairs, time_meet = 0.75)\nPairs\n\n# A tibble: 2 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1             0.8      0.143       0.401          1        0.8\n2     2 M2             0.46     0.829       0.367          1        0.8\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;\n\nCodePop &lt;- int_SubPop(SubPop = Pairs, Pop = Pop)\nPop &lt;- update_Knowledge(Pop = Pop)\nPop &lt;- update_Topic(Pop = Pop)\nPop\n\n# A tibble: 5 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1             0.8      0.225       0.430          1        0.8\n2     2 M2             0.47     0.829       0.379          1        0.8\n3     3 M3             0.72     0.696       0.536          1        0.8\n4     4 M2             0        1           0.001          1        0.8\n5     5 M3             0        1           0.001          1        0.8\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;"
  },
  {
    "objectID": "Project/sketchbook05.html#learning-by-days",
    "href": "Project/sketchbook05.html#learning-by-days",
    "title": "Areas of Knowledge",
    "section": "Learning by Days",
    "text": "Learning by Days\nLearning by Days with a exponential learn rate defined by pairs according learning by Slots\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nA percentage of Daytime which each agents stays in meetings (mean-value). has to be a scalar.\nA amount of hours for the day, is set to 8\nA duration for the meetings in hours, is set to 1\nHints\n\nThe learn rate is fixed during the Day and updated at the end of the Day\n\n\nCodelearn_Day &lt;- function(Pop = Pop,\n                      time_day = time_day,\n                      time_meet = time_meet) { \nPop &lt;- update_Knowledge(Pop = Pop)\nPop &lt;- update_Topic(Pop = Pop)\nif (!any(startsWith(names(Pop), \"c_\"))) {\n  Pop &lt;- prep_Counter( Pop = Pop)\n  Pop &lt;- prep_Res( Pop = Pop, time_day = time_day, set = TRUE)\n}\nPop &lt;- prep_Res( Pop = Pop, time_day = time_day)\n\nnR_Pop &lt;- nrow(Pop)\npsize &lt;- mean(Pop[[\"A_pMeetDay\"]])\niD &lt;- round(time_day / time_meet, digits = 0)\n\nfor(i in 1:iD) {\n  ParBreak &lt;- Pop %&gt;%\n    select(r_time_meet) %&gt;%\n    mutate(r_time_meet = ifelse(r_time_meet &gt;= time_meet, 1, 0))\n  \n  if (sum(ParBreak$r_time_meet) &lt; 2) { break }\n   \n  Pop_Res &lt;- Pop[Pop$r_time_meet &gt;= time_meet, ]\n  nR_Pop_Res &lt;- nrow(Pop_Res)\n  \n  psize_i &lt;- psize / nR_Pop_Res * nR_Pop\n  \n  Pairs &lt;- sel_Pairs_rnd(Pop = Pop_Res, psize = psize_i)\n  Pairs &lt;- learn_Pairs(Pairs = Pairs, time_meet = time_meet)\n  \n  Pop &lt;- int_SubPop(SubPop = Pairs, Pop = Pop)\n} \nPop &lt;- learn(Pop = Pop, con = TRUE)\nreturn(Pop) \n}\n\n\nOutput\n\nPopulation with updated Knowledge, learn rate and study time\n\n\nCodePop &lt;- gen_Pop( nA = 5, \n                K = list(c(0.8, 0.3, 0, 0 ,0), \n                         c(0.0, 0.4, 0.7, 0 ,0), \n                         c(0.0, 0.4, 0.7, 0 ,0)), \n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.5)\n\nPop\n\n# A tibble: 5 × 10\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1              0.8     0.143       0.4          0.8        0.5\n2     2 M2              0.4     0.929       0.338        0.8        0.5\n3     3 M2              0.7     0.714       0.525        0.8        0.5\n4     4 M1              0       1           0.001        0.8        0.5\n5     5 M1              0       1           0.001        0.8        0.5\n# ℹ 3 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;\n\nCodePop &lt;- learn_Day(Pop = Pop, time_day = 8, time_meet = 0.75)\nPop\n\n# A tibble: 5 × 15\n     ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n  &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     1 M1             0.8      0.324      0.464         0.8        0.5\n2     2 M3             0.47     0.902      0.389         0.8        0.5\n3     3 M2             0.71     0.766      0.548         0.8        0.5\n4     4 M3             0.05     0.716      0.0394        0.8        0.5\n5     5 M2             0.19     0.459      0.123         0.8        0.5\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;"
  },
  {
    "objectID": "Project/sketchbook05.html#plots",
    "href": "Project/sketchbook05.html#plots",
    "title": "Areas of Knowledge",
    "section": "Plots",
    "text": "Plots\nPlot Timeline\nNeeds\n\nA Timeline from get_Timeline\n\n\nCodeplt_Timeline &lt;- function(TL) {\n  Knowledges &lt;- names(TL)[startsWith(names(TL), \"Knowledge_\")]\n  TL &lt;- TL %&gt;%\n    group_by(Time) %&gt;%\n    mutate(mean_A_Knowledge = mean(A_Knowledge, na.rm = TRUE)) %&gt;%\n    mutate(across(all_of(Knowledges),\n                  ~ mean(.x, na.rm = TRUE),\n                  .names = \"mean_{.col}\")) %&gt;%\n    ungroup()\n\n  p &lt;- ggplot(data = TL, aes(x = Time)) +\n    geom_line(aes(y = A_Knowledge, group = ID, color = \"Agents\"),\n              alpha = 0.5, linetype = \"solid\") +\n    geom_line(aes(y = mean_A_Knowledge, color = \"Knowledge\"), linetype = \"solid\") +\n    ggtitle(\"Timeline\") +\n    xlab(\"Number of Days\") +\n    ylab(\"Knowledge\") +\n    scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +\n    theme_light() +\n    theme(\n      legend.title = element_blank(),\n      legend.position = \"top\",\n      legend.justification = \"left\"\n    )\n  \n  colors &lt;- setNames(rainbow(length(Knowledges)), Knowledges)\n\n  for (var in Knowledges) {\n    mean_var &lt;- paste0(\"mean_\", var)\n    p &lt;- p + geom_line(aes_string(y = mean_var, color = shQuote(var)), \n                       linetype = \"solid\")\n    p &lt;- p + scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Knowledge\" = \"black\", colors),\n    labels = c(\"Agents\" = \"Agents\", \"Knowledge\" = \"A_Knowledge\", Knowledges))\n    }\n\n  return(p)\n}\n\n\nOutput\n\nggplot2"
  },
  {
    "objectID": "Project/sketchbook05.html#special-cases",
    "href": "Project/sketchbook05.html#special-cases",
    "title": "Areas of Knowledge",
    "section": "… Special Cases",
    "text": "… Special Cases\nOnly one Agent with Knowledge (0.8)\n\nCodePop &lt;- gen_Pop( nA = nA, \n                K = list(0.0, 0.0, 0.0),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] &lt;- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] &lt;- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] &lt;- 0.8\nPop &lt;- update_Knowledge(Pop = Pop)\nPop &lt;- update_Topic(Pop = Pop)\nPop\n\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1              0.8     0.143       0.4          0.8        0.8\n 2     2 M2              0       1           0.001        0.8        0.8\n 3     3 M3              0       1           0.001        0.8        0.8\n 4     4 M3              0       1           0.001        0.8        0.8\n 5     5 M2              0       1           0.001        0.8        0.8\n 6     6 M1              0       1           0.001        0.8        0.8\n 7     7 M2              0       1           0.001        0.8        0.8\n 8     8 M1              0       1           0.001        0.8        0.8\n 9     9 M2              0       1           0.001        0.8        0.8\n10    10 M1              0       1           0.001        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;\n\nCoderes &lt;- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1             0.95     0.863       0.773        0.8        0.8\n 2     2 M1             0.93     0.873       0.760        0.8        0.8\n 3     3 M3             0.93     0.847       0.752        0.8        0.8\n 4     4 M1             0.93     0.859       0.756        0.8        0.8\n 5     5 M3             0.93     0.799       0.730        0.8        0.8\n 6     6 M3             0.93     0.829       0.745        0.8        0.8\n 7     7 M1             0.93     0.876       0.760        0.8        0.8\n 8     8 M2             0.92     0.895       0.767        0.8        0.8\n 9     9 M1             0.93     0.855       0.756        0.8        0.8\n10    10 M1             0.93     0.854       0.753        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;\n\nCodeplt_Timeline(res$TL)\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\nCodePop &lt;- gen_Pop( nA = nA, \n                K = list(0.02, 0.01, 0.0),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] &lt;- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] &lt;- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] &lt;- 0.8\nPop &lt;- update_Knowledge(Pop = Pop)\nPop &lt;- update_Topic(Pop = Pop)\nPop\n\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1             0.8      0.150      0.402         0.8        0.8\n 2     2 M1             0.02     0.429      0.0125        0.8        0.8\n 3     3 M1             0.02     0.429      0.0125        0.8        0.8\n 4     4 M1             0.02     0.429      0.0125        0.8        0.8\n 5     5 M1             0.02     0.429      0.0125        0.8        0.8\n 6     6 M1             0.02     0.429      0.0125        0.8        0.8\n 7     7 M1             0.02     0.429      0.0125        0.8        0.8\n 8     8 M1             0.02     0.429      0.0125        0.8        0.8\n 9     9 M1             0.02     0.429      0.0125        0.8        0.8\n10    10 M1             0.02     0.429      0.0125        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;\n\nCoderes &lt;- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1             0.86     0.149       0.433        0.8        0.8\n 2     2 M1             0.76     0.150       0.385        0.8        0.8\n 3     3 M1             0.76     0.150       0.384        0.8        0.8\n 4     4 M1             0.76     0.150       0.384        0.8        0.8\n 5     5 M1             0.77     0.150       0.388        0.8        0.8\n 6     6 M1             0.76     0.150       0.383        0.8        0.8\n 7     7 M1             0.76     0.150       0.382        0.8        0.8\n 8     8 M1             0.76     0.150       0.385        0.8        0.8\n 9     9 M1             0.76     0.150       0.384        0.8        0.8\n10    10 M1             0.76     0.150       0.381        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;\n\nCodeplt_Timeline(res$TL)\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\nCodePop &lt;- gen_Pop( nA = nA, \n                K = list(0.01, 0.02, 0.0),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] &lt;- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] &lt;- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] &lt;- 0.8\nPop &lt;- update_Knowledge(Pop = Pop)\nPop &lt;- update_Topic(Pop = Pop)\nPop\n\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1             0.8      0.157      0.405         0.8        0.8\n 2     2 M2             0.02     0.429      0.0125        0.8        0.8\n 3     3 M2             0.02     0.429      0.0125        0.8        0.8\n 4     4 M2             0.02     0.429      0.0125        0.8        0.8\n 5     5 M2             0.02     0.429      0.0125        0.8        0.8\n 6     6 M2             0.02     0.429      0.0125        0.8        0.8\n 7     7 M2             0.02     0.429      0.0125        0.8        0.8\n 8     8 M2             0.02     0.429      0.0125        0.8        0.8\n 9     9 M2             0.02     0.429      0.0125        0.8        0.8\n10    10 M2             0.02     0.429      0.0125        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;\n\nCoderes &lt;- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1             0.92     0.664       0.668        0.8        0.8\n 2     2 M2             0.8      0.150       0.403        0.8        0.8\n 3     3 M2             0.82     0.220       0.436        0.8        0.8\n 4     4 M2             0.82     0.323       0.473        0.8        0.8\n 5     5 M2             0.83     0.262       0.459        0.8        0.8\n 6     6 M2             0.83     0.447       0.525        0.8        0.8\n 7     7 M2             0.84     0.340       0.491        0.8        0.8\n 8     8 M2             0.85     0.416       0.526        0.8        0.8\n 9     9 M2             0.83     0.366       0.494        0.8        0.8\n10    10 M2             0.84     0.329       0.491        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;\n\nCodeplt_Timeline(res$TL)\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\nCodePop &lt;- gen_Pop( nA = nA, \n                K = list(0.0, 0.0, 0.01),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\nPop[Pop$ID == 1, \"Knowledge_M1\"] &lt;- 0.8\n#Pop[Pop$ID == 2, \"Knowledge_M2\"] &lt;- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] &lt;- 0.8\nPop &lt;- update_Knowledge(Pop = Pop)\nPop &lt;- update_Topic(Pop = Pop)\nPop\n\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1             0.8      0.150       0.402        0.8        0.8\n 2     2 M3             0.01     0.143       0.005        0.8        0.8\n 3     3 M3             0.01     0.143       0.005        0.8        0.8\n 4     4 M3             0.01     0.143       0.005        0.8        0.8\n 5     5 M3             0.01     0.143       0.005        0.8        0.8\n 6     6 M3             0.01     0.143       0.005        0.8        0.8\n 7     7 M3             0.01     0.143       0.005        0.8        0.8\n 8     8 M3             0.01     0.143       0.005        0.8        0.8\n 9     9 M3             0.01     0.143       0.005        0.8        0.8\n10    10 M3             0.01     0.143       0.005        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;\n\nCoderes &lt;- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M1             0.92     0.659       0.665        0.8        0.8\n 2     2 M3             0.82     0.255       0.452        0.8        0.8\n 3     3 M3             0.81     0.227       0.436        0.8        0.8\n 4     4 M3             0.82     0.282       0.459        0.8        0.8\n 5     5 M3             0.79     0.328       0.461        0.8        0.8\n 6     6 M3             0.82     0.290       0.464        0.8        0.8\n 7     7 M3             0.83     0.423       0.519        0.8        0.8\n 8     8 M3             0.85     0.352       0.500        0.8        0.8\n 9     9 M3             0.81     0.199       0.427        0.8        0.8\n10    10 M3             0.82     0.265       0.455        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;\n\nCodeplt_Timeline(res$TL)\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\nCodePop &lt;- gen_Pop( nA = nA, \n                K = list(0.0, 0.0, 0.01),\n                Typ = list(\"M1\", \"M2\", \"M3\"), \n                pWD = 0.8,\n                pMD = 0.8)\n#Pop[Pop$ID == 1, \"Knowledge_M1\"] &lt;- 0.8\nPop[Pop$ID == 2, \"Knowledge_M2\"] &lt;- 0.8\n#Pop[Pop$ID == 3, \"Knowledge_M3\"] &lt;- 0.8\nPop &lt;- update_Knowledge(Pop = Pop)\nPop &lt;- update_Topic(Pop = Pop)\nPop\n\n# A tibble: 50 × 10\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M3             0.01     0.143       0.005        0.8        0.8\n 2     2 M2             0.8      0.150       0.402        0.8        0.8\n 3     3 M3             0.01     0.143       0.005        0.8        0.8\n 4     4 M3             0.01     0.143       0.005        0.8        0.8\n 5     5 M3             0.01     0.143       0.005        0.8        0.8\n 6     6 M3             0.01     0.143       0.005        0.8        0.8\n 7     7 M3             0.01     0.143       0.005        0.8        0.8\n 8     8 M3             0.01     0.143       0.005        0.8        0.8\n 9     9 M3             0.01     0.143       0.005        0.8        0.8\n10    10 M3             0.01     0.143       0.005        0.8        0.8\n# ℹ 40 more rows\n# ℹ 3 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;\n\nCoderes &lt;- sim_Days(Pop = Pop,\n                nD = 20)\n\nres$Pop\n\n# A tibble: 50 × 15\n      ID A_Topic A_Knowledge A_Profile A_LearnRate A_pWorkDay A_pMeetDay\n   &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 M3             0.81     0.214       0.430        0.8        0.8\n 2     2 M2             0.92     0.660       0.665        0.8        0.8\n 3     3 M3             0.83     0.306       0.472        0.8        0.8\n 4     4 M3             0.83     0.336       0.487        0.8        0.8\n 5     5 M3             0.84     0.356       0.500        0.8        0.8\n 6     6 M3             0.81     0.235       0.437        0.8        0.8\n 7     7 M3             0.83     0.381       0.504        0.8        0.8\n 8     8 M3             0.82     0.310       0.468        0.8        0.8\n 9     9 M3             0.81     0.351       0.479        0.8        0.8\n10    10 M3             0.83     0.341       0.486        0.8        0.8\n# ℹ 40 more rows\n# ℹ 8 more variables: Knowledge_M1 &lt;dbl&gt;, Knowledge_M2 &lt;dbl&gt;,\n#   Knowledge_M3 &lt;dbl&gt;, r_time_meet &lt;dbl&gt;, r_time_learn &lt;dbl&gt;,\n#   c_time_meet &lt;dbl&gt;, c_time_learn &lt;dbl&gt;, c_n_meet &lt;dbl&gt;\n\nCodeplt_Timeline(res$TL)\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale."
  },
  {
    "objectID": "Project/sketchbook03.html",
    "href": "Project/sketchbook03.html",
    "title": "Grouped in Slots",
    "section": "",
    "text": "The basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.\nIf it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#population-for-testing-the-functions",
    "href": "Project/sketchbook03.html#population-for-testing-the-functions",
    "title": "Grouped in Slots",
    "section": "Population for testing the Functions",
    "text": "Population for testing the Functions\n\nCodenA = 5            # number of Agents\nID = seq_len(nA)  # ID of the Agents\n\nPop &lt;- tibble( ID = ID )\nPop\n\n# A tibble: 5 × 1\n     ID\n  &lt;int&gt;\n1     1\n2     2\n3     3\n4     4\n5     5",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#knowledge",
    "href": "Project/sketchbook03.html#knowledge",
    "title": "Grouped in Slots",
    "section": "Knowledge",
    "text": "Knowledge\nFunctions to set and update Knowledge\nSet Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the Knowledge (K) between 0 and 1. could be a scalar or e vector with the same length as the Population\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodeset_Knowledge &lt;- function(Pop = Pop,\n                          Typ = FALSE,\n                          K = Knowledge) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  Pop &lt;- Pop %&gt;%\n    mutate(!!Kname := K)\n\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeK &lt;- seq_len(nA)/5\n\nPop &lt;- set_Knowledge( Pop = Pop, K = 0.5 )\nPop &lt;- set_Knowledge( Pop = Pop, Typ = \"A\", K = K )\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge Knowledge_A\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1     1       0.5         0.2\n2     2       0.5         0.4\n3     3       0.5         0.6\n4     4       0.5         0.8\n5     5       0.5         1  \n\n\nUpdate Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value to add to the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 0 is used to add\nA value to multiplie (fac) the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 1 is used for the multiplikation\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe add operation is always used first!\nIf the Knowledge is not defined before it will be generated with the start value (add) and the multiplication with the value (fac)\n\n\nCodeupdate_Knowledge &lt;- function(Pop = Pop,\n                            Typ = FALSE,\n                            add = 0,\n                            fac = 1) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := ( .data[[Kname]] + add ) * fac )\n  } else {\n    Pop &lt;- set_Knowledge(Pop = Pop, K = add, Typ = Typ)\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := .data[[Kname]] * fac )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeadd &lt;- seq_len(nA)/20\nfac &lt;- seq_len(nA)/10 \n\nPop &lt;- update_Knowledge( Pop = Pop, add = add ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"A\", fac = fac ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"B\", add = add, fac = fac ) \nPop\n\n# A tibble: 5 × 4\n     ID Knowledge Knowledge_A Knowledge_B\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1     1      0.55        0.02       0.005\n2     2      0.6         0.08       0.02 \n3     3      0.65        0.18       0.045\n4     4      0.7         0.32       0.08 \n5     5      0.75        0.5        0.125",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#learnrate",
    "href": "Project/sketchbook03.html#learnrate",
    "title": "Grouped in Slots",
    "section": "LearnRate",
    "text": "LearnRate\nFunctions to set and update the learn rate\nSet LearnRate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the learn rate (LR) greater than 0 and up to 1. could be a scalar or e vector with the same length as the Population\nHints\n\nLernRate 0 leads to Problems so it ist limited it to 1E-3\n\n\nCodeset_LearnRate &lt;- function(Pop = Pop,\n                          LR = LearnRate) {\n  LRname &lt;- \"LearnRate\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!LRname := LR,\n           !!LRname := pmax(.data[[LRname]],1E-3))\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodeLR &lt;- seq_len(nA)/5  \nPop &lt;- set_LearnRate( Pop = Pop, LR = 1 ) \nPop\n\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005         1\n2     2      0.6         0.08       0.02          1\n3     3      0.65        0.18       0.045         1\n4     4      0.7         0.32       0.08          1\n5     5      0.75        0.5        0.125         1\n\n\nUpdate LearnRate by Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe learn rate is defined as 50% of the Knowledge for each Agent\n\n\nCodeupdate_LearnRate_Knowledge &lt;- function(Pop = Pop,\n                                       Typ = FALSE) {\n  LR &lt;- \"LearnRate\"\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!LR := .data[[Kname]] * 0.5 )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodePop &lt;- update_LearnRate_Knowledge( Pop = Pop )  \nPop\n\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275\n2     2      0.6         0.08       0.02      0.3  \n3     3      0.65        0.18       0.045     0.325\n4     4      0.7         0.32       0.08      0.35 \n5     5      0.75        0.5        0.125     0.375",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#studytime",
    "href": "Project/sketchbook03.html#studytime",
    "title": "Grouped in Slots",
    "section": "StudyTime",
    "text": "StudyTime\nFunctions to set and update the StudyTime\nSet StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the StudyTime (ST). could be a scalar or a vector with the same length as the Population\nHints\n\nIf StudyTime isn’t given the Population will be initialising with 0\n\n\nCodeset_StudyTime &lt;- function(Pop = Pop,\n                          ST = 0) {\n  STname &lt;- \"StudyTime\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!STname := ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- set_StudyTime( Pop = Pop, ST = 3)  \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         3\n2     2      0.6         0.08       0.02      0.3           3\n3     3      0.65        0.18       0.045     0.325         3\n4     4      0.7         0.32       0.08      0.35          3\n5     5      0.75        0.5        0.125     0.375         3\n\n\nUpdate StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and StudyTime\nA Time (dT) that should added.\nHints\n\nIf StudyTime isn’t defined in Population it will be initialising with dT\n\n\nCodeupdate_StudyTime &lt;- function(Pop = Pop,\n                             dT = TimeToAdd) {\n  STname &lt;- \"StudyTime\"\n  if (STname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!STname := .data[[STname]] + dT )\n  } else {\n    Pop &lt;- set_StudyTime(Pop = Pop, ST = dT )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- update_StudyTime( Pop = Pop, dT = 1)   \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     2      0.6         0.08       0.02      0.3           4\n3     3      0.65        0.18       0.045     0.325         4\n4     4      0.7         0.32       0.08      0.35          4\n5     5      0.75        0.5        0.125     0.375         4",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#data-management",
    "href": "Project/sketchbook03.html#data-management",
    "title": "Grouped in Slots",
    "section": "Data Management",
    "text": "Data Management\nFunctions to select and reintegrate a Sub Populations\nSelect a Sub Population\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA vector wit ID’s(IDs). If no vector is defined it needs a (n, witch is initialised by 2) for selecting random ID’s\nA value (n) if the selection should be random\nHints\n\nIf StudyTime isn’t given the Population will be initialising with 0\n\n\nCodesel_SubPop &lt;- function(Pop = Pop,\n                       IDs = NULL,\n                       n = 2) {\n    if (is.null(IDs)) {\n      IDs &lt;- sample( Pop[[\"ID\"]], size=n )\n    }\n  SubPop &lt;- list()\n  SubPop$sel &lt;- Pop %&gt;%\n    filter(ID %in% IDs) %&gt;%\n    arrange(match(ID, IDs))\n  SubPop$rest &lt;- Pop %&gt;%\n    filter(!ID %in% IDs)\n  return(SubPop)\n}\n\n\nOutput\n\nList with Sub Population ($sel) and the rest of the Population($rest)\n\n\nCodeSubPop &lt;- sel_SubPop( Pop = Pop )\nSubPop$sel\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3      0.65        0.18       0.045     0.325         4\n2     1      0.55        0.02       0.005     0.275         4\n\nCodeSubPop$rest\n\n# A tibble: 3 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     2      0.6         0.08       0.02      0.3           4\n2     4      0.7         0.32       0.08      0.35          4\n3     5      0.75        0.5        0.125     0.375         4\n\n\n\nCodeSubPop &lt;- sel_SubPop( Pop = Pop , IDs = c(2, 1))\nSubPop$sel\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     2      0.6         0.08       0.02      0.3           4\n2     1      0.55        0.02       0.005     0.275         4\n\nCodeSubPop$rest\n\n# A tibble: 3 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3      0.65        0.18       0.045     0.325         4\n2     4      0.7         0.32       0.08      0.35          4\n3     5      0.75        0.5        0.125     0.375         4\n\n\nIntegrate Sub Population\nNeeds\n\nA Sub Population (SubPop) with Agents defined by ID’s which are also defined in Population\nA Population (Pop) with several Agents defined by ID’s\nHints\n\nSubPop and Pop has to have the same cols\n\n\nCodeint_SubPop &lt;- function(SubPop = SubPop,\n                       Pop = Pop) {\n  col_sort &lt;- colnames(Pop)\n  SubPop &lt;- SubPop[, col_sort]\n  IDs &lt;- SubPop[[\"ID\"]]\n  Pop[Pop$ID %in% IDs,] &lt;- SubPop\n  Pop &lt;- Pop %&gt;%\n    arrange(ID)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     2      0.6         0.08       0.02      0.3           4\n3     3      0.65        0.18       0.045     0.325         4\n4     4      0.7         0.32       0.08      0.35          4\n5     5      0.75        0.5        0.125     0.375         4\n\nCodeSubPop &lt;- sel_SubPop(Pop = Pop, n = 2 )$sel\nSubPop &lt;- set_Knowledge(Pop = SubPop, K = 0)\nSubPop\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3         0        0.18       0.045     0.325         4\n2     2         0        0.08       0.02      0.3           4\n\nCodePop &lt;- int_SubPop(SubPop = SubPop, Pop = Pop)\nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     2      0           0.08       0.02      0.3           4\n3     3      0           0.18       0.045     0.325         4\n4     4      0.7         0.32       0.08      0.35          4\n5     5      0.75        0.5        0.125     0.375         4",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#timelines",
    "href": "Project/sketchbook03.html#timelines",
    "title": "Grouped in Slots",
    "section": "Timelines",
    "text": "Timelines\nsaving Timelines during Simulations\nGet Agents-Timelines\nNeeds\n\nA container name for the Timeline\nA value for the Time\nA Population (Pop) with several Agents defined by ID’s\nA colname from the Population which should followed ver Time\noptional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\nCodeget_Timeline &lt;- function(TL = Timeline,\n                          Time = 0,\n                          Pop = Pop,\n                          Info = name,\n                          Sum = 0) {\n  TLadd &lt;- tibble( ID = Pop[[\"ID\"]],\n                   Time = Time,\n                   !!Info := Pop[[Info]])\n  if (Sum == 1) {\n    Sumname1 &lt;- paste(Info,\"mean\", sep = \"_\")\n    Sumname2 &lt;- paste(Info,\"median\", sep = \"_\")\n    TLadd &lt;- TLadd %&gt;%\n        mutate(!!Sumname1 := mean(Pop[[Info]], na.rm = TRUE),\n               !!Sumname2 := median(Pop[[Info]], na.rm = TRUE))\n    }\n  if (Time == 0) {\n    TL &lt;- TLadd\n  } else {\n    TL &lt;- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n\n\nOutput\n\nA Timeline in a long format\n\n\nCodeTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 0, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 1, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline\n\n# A tibble: 10 × 5\n      ID  Time Knowledge Knowledge_mean Knowledge_median\n   &lt;int&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n 1     1     0      0.55            0.4             0.55\n 2     2     0      0               0.4             0.55\n 3     3     0      0               0.4             0.55\n 4     4     0      0.7             0.4             0.55\n 5     5     0      0.75            0.4             0.55\n 6     1     1      0.55            0.4             0.55\n 7     2     1      0               0.4             0.55\n 8     3     1      0               0.4             0.55\n 9     4     1      0.7             0.4             0.55\n10     5     1      0.75            0.4             0.55",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#learning",
    "href": "Project/sketchbook03.html#learning",
    "title": "Grouped in Slots",
    "section": "Learning",
    "text": "Learning\nLearning with a exponential lern rate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nA value for the learn rate (LR). could be a scalar or e vector with the same length as the Population\nA value for the study time (ST). could be a scalar or e vector with the same length as the Population\nHints\n\nIf learn rate isn’t given the values from the Population will be used, if this is missing in the Population 0 is used.\n\n\nCodelearn &lt;- function(Pop = Pop,\n                  Typ = FALSE,\n                  LR = FALSE,\n                  ST = StudyTime) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    K &lt;- Pop[[Kname]]\n  }\n  if (LR == FALSE) {\n    if (\"LearnRate\" %in% colnames(Pop)) {\n      LR &lt;- Pop[[\"LearnRate\"]]\n    }\n  }\n\n  T0 &lt;- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K &lt;- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  \n  Pop &lt;- set_Knowledge(Pop = Pop, Typ = Typ, K = K)\n  Pop &lt;- update_StudyTime(Pop = Pop, dT = ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with updated Knowledge\n\n\nCodePop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge(Pop = Pop, K = 0.1)\nPop &lt;- set_LearnRate(Pop = Pop, LR = 1)\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge LearnRate\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1       0.1         1\n2     2       0.1         1\n3     3       0.1         1\n4     4       0.1         1\n5     5       0.1         1\n\nCodePop &lt;- learn( Pop = Pop, ST = 1)\nPop\n\n# A tibble: 5 × 4\n     ID Knowledge LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1     0.526         1         1\n2     2     0.526         1         1\n3     3     0.526         1         1\n4     4     0.526         1         1\n5     5     0.526         1         1",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#slots",
    "href": "Project/sketchbook03.html#slots",
    "title": "Grouped in Slots",
    "section": "Slots",
    "text": "Slots\nFunctions to select and sets learning slots from a Population\nSelect a random Slot of pairs\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA size of the Slot in percents of the population\nHints\n\nbecause it leads to trouble will selecting otherwise the calculated n is limited at the moment between 1 and half of the Population\n\n\nCodesel_Slot_rnd &lt;- function(Pop = Pop,\n                         psize = PrecentOfPop) {   \n  sID &lt;- \"Slot_ID\"\n  n &lt;- round(nrow(Pop)*psize / 2, 0)\n  n &lt;- max(n, 1)\n  n &lt;- min(n, round(nrow(Pop) / 2, 0))\n \n  SubPop &lt;- sel_SubPop( Pop = Pop, n = n)   \n  Slot1 &lt;- SubPop$sel %&gt;%     \n    mutate(!!sID := seq_len(n)) \n  SubPop &lt;- sel_SubPop( Pop = SubPop$rest, n = n) \n  Slot2 &lt;- SubPop$sel %&gt;%     \n    mutate(!!sID := seq_len(n))\n  Slot &lt;- bind_rows(Slot1, Slot2)\n  return(Slot)  \n  }  \n\n\nOutput\n\nA random Slot-Population with Slot ID’s which marks the pairs\n\n\nCodePop\n\n# A tibble: 5 × 4\n     ID Knowledge LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1     0.526         1         1\n2     2     0.526         1         1\n3     3     0.526         1         1\n4     4     0.526         1         1\n5     5     0.526         1         1\n\nCoderound(nrow(Pop) / 2,0)\n\n[1] 2\n\nCodeSlot &lt;- sel_Slot_rnd(Pop = Pop, psize = 0.8)\nSlot\n\n# A tibble: 4 × 5\n     ID Knowledge LearnRate StudyTime Slot_ID\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;\n1     4     0.526         1         1       1\n2     3     0.526         1         1       2\n3     2     0.526         1         1       1\n4     1     0.526         1         1       2\n\n\nSets Slot parameter by Slot-ID’s\nNeeds\n\nA Slot of paird Agents defined by Slot_ID’s\nA duration of the slot. could be a scalar or a vector with the same length as the number of pairs in the Slot\n\n\nCodeset_SlotPar &lt;- function(Slot = Slot,\n                    ST = SlotDuration) {\n  LRname &lt;- \"LearnRate\"\n  sLRname &lt;- \"Slot_LearnRate\"\n  Slot &lt;- Slot %&gt;%\n    group_by(Slot_ID) %&gt;%\n    mutate( !!sLRname := mean(.data[[LRname]], na.rm = TRUE),\n            Slot_Duration := ST) %&gt;%\n    ungroup()\n  return(Slot)\n}\n\n\nOutput\n\nA random Slot-Population with Slot ID’s which marks the pairs, learn rate and duration of the Slot defined by pairs\n\n\nCodeSlot &lt;- set_SlotPar(Slot = Slot, ST = 1)\nSlot\n\n# A tibble: 4 × 7\n     ID Knowledge LearnRate StudyTime Slot_ID Slot_LearnRate Slot_Duration\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1     4     0.526         1         1       1              1             1\n2     3     0.526         1         1       2              1             1\n3     2     0.526         1         1       1              1             1\n4     1     0.526         1         1       2              1             1\n\n\nLearning by Slots\nLearning with a exponential learn rate defined by pairs\nNeeds\n\nA Slot-Population with several paired Agents defined by Slot-ID’s. Prepaerd by the function set_SlotPar()\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodelearn_Slot &lt;- function(Slot = Slot,\n                       Typ = FALSE) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  LRname &lt;- \"Slot_LearnRate\"\n  STname &lt;- \"Slot_Duration\"\n  K &lt;- Slot[[Kname]]\n  LR &lt;- Slot[[LRname]]\n  ST &lt;- Slot[[STname]]\n\n  T0 &lt;- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K &lt;- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  Slot &lt;- set_Knowledge(Pop = Slot, Typ = Typ, K = K)\n  Slot &lt;- update_StudyTime(Pop = Slot, dT = ST)\n  return(Slot)\n}\n\n\nOutput\n\nSlot-Population with updated Knowledge\n\n\nCodeSlot &lt;- learn_Slot(Slot = Slot)\nSlot\n\n# A tibble: 4 × 7\n     ID Knowledge LearnRate StudyTime Slot_ID Slot_LearnRate Slot_Duration\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1     4     0.679         1         2       1              1             1\n2     3     0.679         1         2       2              1             1\n3     2     0.679         1         2       1              1             1\n4     1     0.679         1         2       2              1             1\n\nCodePop &lt;- int_SubPop(SubPop = Slot, Pop = Pop)\nPop\n\n# A tibble: 5 × 4\n     ID Knowledge LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1     0.679         1         2\n2     2     0.679         1         2\n3     3     0.679         1         2\n4     4     0.679         1         2\n5     5     0.526         1         1",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#plots",
    "href": "Project/sketchbook03.html#plots",
    "title": "Grouped in Slots",
    "section": "Plots",
    "text": "Plots\nPlot Timeline\nNeeds\n\nA Timeline from get_Timeline\n\n\nCodeplt_Timeline &lt;- function(TL = Timeline) {\n  ggplot(data = TL, aes(x = Time)) +\n  geom_line(aes(y = Knowledge, group = ID, color = \"Agents\"), \n            alpha = 0.5,\n            linetype = \"solid\") +\n  geom_line(aes(y = Knowledge_mean, color = \"Mean\"),\n            linetype = \"solid\")  +\n  geom_line(aes(y = Knowledge_median, color = \"Median\"),\n            linetype = \"dashed\") +\n  ggtitle(\"Timeline\") +\n  xlab(\"Number of Slots\") +\n  ylab(\"Knowledge\") +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, 0.2)\n  ) +\n  scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Mean\" = \"black\", \"Median\" = \"black\"),\n    labels = c(\"Agents\" = \"Agents\", \"Mean\" = \"Mean\", \"Median\" = \"Median\")\n  ) +\n  theme_light() +\n  theme(legend.title = element_blank(),\n        legend.position = \"top\",\n        legend.justification = \"left\"\n        )\n}\n\n\nOutput\n\nggplot2",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook03.html#special-cases",
    "href": "Project/sketchbook03.html#special-cases",
    "title": "Grouped in Slots",
    "section": "… Special Cases",
    "text": "… Special Cases\nOnly one Agent with Knowledge (0.8)\n\nCodeK &lt;- 0           # Knowledge\n\nPop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge( Pop = Pop, K = K )\nPop[ID == 1, \"Knowledge\"] &lt;- 0.8\nPop\n\n# A tibble: 50 × 2\n      ID Knowledge\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1       0.8\n 2     2       0  \n 3     3       0  \n 4     4       0  \n 5     5       0  \n 6     6       0  \n 7     7       0  \n 8     8       0  \n 9     9       0  \n10    10       0  \n# ℹ 40 more rows\n\nCoderes &lt;- sim_Slot(Pop = Pop,\n                psize = psize,\n                ST = 1,\n                STn = STn)\n\nres$Pop\n\n# A tibble: 50 × 4\n      ID Knowledge LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1     0.864     0.432       152\n 2     2     0.825     0.413       162\n 3     3     0.817     0.409       156\n 4     4     0.816     0.408       159\n 5     5     0.817     0.408       154\n 6     6     0.821     0.411       161\n 7     7     0.820     0.410       157\n 8     8     0.817     0.408       162\n 9     9     0.825     0.413       168\n10    10     0.828     0.414       168\n# ℹ 40 more rows\n\nCodeplt_Timeline(res$TL)",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Grouped in Slots"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html",
    "href": "Project/sketchbook01.html",
    "title": "with updated learn rate",
    "section": "",
    "text": "First and foremost, the distribution of information and knowledge should have something to do with learning. So I start with an exponential learning curve, which is easy to implement.\nIt does not seem realistic that the learning rate will remain constant over time. Therefore, the learn rate is redefined on the basis of current knowledge. In the absence of better knowledge, a factor of 0.5 is used.",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html#population-for-testing-the-functions",
    "href": "Project/sketchbook01.html#population-for-testing-the-functions",
    "title": "with updated learn rate",
    "section": "Population for testing the Functions",
    "text": "Population for testing the Functions\n\nCodenA = 5            # number of Agents\nID = seq_len(nA)  # ID of the Agents\n\nPop &lt;- tibble( ID = ID )\nPop\n\n# A tibble: 5 × 1\n     ID\n  &lt;int&gt;\n1     1\n2     2\n3     3\n4     4\n5     5",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html#knowledge",
    "href": "Project/sketchbook01.html#knowledge",
    "title": "with updated learn rate",
    "section": "Knowledge",
    "text": "Knowledge\nFunctions to set and update Knowledge\nSet Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the Knowledge (K) between 0 and 1. could be a scalar or e vector with the same length as the Population\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodeset_Knowledge &lt;- function(Pop = Pop,\n                          Typ = FALSE,\n                          K = Knowledge) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate(!!Kname := K)\n  } else {\n    Pop[[Kname]] &lt;- K\n  }\n  Pop &lt;- Pop %&gt;%\n\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeK &lt;- seq_len(nA)/5\n\nPop &lt;- set_Knowledge( Pop = Pop, K = 0.5 )\nPop &lt;- set_Knowledge( Pop = Pop, Typ = \"A\", K = K )\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge Knowledge_A\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1     1       0.5         0.2\n2     2       0.5         0.4\n3     3       0.5         0.6\n4     4       0.5         0.8\n5     5       0.5         1  \n\n\nUpdate Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value to add to the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 0 is used to add\nA value to multiplie (fac) the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 1 is used for the multiplikation\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe add operation is always used first!\nIf the Knowledge is not defined before it will be generated with the start value (add) and the multiplication with the value (fac)\n\n\nCodeupdate_Knowledge &lt;- function(Pop = Pop,\n                            Typ = FALSE,\n                            add = 0,\n                            fac = 1) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := ( .data[[Kname]] + add ) * fac )\n  } else {\n    Pop &lt;- set_Knowledge(Pop = Pop, K = add, Typ = Typ)\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := .data[[Kname]] * fac )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeadd &lt;- seq_len(nA)/20\nfac &lt;- seq_len(nA)/10 \n\nPop &lt;- update_Knowledge( Pop = Pop, add = add ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"A\", fac = fac ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"B\", add = add, fac = fac ) \nPop\n\n# A tibble: 5 × 4\n     ID Knowledge Knowledge_A Knowledge_B\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1     1      0.55        0.02       0.005\n2     2      0.6         0.08       0.02 \n3     3      0.65        0.18       0.045\n4     4      0.7         0.32       0.08 \n5     5      0.75        0.5        0.125",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html#learnrate",
    "href": "Project/sketchbook01.html#learnrate",
    "title": "with updated learn rate",
    "section": "LearnRate",
    "text": "LearnRate\nFunctions to set and update the learn rate\nSet LearnRate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the learn rate (LR) greater than 0 and up to 1. could be a scalar or e vector with the same length as the Population\nHints\n\nLernRate 0 leads to Problems so it ist limited it to 1E-3\n\n\nCodeset_LearnRate &lt;- function(Pop = Pop,\n                          LR = LearnRate) {\n  LRname &lt;- \"LearnRate\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!LRname := LR,\n           !!LRname := pmax(.data[[LRname]],1E-3))\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodeLR &lt;- seq_len(nA)/5  \nPop &lt;- set_LearnRate( Pop = Pop, LR = 1 ) \nPop\n\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005         1\n2     2      0.6         0.08       0.02          1\n3     3      0.65        0.18       0.045         1\n4     4      0.7         0.32       0.08          1\n5     5      0.75        0.5        0.125         1\n\n\nUpdate LearnRate by Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe learn rate is defined as 50% of the Knowledge for each Agent\n\n\nCodeupdate_LearnRate_Knowledge &lt;- function(Pop = Pop,\n                                       Typ = FALSE) {\n  LR &lt;- \"LearnRate\"\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!LR := .data[[Kname]] * 0.5 )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodePop &lt;- update_LearnRate_Knowledge( Pop = Pop )  \nPop\n\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275\n2     2      0.6         0.08       0.02      0.3  \n3     3      0.65        0.18       0.045     0.325\n4     4      0.7         0.32       0.08      0.35 \n5     5      0.75        0.5        0.125     0.375",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html#studytime",
    "href": "Project/sketchbook01.html#studytime",
    "title": "with updated learn rate",
    "section": "StudyTime",
    "text": "StudyTime\nFunctions to set and update the StudyTime\nSet StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the StudyTime (ST). could be a scalar or a vector with the same length as the Population\nHints\n\nIf StudyTime isn’t given the Population will be initialising with 0\n\n\nCodeset_StudyTime &lt;- function(Pop = Pop,\n                          ST = 0) {\n  STname &lt;- \"StudyTime\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!STname := ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- set_StudyTime( Pop = Pop, ST = 3)  \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         3\n2     2      0.6         0.08       0.02      0.3           3\n3     3      0.65        0.18       0.045     0.325         3\n4     4      0.7         0.32       0.08      0.35          3\n5     5      0.75        0.5        0.125     0.375         3\n\n\nUpdate StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and StudyTime\nA Time (dT) that should added.\nHints\n\nIf StudyTime isn’t defined in Population it will be initialising with dT\n\n\nCodeupdate_StudyTime &lt;- function(Pop = Pop,\n                             dT = TimeToAdd) {\n  STname &lt;- \"StudyTime\"\n  if (STname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!STname := .data[[STname]] + dT )\n  } else {\n    Pop &lt;- set_StudyTime(Pop = Pop, ST = dT )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- update_StudyTime( Pop = Pop, dT = 1)   \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     2      0.6         0.08       0.02      0.3           4\n3     3      0.65        0.18       0.045     0.325         4\n4     4      0.7         0.32       0.08      0.35          4\n5     5      0.75        0.5        0.125     0.375         4",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html#timelines",
    "href": "Project/sketchbook01.html#timelines",
    "title": "with updated learn rate",
    "section": "Timelines",
    "text": "Timelines\nsaving Timelines during Simulations\nGet Agents-Timelines\nNeeds\n\nA containername for the Timeline\nA value for the Time\nA Population (Pop) with several Agents defined by ID’s\nA colname from the Population which should followed ver Time\noptional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\nCodeget_Timeline &lt;- function(TL = Timeline,\n                          Time = 0,\n                          Pop = Pop,\n                          Info = name,\n                          Sum = 0) {\n  TLadd &lt;- tibble( ID = Pop[[\"ID\"]],\n                   Time = Time,\n                   !!Info := Pop[[Info]])\n  if (Sum == 1) {\n    Sumname1 &lt;- paste(Info,\"mean\", sep = \"_\")\n    Sumname2 &lt;- paste(Info,\"median\", sep = \"_\")\n    TLadd &lt;- TLadd %&gt;%\n        mutate(!!Sumname1 := mean(Pop[[Info]], na.rm = TRUE),\n               !!Sumname2 := median(Pop[[Info]], na.rm = TRUE))\n    }\n  if (Time == 0) {\n    TL &lt;- TLadd\n  } else {\n    TL &lt;- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n\n\nOutput\n\nA Timeline in a long format\n\n\nCodeTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 0, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 1, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline\n\n# A tibble: 10 × 5\n      ID  Time Knowledge Knowledge_mean Knowledge_median\n   &lt;int&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n 1     1     0      0.55           0.65             0.65\n 2     2     0      0.6            0.65             0.65\n 3     3     0      0.65           0.65             0.65\n 4     4     0      0.7            0.65             0.65\n 5     5     0      0.75           0.65             0.65\n 6     1     1      0.55           0.65             0.65\n 7     2     1      0.6            0.65             0.65\n 8     3     1      0.65           0.65             0.65\n 9     4     1      0.7            0.65             0.65\n10     5     1      0.75           0.65             0.65",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html#learning",
    "href": "Project/sketchbook01.html#learning",
    "title": "with updated learn rate",
    "section": "Learning",
    "text": "Learning\nLearning with a exponential Lernrate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nA value for the lLearnRate (LR). could be a scalar or e vector with the same length as the Population\nA value for the StudyTime (ST). could be a scalar or e vector with the same length as the Population\nHints\n\nIf LearnRate isn’t given the values from the Population will be used, if this is missing in the Population 0 is used.\n\n\nCodelearn &lt;- function(Pop = Pop,\n                  Typ = FALSE,\n                  LR = FALSE,\n                  ST = StudyTime) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    K &lt;- Pop[[Kname]]\n  }\n  if (LR == FALSE) {\n    if (\"LearnRate\" %in% colnames(Pop)) {\n      LR &lt;- Pop[[\"LearnRate\"]]\n    }\n  }\n\n  T0 &lt;- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K &lt;- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  \n  Pop &lt;- set_Knowledge(Pop = Pop, Typ = Typ, K = K)\n  Pop &lt;- update_StudyTime(Pop = Pop, dT = ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with updated Knowledge\n\n\nCodePop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge(Pop = Pop, K = 0.1)\nPop &lt;- set_LearnRate(Pop = Pop, LR = 1)\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge LearnRate\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1       0.1         1\n2     2       0.1         1\n3     3       0.1         1\n4     4       0.1         1\n5     5       0.1         1\n\nCodePop &lt;- learn( Pop = Pop, ST = 10)\nPop\n\n# A tibble: 5 × 4\n     ID Knowledge LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.91         1        10\n2     2      0.91         1        10\n3     3      0.91         1        10\n4     4      0.91         1        10\n5     5      0.91         1        10",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/sketchbook01.html#plots",
    "href": "Project/sketchbook01.html#plots",
    "title": "with updated learn rate",
    "section": "Plots",
    "text": "Plots\nPlot Timeline\nNeeds\n\nA Timeline from get_Timeline\n\n\nCodeplt_Timeline &lt;- function(TL = Timeline) {\n  ggplot(data = TL, aes(x = Time)) +\n  geom_line(aes(y = Knowledge, group = ID, color = \"Agents\"), \n            alpha = 0.5,\n            linetype = \"solid\") +\n  geom_line(aes(y = Knowledge_mean, color = \"Mean\"),\n            linetype = \"solid\")  +\n  geom_line(aes(y = Knowledge_median, color = \"Median\"),\n            linetype = \"dashed\") +\n  ggtitle(\"Timeline\") +\n  xlab(\"Number of iterations\") +\n  ylab(\"Knowledge\") +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, 0.2)\n  ) +\n    scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Mean\" = \"black\", \"Median\" = \"black\"),\n    labels = c(\"Agents\" = \"Agents\", \"Mean\" = \"Mean\", \"Median\" = \"Median\")\n  ) +\n  theme_light() +\n  theme(legend.title = element_blank(),\n        legend.position = c(1, 0),\n        legend.justification = c(1, 0))\n}",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "with updated learn rate"
    ]
  },
  {
    "objectID": "Project/index.html",
    "href": "Project/index.html",
    "title": "How knowledge is distributed  in the population? Mayby!!",
    "section": "",
    "text": "First and foremost, the distribution of information and knowledge should have something to do with learning. So I start with an exponential learning curve, which is easy to implement.\n\n\nIt does not seem realistic that the learn rate will remain constant over time. Therefore, the learning rate is redefined on the basis of current knowledge. In the absence of better knowledge, a factor of 0.5 is used.\n\n\nThe basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.\n\n\n\n\nIf it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.\n\n\nA daily structure with a certain number of working hours is introduced to enable better interpretation of the results.\n\n\n\nNow it seems to be time to add other aspects. At first it seems central that different areas of knowledge should be possible.",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!"
    ]
  },
  {
    "objectID": "Project/index.html#simple-learning-curve",
    "href": "Project/index.html#simple-learning-curve",
    "title": "How knowledge is distributed  in the population? Mayby!!",
    "section": "",
    "text": "It does not seem realistic that the learn rate will remain constant over time. Therefore, the learning rate is redefined on the basis of current knowledge. In the absence of better knowledge, a factor of 0.5 is used.\n\n\nThe basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!"
    ]
  },
  {
    "objectID": "Project/index.html#simulating-random-meetings",
    "href": "Project/index.html#simulating-random-meetings",
    "title": "How knowledge is distributed  in the population? Mayby!!",
    "section": "",
    "text": "If it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.\n\n\nA daily structure with a certain number of working hours is introduced to enable better interpretation of the results.\n\n\n\nNow it seems to be time to add other aspects. At first it seems central that different areas of knowledge should be possible.",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html",
    "href": "hw2/sketchbook.html",
    "title": "Sketchbook",
    "section": "",
    "text": "at an agent model with the information from the lesson\n\nCodeSplitHalve &lt;- function (nAgent, maxExchange, Money_mean=1000, Money_sd=300) {\n  df &lt;- data.frame(ID=seq(1,nAgent),\n                   nE=0,\n                   Ms=rnorm(nAgent, mean = Money_mean, sd = Money_sd),\n                   MT=0,Me=0)\n  df$Me &lt;- df$Ms\n  iE &lt;- 1\n  while (iE &lt;= maxExchange) {\n    df$MT &lt;- df$Me\n    rdf &lt;- sample(df[df$nE &lt; iE,\"ID\"], size=2)\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"] &lt;-\n      df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"]+1\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"Me\"] &lt;-\n      sum(df[(df$ID == rdf[1] | df$ID == rdf[2]),\"MT\"])/2\n    if (NROW(df[df$nE &lt; iE,\"ID\"]) &lt; 2) {\n      iE &lt;- iE+1\n      }\n  }\n  return(df)\n}\n\n\nPresentation of the results\n\nCodedf &lt;- SplitHalve(1000,30)\n\nsummary(df)\n\n       ID               nE           Ms                MT             Me      \n Min.   :   1.0   Min.   :30   Min.   : -37.88   Min.   :1014   Min.   :1014  \n 1st Qu.: 250.8   1st Qu.:30   1st Qu.: 806.68   1st Qu.:1014   1st Qu.:1014  \n Median : 500.5   Median :30   Median :1016.58   Median :1014   Median :1014  \n Mean   : 500.5   Mean   :30   Mean   :1014.29   Mean   :1014   Mean   :1014  \n 3rd Qu.: 750.2   3rd Qu.:30   3rd Qu.:1215.53   3rd Qu.:1014   3rd Qu.:1014  \n Max.   :1000.0   Max.   :30   Max.   :2049.86   Max.   :1014   Max.   :1014  \n\nCodehist(df$Ms, xlab=\"Money\",main=\"Histogram for split-halve\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)*1.1)),ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\nCodeplot(df$ID,df$nE,main=\"Number of Changes\",\n     xlab=\"ID\",ylab=\"Number of Changes\",\n     col=rgb(1,0,0,0.2))\n\n\n\n\n\n\n\nAfter looking at the code on https://github.com/norvig/pytudes/blob/main/ipynb/Economics.ipynb#js-repo-pjax-container there are some differences between my idea and the paper! These will now be adapted step by step.\n\nthe restriction that everyone finds an change partner at the same time will be lifted. In addition, the number and order of changes will also be removed.\n\nCodeSplitHalve2 &lt;- function(nAgent,maxExchange,Money_mean=1000,Money_sd=300) {\n  df &lt;- data.frame(ID=seq(1,nAgent),\n                   nE=0,\n                   Ms=rnorm(nAgent, mean = Money_mean, sd = Money_sd),\n                   MT=0,Me=0)\n  df$Me &lt;- df$Ms\n  iE &lt;- 1\n  while (iE &lt;= maxExchange) {\n    df$MT &lt;- df$Me\n    rdf &lt;- sample(df$ID, size=2)\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"] &lt;-\n      df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"]+1\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"Me\"] &lt;-\n      sum(df[(df$ID == rdf[1] | df$ID == rdf[2]),\"MT\"])/2\n    iE &lt;- iE+1\n  }\n  return(df)\n}\n\n\nPresentation of the results\n\nCodedf &lt;- SplitHalve2(1000,15000)\n\nsummary(df)\n\n       ID               nE           Ms                MT       \n Min.   :   1.0   Min.   :16   Min.   : -46.16   Min.   :994.9  \n 1st Qu.: 250.8   1st Qu.:26   1st Qu.: 779.75   1st Qu.:995.6  \n Median : 500.5   Median :30   Median : 991.46   Median :995.7  \n Mean   : 500.5   Mean   :30   Mean   : 995.70   Mean   :995.7  \n 3rd Qu.: 750.2   3rd Qu.:34   3rd Qu.:1212.24   3rd Qu.:995.8  \n Max.   :1000.0   Max.   :47   Max.   :2107.43   Max.   :997.0  \n       Me       \n Min.   :994.9  \n 1st Qu.:995.6  \n Median :995.7  \n Mean   :995.7  \n 3rd Qu.:995.8  \n Max.   :997.0  \n\nCodehist(df$Ms, xlab=\"Money\",main=\"Histogram for split-halve\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)*1.1))*1.1,ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\nCodeplot(df$ID,df$nE,main=\"Number of Changes\",\n     xlab=\"ID\",ylab=\"Number of Changes\",\n     col=rgb(1,0,0,0.2))\n\n\n\n\n\n\n\n\nis to change from a half-split to a random-split. In the hope that this can reflect the results of the paper\n\nCodeSplitRandom &lt;- function(nAgent,maxExchange,Money_mean=1000,Money_sd=300) {\n  df &lt;- data.frame(ID=seq(1,nAgent),\n                   nE=0,\n                   Ms=rnorm(nAgent, mean = Money_mean, sd = Money_sd),\n                   MT=0,Me=0)\n  df$Me &lt;- df$Ms\n  iE &lt;- 1\n  while (iE &lt;= maxExchange) {\n    df$MT &lt;- df$Me\n    rdf &lt;- sample(df$ID, size=2)\n    rds &lt;- sample(0:100, size=1)/100\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"] &lt;-\n      df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"]+1\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"Me\"] &lt;-\n      sum(df[(df$ID == rdf[1] | df$ID == rdf[2]),\"MT\"])*c(rds,1-rds)\n    iE &lt;- iE+1\n  }\n  return(df)\n}\n\n\n\nhere are the results for the random-split\n\nCodedf &lt;- SplitRandom(1000,15000)\n\nsummary(df)\n\n       ID               nE           Ms               MT        \n Min.   :   1.0   Min.   :15   Min.   : 119.1   Min.   :   0.0  \n 1st Qu.: 250.8   1st Qu.:26   1st Qu.: 803.9   1st Qu.: 299.2  \n Median : 500.5   Median :30   Median : 996.0   Median : 690.7  \n Mean   : 500.5   Mean   :30   Mean   :1000.2   Mean   :1000.2  \n 3rd Qu.: 750.2   3rd Qu.:34   3rd Qu.:1197.8   3rd Qu.:1361.5  \n Max.   :1000.0   Max.   :51   Max.   :1994.2   Max.   :6565.6  \n       Me        \n Min.   :   0.0  \n 1st Qu.: 299.2  \n Median : 691.6  \n Mean   :1000.2  \n 3rd Qu.:1357.2  \n Max.   :6565.6  \n\nCodehist(df$Ms, xlab=\"Money\",main=\"Histogram for split-random\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)*1.1)),ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\nCodeplot(df$ID,df$nE,main=\"Number of Changes\",\n     xlab=\"ID\",ylab=\"Number of Changes\",\n     col=rgb(1,0,0,0.2))",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#first-of-all",
    "href": "hw2/sketchbook.html#first-of-all",
    "title": "Sketchbook",
    "section": "",
    "text": "the restriction that everyone finds an change partner at the same time will be lifted. In addition, the number and order of changes will also be removed.\n\nCodeSplitHalve2 &lt;- function(nAgent,maxExchange,Money_mean=1000,Money_sd=300) {\n  df &lt;- data.frame(ID=seq(1,nAgent),\n                   nE=0,\n                   Ms=rnorm(nAgent, mean = Money_mean, sd = Money_sd),\n                   MT=0,Me=0)\n  df$Me &lt;- df$Ms\n  iE &lt;- 1\n  while (iE &lt;= maxExchange) {\n    df$MT &lt;- df$Me\n    rdf &lt;- sample(df$ID, size=2)\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"] &lt;-\n      df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"]+1\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"Me\"] &lt;-\n      sum(df[(df$ID == rdf[1] | df$ID == rdf[2]),\"MT\"])/2\n    iE &lt;- iE+1\n  }\n  return(df)\n}\n\n\nPresentation of the results\n\nCodedf &lt;- SplitHalve2(1000,15000)\n\nsummary(df)\n\n       ID               nE           Ms                MT       \n Min.   :   1.0   Min.   :16   Min.   : -46.16   Min.   :994.9  \n 1st Qu.: 250.8   1st Qu.:26   1st Qu.: 779.75   1st Qu.:995.6  \n Median : 500.5   Median :30   Median : 991.46   Median :995.7  \n Mean   : 500.5   Mean   :30   Mean   : 995.70   Mean   :995.7  \n 3rd Qu.: 750.2   3rd Qu.:34   3rd Qu.:1212.24   3rd Qu.:995.8  \n Max.   :1000.0   Max.   :47   Max.   :2107.43   Max.   :997.0  \n       Me       \n Min.   :994.9  \n 1st Qu.:995.6  \n Median :995.7  \n Mean   :995.7  \n 3rd Qu.:995.8  \n Max.   :997.0  \n\nCodehist(df$Ms, xlab=\"Money\",main=\"Histogram for split-halve\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)*1.1))*1.1,ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\nCodeplot(df$ID,df$nE,main=\"Number of Changes\",\n     xlab=\"ID\",ylab=\"Number of Changes\",\n     col=rgb(1,0,0,0.2))",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#the-next-step",
    "href": "hw2/sketchbook.html#the-next-step",
    "title": "Sketchbook",
    "section": "",
    "text": "is to change from a half-split to a random-split. In the hope that this can reflect the results of the paper\n\nCodeSplitRandom &lt;- function(nAgent,maxExchange,Money_mean=1000,Money_sd=300) {\n  df &lt;- data.frame(ID=seq(1,nAgent),\n                   nE=0,\n                   Ms=rnorm(nAgent, mean = Money_mean, sd = Money_sd),\n                   MT=0,Me=0)\n  df$Me &lt;- df$Ms\n  iE &lt;- 1\n  while (iE &lt;= maxExchange) {\n    df$MT &lt;- df$Me\n    rdf &lt;- sample(df$ID, size=2)\n    rds &lt;- sample(0:100, size=1)/100\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"] &lt;-\n      df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"]+1\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"Me\"] &lt;-\n      sum(df[(df$ID == rdf[1] | df$ID == rdf[2]),\"MT\"])*c(rds,1-rds)\n    iE &lt;- iE+1\n  }\n  return(df)\n}\n\n\n\nhere are the results for the random-split\n\nCodedf &lt;- SplitRandom(1000,15000)\n\nsummary(df)\n\n       ID               nE           Ms               MT        \n Min.   :   1.0   Min.   :15   Min.   : 119.1   Min.   :   0.0  \n 1st Qu.: 250.8   1st Qu.:26   1st Qu.: 803.9   1st Qu.: 299.2  \n Median : 500.5   Median :30   Median : 996.0   Median : 690.7  \n Mean   : 500.5   Mean   :30   Mean   :1000.2   Mean   :1000.2  \n 3rd Qu.: 750.2   3rd Qu.:34   3rd Qu.:1197.8   3rd Qu.:1361.5  \n Max.   :1000.0   Max.   :51   Max.   :1994.2   Max.   :6565.6  \n       Me        \n Min.   :   0.0  \n 1st Qu.: 299.2  \n Median : 691.6  \n Mean   :1000.2  \n 3rd Qu.:1357.2  \n Max.   :6565.6  \n\nCodehist(df$Ms, xlab=\"Money\",main=\"Histogram for split-random\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)*1.1)),ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\nCodeplot(df$ID,df$nE,main=\"Number of Changes\",\n     xlab=\"ID\",ylab=\"Number of Changes\",\n     col=rgb(1,0,0,0.2))",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#idea-from-a-proverb",
    "href": "hw2/sketchbook.html#idea-from-a-proverb",
    "title": "Sketchbook",
    "section": "Idea from a proverb",
    "text": "Idea from a proverb\ncan it be that it is harder to get money back once you have lost all the money “money goes to money”?\nas a first attempt, the random function is limited between 30% and 70%\n\nCodeSplitRandom2 &lt;- function(nAgent,maxExchange,Money_mean=1000,Money_sd=300) {\n  df &lt;- data.frame(ID=seq(1,nAgent),\n                   nE=0,\n                   Ms=rnorm(nAgent, mean = Money_mean, sd = Money_sd),\n                   MT=0,Me=0)\n  df$Me &lt;- df$Ms\n  iE &lt;- 1\n  while (iE &lt;= maxExchange) {\n    df$MT &lt;- df$Me\n    rdf &lt;- sample(df$ID, size=2)\n    rds &lt;- sample(30:70, size=1)/100\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"] &lt;-\n      df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"]+1\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"Me\"] &lt;-\n      sum(df[(df$ID == rdf[1] | df$ID == rdf[2]),\"MT\"])*c(rds,1-rds)\n    iE &lt;- iE+1\n  }\n  return(df)\n}\n\n\nthe distribution seems to remain the same as the results here show,\n\nCodedf &lt;- SplitRandom2(1000,15000)\n\nsummary(df)\n\n       ID               nE           Ms                MT        \n Min.   :   1.0   Min.   :13   Min.   :  55.18   Min.   : 298.8  \n 1st Qu.: 250.8   1st Qu.:26   1st Qu.: 785.83   1st Qu.: 732.5  \n Median : 500.5   Median :30   Median : 977.53   Median : 937.5  \n Mean   : 500.5   Mean   :30   Mean   : 985.86   Mean   : 985.9  \n 3rd Qu.: 750.2   3rd Qu.:33   3rd Qu.:1194.89   3rd Qu.:1202.6  \n Max.   :1000.0   Max.   :49   Max.   :1923.52   Max.   :2756.2  \n       Me        \n Min.   : 298.8  \n 1st Qu.: 732.3  \n Median : 937.5  \n Mean   : 985.9  \n 3rd Qu.:1202.6  \n Max.   :2756.2  \n\nCodehist(df$Ms, xlab=\"Money\",main=\"Histogram for split-random (30%-70%)\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)*1.1)),ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\n\nOn closer inspection, however, this does not help to understand the problem.",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#back-to-a-more-restrictive-simulation",
    "href": "hw2/sketchbook.html#back-to-a-more-restrictive-simulation",
    "title": "Sketchbook",
    "section": "Back to a more restrictive Simulation",
    "text": "Back to a more restrictive Simulation\nThat’s why I’m going back to my more restrictive Simulation where everyone has to have a meeting first so that someone can have a second meeting. This should help to understand how the timing of the meetings could have an influence…\n\nCodeSplitRandomR &lt;- function(nAgent,maxExchange,Money_mean=1000,Money_sd=300) {\n  df &lt;- data.frame(ID=seq(1,nAgent),\n                   nE=0,\n                   Ms=rnorm(nAgent, mean = Money_mean, sd = Money_sd),\n                   MT=0,Me=0)\n  df$Me &lt;- df$Ms\n  iE &lt;- 1\n  while (iE &lt;= maxExchange) {\n    df$MT &lt;- df$Me\n    rdf &lt;- sample(df[df$nE &lt; iE,\"ID\"], size=2)\n    rds &lt;- sample(0:100, size=1)/100\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"] &lt;-\n      df[(df$ID == rdf[1] | df$ID == rdf[2]),\"nE\"]+1\n    df[(df$ID == rdf[1] | df$ID == rdf[2]),\"Me\"] &lt;-\n      sum(df[(df$ID == rdf[1] | df$ID == rdf[2]),\"MT\"])*c(rds,1-rds)\n    if (NROW(df[df$nE &lt; iE,\"ID\"]) &lt; 2) {\n      iE &lt;- iE+1\n    }\n  }\n  return(df)\n}\n\n\nTime does not seem to have any effect either\n\nCodedf &lt;- SplitRandomR(1000,30)\n\nsummary(df)\n\n       ID               nE           Ms                 MT        \n Min.   :   1.0   Min.   :30   Min.   :  -6.583   Min.   :   0.0  \n 1st Qu.: 250.8   1st Qu.:30   1st Qu.: 784.234   1st Qu.: 280.6  \n Median : 500.5   Median :30   Median : 990.719   Median : 651.0  \n Mean   : 500.5   Mean   :30   Mean   : 975.880   Mean   : 975.9  \n 3rd Qu.: 750.2   3rd Qu.:30   3rd Qu.:1171.659   3rd Qu.:1358.7  \n Max.   :1000.0   Max.   :30   Max.   :1906.833   Max.   :8596.2  \n       Me        \n Min.   :   0.0  \n 1st Qu.: 280.6  \n Median : 649.9  \n Mean   : 975.9  \n 3rd Qu.:1362.6  \n Max.   :8596.2  \n\nCodehist(df$Ms, xlab=\"Money\",main=\"Histogram for split-random Restricted\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)*1.1)),ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\nCodeplot(df$ID,df$nE,main=\"Number of Changes\",\n     xlab=\"ID\",ylab=\"Number of Changes\",\n     col=rgb(1,0,0,0.2))\n\n\n\n\n\n\n\nBut still why???\nI think I need a simulation where I can save the money history!",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#simple-timehistory",
    "href": "hw2/sketchbook.html#simple-timehistory",
    "title": "Sketchbook",
    "section": "Simple Timehistory",
    "text": "Simple Timehistory\nAfter the first change for all Agents\n\nCodedf &lt;- SplitRandomR(1000,1)\n\nhist(df$Ms, xlab=\"Money\",main=\"Histogram for split-random Restricted\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms))*1.1),ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\n\nAfter the second change for all Agents\n\nCodedf &lt;- SplitRandomR(1000,2)\n\nhist(df$Ms, xlab=\"Money\",main=\"Histogram for split-random Restricted\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df$Me,df$Ms)))*1.1,ylim=c(0,nrow(df)/2))\nhist(df$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#first-exchange",
    "href": "hw2/sketchbook.html#first-exchange",
    "title": "Sketchbook",
    "section": "First Exchange",
    "text": "First Exchange\nIn the first run in this simplified scenario, all agents have the same chance of being above or below 1000.\n\nCodedf1_even &lt;- SplitRandomR(1000,1,1000,0)\n\nhist(df1_even$Ms, xlab=\"Money\",main=\"Histogram for split-random Restricted\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df1_even$Me,df1_even$Ms))*1.1),ylim=c(0,nrow(df1_even)))\nhist(df1_even$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\n\nIn other words, the average value of Money is still 1000. Also the Median. So there should be about 50% agents with more than 1000\n\nCodedf1_summary &lt;- data.frame(\"Mean\"=mean(df1_even$Me),\n                          \"Median\"=median(df1_even$Me),\n                          \"nAover1000\"=nrow(df1_even[df1_even$Me&gt;1000,])) \n                          # number of Agents with more than 1000\ndf1_summary\n\n  Mean Median nAover1000\n1 1000   1000        496",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#second-exchange",
    "href": "hw2/sketchbook.html#second-exchange",
    "title": "Sketchbook",
    "section": "Second Exchange",
    "text": "Second Exchange\nBut what happens now with the second swap!\nto get above 1000 or to stay there you “need” two conditions:\n\nyou have to meet someone who has over 1000 (p~0.5)\nyou must also emerge from the meeting as the winner (p~0.5)\n\nThe chance of staying or getting above 1000 is only around 25%.\nI know this isn’t formally correct, but it should explain the mechanism!\nThe real value should be under 50% (see conclusion)\n\nCodedf2_even &lt;- SplitRandomR(1000,2,1000,0)\n\nhist(df2_even$Ms, xlab=\"Money\",main=\"Histogram for split-random Restricted\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df2_even$Me,df2_even$Ms))*1.1),ylim=c(0,nrow(df2_even)))\nhist(df2_even$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\n\nafter the second round, the mean value is still 1000, but the median is now lower!\n\nCodedf2_summary &lt;- data.frame(\"Mean\"=mean(df2_even$Me),\n                          \"Median\"=median(df2_even$Me),\n                          \"nAover1000\"=nrow(df2_even[df2_even$Me&gt;1000,])) \n                          # number of Agents with more than 1000\ndf2_summary\n\n  Mean Median nAover1000\n1 1000  823.8        423\n\n\nin other words, meeting someone who has over 1000 is now even smaller for the next round.",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#third-exchange",
    "href": "hw2/sketchbook.html#third-exchange",
    "title": "Sketchbook",
    "section": "Third Exchange",
    "text": "Third Exchange\n\nCodedf3_even &lt;- SplitRandomR(1000,3,1000,0)\n\nhist(df3_even$Ms, xlab=\"Money\",main=\"Histogram for split-random Restricted\",\n     col=rgb(0,0,1,0.2),\n     xlim=c(0,max(c(df3_even$Me,df3_even$Ms))*1.1),ylim=c(0,nrow(df3_even)))\nhist(df3_even$Me, col=rgb(0,1,0,0.2),\n     add=TRUE)\nlegend('topright', c('Money befor', 'Money after'),\n       fill=c(rgb(0,0,1,0.5), rgb(0,1,0,0.2)))\n\n\n\n\n\n\n\nAs assumed, the median is again smaller, as is the number of agents with more than 1000\n\nCodedf3_summary &lt;- data.frame(\"Mean\"=mean(df3_even$Me),\n                          \"Median\"=median(df3_even$Me),\n                          \"nAover1000\"=nrow(df3_even[df3_even$Me&gt;1000,])) \n                          # number of Agents with more than 1000\ndf3_summary\n\n  Mean  Median nAover1000\n1 1000 784.574        401\n\n\nfrom here on it seems clear that it tends towards the distribution with further steps",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#computing-the-probability",
    "href": "hw2/sketchbook.html#computing-the-probability",
    "title": "Sketchbook",
    "section": "Computing the Probability",
    "text": "Computing the Probability\n\nCodewin_stab_prob &lt;- function( Moneyvec ) {\n  df &lt;- data.frame(Money=Moneyvec,\n                   winprobability=0)\n  MMA &lt;- median(df[, 1])\n  for(i in 1:nrow(df)) {\n    MA &lt;- df[i,1]\n    MoA &lt;- df[c(-i),1]\n    WP &lt;- MoA*0\n    for(ii in 1:NROW(MoA)) {\n      Sum_M &lt;- MA + MoA[ii]\n      if (Sum_M == 0) {\n        WP[ii] &lt;- 1.00\n      } else {\n        WP[ii] &lt;- WP[ii] &lt;- 1-min(1, MMA/Sum_M)\n      }\n    }\n    df[i,2] &lt;- round(mean(WP), digits =3)\n  }\n  return(df)\n}",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/sketchbook.html#testing",
    "href": "hw2/sketchbook.html#testing",
    "title": "Sketchbook",
    "section": "Testing",
    "text": "Testing\nBefore the first Exchange it should be 0.5 for all Agents\n\nCodeprob_start &lt;- win_stab_prob(df1_even$Ms)[, 2]\nplot(prob_start,\n     type = \"l\",\n     lwd = 5,\n     main=\"Getting over the Median\",\n     xlab=\"ID\",\n     ylab=\"Probability\",\n     ylim=c(0,1),\n     col=rgb(0,0,1,1),)\n\n\n\n\n\n\n\nafter that first round it depends from the Money of the Agent.\n\nCodeprob_after1 &lt;- win_stab_prob(df1_even$Me)\nprob_after1 &lt;- prob_after1[order(prob_after1$Money, decreasing = FALSE), ]\npopMean &lt;- mean(prob_after1[, 2])\nMoney_Med &lt;- median(prob_after1[, 1])\nplot(prob_after1,\n     lwd = 5,\n     main=c(\"Populationmean\", popMean),\n     xlab=\"Money\",\n     ylab=\"Probability\",\n     ylim=c(0,1),\n     col=rgb(0,0,1,0.1))\n     abline(h=popMean,\n            col =rgb(1,0,0,1))\n     abline(v=Money_Med,\n            col =rgb(1,0,0,1))\n\n\n\n\n\n\n\nafter the second round\n\nCodeprob_after2 &lt;- win_stab_prob(df2_even$Me)\nprob_after2 &lt;- prob_after2[order(prob_after2$Money, decreasing = FALSE), ]\npopMean &lt;- mean(prob_after2[, 2])\nMoney_Med &lt;- median(prob_after2[, 1])\nplot(prob_after2,\n     lwd = 5,\n     main=c(\"Populationmean\", popMean),\n     xlab=\"Money\",\n     ylab=\"Probability\",\n     ylim=c(0,1),\n     col=rgb(0,0,1,0.1))\n     abline(h=popMean,\n            col =rgb(1,0,0,1))\n     abline(v=Money_Med,\n            col =rgb(1,0,0,1))\n\n\n\n\n\n\n\n… third\n\nCodeprob_after3 &lt;- win_stab_prob(df3_even$Me)\nprob_after3 &lt;- prob_after3[order(prob_after3$Money, decreasing = FALSE), ]\npopMean &lt;- mean(prob_after3[, 2])\nMoney_Med &lt;- median(prob_after3[, 1])\nplot(prob_after3,\n     lwd = 5,\n     main=c(\"Populationmean\", popMean),\n     xlab=\"Money\",\n     ylab=\"Probability\",\n     ylim=c(0,1),\n     col=rgb(0,0,1,0.1))\n     abline(h=popMean,\n            col =rgb(1,0,0,1))\n     abline(v=Money_Med,\n            col =rgb(1,0,0,1))\n\n\n\n\n\n\n\n…15th\n\nCodedf15_even &lt;- SplitRandomR(1000,15,1000,0)\n\nprob_after15 &lt;- win_stab_prob(df15_even$Me)\nprob_after15 &lt;- prob_after15[order(prob_after15$Money, decreasing = FALSE), ]\npopMean &lt;- mean(prob_after15[, 2])\nMoney_Med &lt;- median(prob_after15[, 1])\nplot(prob_after15,\n     lwd = 5,\n     main=c(\"Populationmean\", popMean),\n     xlab=\"Money\",\n     ylab=\"Probability\",\n     ylim=c(0,1),\n     col=rgb(0,0,1,0.1))\n     abline(h=popMean,\n            col =rgb(1,0,0,1))\n     abline(v=Money_Med,\n            col =rgb(1,0,0,1))\n\n\n\n\n\n\n\nBe careful, this is not absolutly correct at the moment.\n\nFor one thing, the data are not from a single simulation\nOn the other hand, there are 101 possibilities in the exchange with my simple calculation only 100\n\nFor final results and explanations see notebook(Final)",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Sketchbook"
    ]
  },
  {
    "objectID": "hw2/index.html",
    "href": "hw2/index.html",
    "title": "Assignment 2: Economic Simulation",
    "section": "",
    "text": "Tasks\nThe second assignment has 2 components and you have the next 2 weeks to work on it. \n\nReplicate the first simulation from https://github.com/norvig/pytudes/blob/main/ipynb/Economics.ipynb#js-repo-pjax-container in R\nAttempt to understand why the model produces such inequality by “playing with it”. You would have to first think about why it might do this, describe your thought process, and then change parts of the code, add new visualizations, etc, to see if you can explain why it behaves the way it does. This is going to be quite challenging and creative\n\n\n\nInstructions\nTo do this assignment and submit it you have to:\n\nmake a new folder “hw2” in your existing project folder\ncreate a new quarto document, for example “index.qmd” in the “hw2” folder\nadd “- hw2/index.qmd” to the “_quarto.yml” file sidebar section\nwrite your thoughts as text in the document, r code in R chunks\nRender the notebook to run the code and see the results intermixed with your description\nadd your new files and commit the to git as you make changes\nwhen you are done with the replication part of the assignment, push your changes to github - you will be able to see your results on your github website. Try to finish this first by next week\nresume from step 4 for the second part of the assignment to explore the model\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "hw1/index.html",
    "href": "hw1/index.html",
    "title": "Assignment 1: Hello World",
    "section": "",
    "text": "Hello World that’s my first plot: test\n\nCodehubi &lt;- rnorm(10000, mean = 46, sd = 1)\nhist(hubi)\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Assignment 1: <br>Hello World"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html",
    "href": "hw2/notebook_final3.html",
    "title": "Notebook(Final)",
    "section": "",
    "text": "Final Version\nLoading some Packages for Better Presentation of Results\nCodelibrary(gt)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\n\n\nAttache Paket: 'dplyr'\n\n\nDie folgenden Objekte sind maskiert von 'package:stats':\n\n    filter, lag\n\n\nDie folgenden Objekte sind maskiert von 'package:base':\n\n    intersect, setdiff, setequal, union\n\nCodeset.seed(1)",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#initial-population",
    "href": "hw2/notebook_final3.html#initial-population",
    "title": "Notebook(Final)",
    "section": "Initial Population",
    "text": "Initial Population\nNorm Population\nInitial Populations In line with the paper, a population is generated where the money is normally distributed with a mean of 100.\nTo save computation time, the number of agents is reduced from 5000 to 1500. Additionally, the population is sorted and assigned an ID to track them. Agents with small IDs receive the least money, while agents with large IDs have a lot of money.\n\nCodenA = 1500         # number of Agents\nID = seq_len(nA)  # ID of the Agents\nM0pop = 100       # Mean amount of Money in the Start-Population\n\nPopNorm &lt;- data.frame( ID = ID,\n                       Money= sort(rnorm(nA, mean = M0pop, sd = 0.2 * M0pop))\n                      )\n\n\nEqual Population\nAlso in line with the paper, a second population is generated where all agents start with the same amount of money.\n\nCodePopEqual &lt;- data.frame( ID = ID,\n                       Money = rep(M0pop, times = nA)\n                      )",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#gini-faktor",
    "href": "hw2/notebook_final3.html#gini-faktor",
    "title": "Notebook(Final)",
    "section": "Gini-Faktor",
    "text": "Gini-Faktor\nTo describe the distribution of money in the population, a function is defined to calculate the Gini coefficient.\nNeeds\n\nVector with Money distribution\nOutput\n\nGini-Factor\n\n\nCodegini &lt;- function(VM) {\n  VM &lt;- sort(VM)\n  n &lt;- NROW(VM)\n  numer &lt;- 0\n  for (i in 1:n) {\n    numer &lt;- numer + 2 * i * VM[i]\n  }\n  denom = n * sum(VM)\n  return((numer / denom) - (n + 1) / n)\n}\n\n\nTimeline\nThe same is also implemented as a time function.\nNeeds\n\nMatrix with Money distribution as vector per time\nOutput\n\nVector with Gini-Factor per time\n\n\nCodegini_t &lt;- function(MM) {\n  n &lt;- NCOL(MM)\n  GT &lt;- c(0)\n  for (i in 1:n) {\n    GT[i] &lt;-  gini(MM[,i])\n  }\n  return(GT)\n  }",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#transaction-rule",
    "href": "hw2/notebook_final3.html#transaction-rule",
    "title": "Notebook(Final)",
    "section": "Transaction rule",
    "text": "Transaction rule\nIn line with the paper, a random distribution of money between two agents is defined.\nNeeds\n\nNothing\nOutput\n\nVector with a random number and 1minus this number\n\n\nCodesplitpair &lt;- function(){\n  rn &lt;- runif(1)\n  c(rn,1-rn)\n}\nsplitpair()\n\n[1] 0.8023495 0.1976505",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#probabilities",
    "href": "hw2/notebook_final3.html#probabilities",
    "title": "Notebook(Final)",
    "section": "Probabilities",
    "text": "Probabilities\nSince it was suspected in the sketchbook that the reason for the outcome is the decreasing probability of meeting an agent with more or a lot of money, a function is defined here to calculate various probabilities:\n\nProbability of winning money (probwin)\nProbability of having more money than the current median in the population after the exchange (probmed)\nProbability of having more money than the mean in the population after the exchange (probmean)\n\nNeeds\n\nVector with Money distribution\nOutput\n\nSummary (Sum) with minimum, maximum, median and mean for the given Money and the mention probabilities\nDistribution (Dist) for the same values\n\n\nCodecalc_p_s &lt;- function(VM) {\n  Dist &lt;- data.frame(Money = VM,\n                     probwin = 0,\n                     probmed = 0,\n                     probmean = 0\n                     )\n  Sum &lt;- data.frame(Money = c(min(Dist$Money),\n                              max(Dist$Money),\n                              median(Dist$Money),\n                              mean(Dist$Money)\n                              ),\n                    probwin = 0,\n                    probmed = 0,\n                    probmean = 0\n                    )\n  rownames(Sum) &lt;- c(\"min\", \"max\", \"med\", \"mean\")\n  M_Med &lt;- Sum[\"med\", \"Money\"]\n  M_Mean &lt;- Sum[\"mean\", \"Money\"]\n  for(i in 1:nrow(Dist)) {\n    M_A &lt;- Dist[i,\"Money\"]\n    M_oA &lt;- Dist[c(-i),\"Money\"]\n    pwin &lt;- M_oA*0\n    pmed &lt;- M_oA*0\n    pmean &lt;- M_oA*0\n    for(ii in 1:NROW(M_oA)) {\n      Pot &lt;- max(M_A + M_oA[ii], 10e-8)\n      pwin[ii] &lt;- 1-min(1, M_A/Pot)\n      pmed[ii] &lt;- 1-min(1, M_Med/Pot)\n      pmean[ii] &lt;- 1-min(1, M_Mean/Pot)\n    }\n    Dist[i,\"probwin\"] &lt;- mean(pwin)\n    Dist[i,\"probmed\"] &lt;- mean(pmed)\n    Dist[i,\"probmean\"] &lt;- mean(pmean)\n  }\n  for (i in c(\"probwin\",\"probmed\",\"probmean\")) {\n    Sum[[i]] = c(min(Dist[[i]]),\n                    max(Dist[[i]]),\n                    median(Dist[[i]]),\n                    mean(Dist[[i]])\n    )\n  }\n\n  Output &lt;- list(Sum = Sum, Dist = Dist)\n  return(Output)\n}\n\n\nThe same Function with matrix calculations, what is much faster!\n\nCodecalc_p &lt;- function(VM, Detailed=FALSE) {\n  n &lt;- length(VM)\n  ID &lt;- seq(1:n)\n  MM &lt;- matrix(rep(VM,times=n),n,n)\n  S &lt;- (VM + t(MM))\n  S[S==0] &lt;- 10e-6\n  pwin &lt;- (1 - t(MM)/S)\n  diag(pwin) &lt;- 0\n  pmed &lt;- 1-(median(VM)/S)\n  pmed[pmed&lt;0] &lt;- 0\n  diag(pmed) &lt;- 0\n  pmean &lt;- 1-(mean(VM)/S)\n  pmean[pmean&lt;0] &lt;- 0\n  diag(pmean) &lt;- 0\n\n  Dist &lt;- data.frame(Money = VM,\n                     probwin = colSums(pwin)/(n-1),\n                     probmed = colSums(pmed)/(n-1),\n                     probmean = colSums(pmean)/(n-1)\n  )\n\n  Sum &lt;- data.frame(Money = c(min(Dist$Money),\n                              max(Dist$Money),\n                              median(Dist$Money),\n                              mean(Dist$Money)),\n                    probwin = c(min(Dist$probwin),\n                                max(Dist$probwin),\n                                median(Dist$probwin),\n                                mean(Dist$probwin)),\n                    probmed = c(min(Dist$probmed),\n                                max(Dist$probmed),\n                                median(Dist$probmed),\n                                mean(Dist$probmed)),\n                    probmean = c(min(Dist$probmean),\n                                 max(Dist$probmean),\n                                 median(Dist$probmean),\n                                 mean(Dist$probmean))\n  )\n\n  rownames(Sum) &lt;- c(\"min\", \"max\", \"med\", \"mean\")\n  Output &lt;- list(Sum = Sum, Dist = Dist)\n  if (Detailed) {\n    D &lt;- data.frame(t(pmed))\n    diag(D) &lt;- colSums(pmed)/(n-1)\n    D &lt;- round(D, digits=2)\n    D &lt;- format(D, digits=2)\n    VMm &lt;- round(median(VM), digits=1)\n    VMm &lt;- format(VMm, digits=4)\n    VM &lt;- round(VM, digits=1)\n    VM &lt;- format(VM, digits=4)\n    D &lt;- rbind(VM, D)\n    D &lt;- cbind(c(\"Money\",ID),c(VMm,VM), D)\n    colnames(D) &lt;- c(\"ID\",\"Money\",ID)\n    D &lt;- gt(D)\n    D &lt;- tab_spanner(D, label = \"Probabilities\", columns = 3:(n+2))\n    for (i in 1:(n + 1)) {\n      if (i==1) {\n        D &lt;- tab_style(D,\n                       style = list(cell_text(style = \"italic\")),\n                       locations = cells_body(i+1,))\n        D &lt;- tab_style(D,\n                       style = list(cell_text(style = \"italic\")),\n                       locations = cells_body(,i))\n        }\n      D &lt;- tab_style(D,\n                     style = list(cell_text(weight = \"bold\")),\n                     locations = cells_body(i+1, i))\n    }\n    D &lt;- tab_source_note(\n      D,\n      source_note = \"Italic/bold = Median of Money, Bold = Mean in the Population\"\n    )\n    Output$SumD &lt;- D\n  }\n  return(Output)\n}\n\n\nTimeline\nThe same is also implemented as a time function.\nNeeds\n\nMatrix with Money distribution as vector per time ( as reported from ecosim$timeline)\nOutput\n\nMatrix probability-values per time in colones (long form)\n\n\nCodecalc_p_t &lt;- function(MM) {\n  pnt &lt;- calc_p(MM[,1])\n  tx &lt;- as.numeric(gsub(\"n\", \"\",colnames(MM)[1]))\n  pnts &lt;- data.frame(Time = rep(tx, times = 4),\n                     Res = colnames(pnt$Sum),\n                     t(pnt$Sum)\n                     )\n  for(i in 2:ncol(MM)) {\n    pnt &lt;- calc_p(MM[,i])\n    tx &lt;- as.numeric(gsub(\"n\", \"\",colnames(MM)[i]))\n    pnti &lt;- data.frame(Time = rep(tx, times = 4),\n                       Res = colnames(pnt$Sum),\n                       t(pnt$Sum)\n                       )\n    pnts &lt;- rbind(pnts,pnti)\n  }\n  rownames(pnts) &lt;- NULL\n  return(pnts)\n}",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#economic-simulation",
    "href": "hw2/notebook_final3.html#economic-simulation",
    "title": "Notebook(Final)",
    "section": "Economic Simulation",
    "text": "Economic Simulation\nFinally, a simulation is created that simulates a certain number of money exchanges.\nNeeds\n\nNumber of exchanges\nStartdistribition of Money\nSteps for the timeline (optional)\nOutput\n\nSummary (Sum) with ID, number of exchanges, Money at beginning and Money at the End\nMatrix with Money distribution(Timeline) for given time steps as vectors (if steps &gt; 0)\n\n\nCodeecosim &lt;- function( n, VM, TL = 0 ) {\n  df &lt;- data.frame(ID=seq(1,NROW(VM)),\n                   nE=0,\n                   MT_S=VM,\n                   MT_E=VM\n                   )\n  if (TL &gt; 0) {\n    M_TL &lt;- data.frame(n0 = df$MT_S)\n  }\n  for(i in 1:n) {\n    rdf &lt;- sample(df$ID, size=2)\n    rds &lt;- splitpair()\n    df[rdf,\"nE\"] &lt;- df[rdf,\"nE\"] + 1\n    df[rdf,\"MT_E\"] &lt;- sum( df[rdf,\"MT_E\"]) * rds\n    if ( TL &gt; 0 ) {\n      if ( i %% TL == 0) {\n        M_TL [[paste0(\"n\",i)]]&lt;- df$MT_E\n      }\n    }\n  }\n  Output &lt;- list(\"Sum\" = df)\n  if ( TL &gt; 0 ) {\n    rownames(M_TL) &lt;- df$ID\n    Output$Timeline &lt;- M_TL\n  }\n  return(Output)\n}",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#plot-functions",
    "href": "hw2/notebook_final3.html#plot-functions",
    "title": "Notebook(Final)",
    "section": "Plot functions",
    "text": "Plot functions\nHistogram\nNeeds\n\nSummary of a economic Simulation\n\n\nCodefigHist &lt;- function(Sim_Sum) {\n  Fig &lt;- pivot_longer(data.frame(Sim_Sum),\n                      cols = starts_with(\"MT\"),\n                      names_to = \"Distribution\",\n                      values_to = \"Money\"\n                      )\n  Fig$Distribution &lt;-recode(Fig$Distribution,\n                            \"MT_S\" = \"at Begining\",\n                            \"MT_E\" = \"at the End\"\n                            )\n  Figp &lt;- ggplot(Fig, aes(x = Money, fill = Distribution)) +\n    geom_histogram(position = \"identity\", alpha = 0.5, bins = 50) +\n    ylab(\"Frequency\") +\n    scale_fill_manual(name = NULL, values = c(4,3)) +\n    scale_color_manual(name = NULL, values = c(4, 3)) +\n    theme_minimal() +\n    theme(legend.position = \"top\")\n  return(Figp)\n}\n\n\nProbabilities in the Population\nNeeds\n\nProbability distribution from calc_p\nTitle for the figure\nMaximum for the x axis (Money)\n\n\nCodefigProb &lt;- function(Prob, Title, xmax) {\n  Figd &lt;- pivot_longer(data.frame(Prob$Dist),\n                       cols = starts_with(\"p\"),\n                       names_to = \"Outcome\",\n                       values_to = \"Probability\"\n                       )\n  Figs &lt;- Prob$Sum\n\n  Figp &lt;- ggplot(data = Figd,\n                 aes(x = Money,\n                     y = Probability,\n                     color = Outcome\n                     )\n                 ) +\n    geom_point( alpha = 0.5, size = 1.5) +\n    scale_color_manual(name = \"Probability to\",\n                       values = c(2, 3, 4),\n                       labels = c(\"gain more than the Mean\",\n                                  \"gain more than the Median\",\n                                  \"gain\")\n                       ) +\n    ylim(0, 1) +\n    xlim(0, xmax) +\n\n    geom_vline(xintercept = Figs[\"med\",\"Money\"],\n               linetype = \"solid\", color = 1) +\n    annotate(\"text\",\n             x = Figs[\"med\",\"Money\"] * 0.95,\n             y = 0,\n             hjust = 1,\n             vjust = 0,\n             label = paste(\"Median\\n=\",\n                           round(Figs[\"med\",\"Money\"], 0)),\n             color = 1) +\n\n    geom_vline(xintercept = Figs[\"mean\",\"Money\"],\n               linetype = \"dashed\", color = 1) +\n    annotate(\"text\",\n             x = Figs[\"mean\",\"Money\"] * 1.05,\n             y = 0,\n             hjust = 0,\n             vjust = 0,\n             label = paste(\"Mean\\n=\",\n                           round(Figs[\"mean\",\"Money\"], 0)),\n             color = 1) +\n\n    geom_hline(yintercept = Figs[\"mean\",\"probmed\"],\n             linetype = \"solid\", color = 3) +\n    annotate(\"text\",\n             x = xmax,\n             y = Figs[\"mean\",\"probmed\"] * 1.05,\n             hjust = 1,\n             vjust = 0,\n             label = paste(\"Mean =\",\n                           round(Figs[\"mean\",\"probmed\"], 2)),\n             color = 3) +\n\n    geom_hline(yintercept = Figs[\"mean\",\"probmean\"],\n               linetype = \"solid\", color = 2) +\n    annotate(\"text\",\n             x = xmax,\n             y = Figs[\"mean\",\"probmean\"]*0.95,\n             hjust = 1,\n             vjust = 1,\n             label = paste(\"Mean =\",\n                           round(Figs[\"mean\",\"probmean\"], 2)),\n             color = 2) +\n\n    labs(title = Title) +\n    theme_light() +\n    theme(legend.position = \"top\",\n          legend.justification = c(0, 1))\n  return(Figp)\n}\n\n\nProbabilities over Time\nNeeds\n\nProbability distribution from calc_p_t\nTitle for the figure\n\n\nCodefigProb_t &lt;- function(Prob, Title) {\n  Fig &lt;- Prob[Prob$Res!=\"Money\",c(\"Time\",\"Res\",\"mean\")]\n\n  Figp &lt;- ggplot(data = Fig, aes(x = Time, y = mean, color = Res)) +\n    geom_line(linewidth = 1) +\n    scale_color_manual(name = NULL, values = c(2, 3, 4),\n                      labels = c(\"gain more than the Mean\",\n                                 \"gain more than the Median\",\n                                 \"gain\")) +\n    ggtitle(Title) +\n    xlab(\"number of exchanges\") +\n    ylab(\"Mean-Probability in the Population\") +\n    ylim(0.30, 0.6) +\n    theme_light() +\n    theme(legend.position = \"top\",\n         legend.justification = c(0, 1))\n  return(Figp)\n}",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#normal-population",
    "href": "hw2/notebook_final3.html#normal-population",
    "title": "Notebook(Final)",
    "section": "Normal Population",
    "text": "Normal Population\nSimulation for 60000 exchanges with output after every 500th exchange.\n\nCodesNorm &lt;- ecosim(60000, PopNorm$Money, TL = 250)\n\n\nPresentation of the end results\nAt the beginning, the distribution of money in the population looks like this. After simulating 60000 money exchanges, the following distribution emerges.\n\nCodeFig01 &lt;- figHist(sNorm$Sum)\nFig01\n\n\n\n\n\n\n\nRepresentation of Money over time\nIt seems that every agent has the chance to have a lot of money in the end. This can be shown by tracking individual agents and their money. Below, nine agents are shown: three with little, three with 100, and three with the most money at the beginning.\n\nCodeMTime &lt;- data.frame(ID,sNorm$Timeline)\n\nsID &lt;- c(1,2,3,nA/2-1,nA/2,nA/2+1,nA-2,nA-1,nA)\nsMTime &lt;- MTime[sID,]\n\nFig02 &lt;- pivot_longer(data.frame(sMTime),\n                      cols = !matches(\"ID\"),\n                      names_to = \"Time\",\n                      names_prefix = \"n\",\n                      names_transform = list(Time = as.integer),\n                      values_to = \"Money\"\n)\n\nFig02$ID &lt;- sprintf(\"%04d\", Fig02$ID)\n\nggplot(data = Fig02, aes(x = Time, y = Money, color = ID)) +\n  geom_line() +\n  ggtitle(\"Timeline for some Agents\") +\n  xlab(\"number of exchanges\") +\n  labs(color = \"Agents ID\") +\n  scale_color_manual(values = c(2,2,2, 1,1, 1,3,3,3)) +\n  theme_light() +\n  theme(legend.position = \"right\",\n        legend.justification = c(0, 1))\n\n\n\n\n\n\n\nProbabilities for specific Timesteps\nThis can also be shown with the calculated probabilities for the next meeting for each agent.\n\nCodeFig03 &lt;- figProb(calc_p(sNorm$Timeline[,1]), \n                \"Probability at Beginning\", 850)\nFig04 &lt;- figProb(calc_p(sNorm$Timeline[,3]), \n                \"Probability after 500 exchanges\", 850)\nFig05 &lt;- figProb(calc_p(sNorm$Timeline[,5]), \n                \"Probability after 1000 exchanges\", 850)\nFig06 &lt;- figProb(calc_p(sNorm$Timeline[,NCOL(sNorm$Timeline)]), \n                \"Probability at the End\", 850)\n\n\nInitially, it seems to be a fairly fair trade, so agents with little money have a higher probability of winning money in the next exchange. However, they also have a lower probability of ending up above the median or the mean. At the beginning, all probabilities in the population are about 0.5 on average.\n\nCodeFig03\n\n\n\n\n\n\n\nHowever, after a few meetings, this changes. The probability of ending up above the median or the mean decreases.\nThe reason for this is that with each exchange, a rich and a poor agent are created, which decreases the probability of meeting a rich agent in the future. As a result, the median amount of money decreases.\n\nCodeFig04\n\n\n\n\n\n\n\nThis effect intensifies over time.\n\nCodeFig05\n\n\n\n\n\n\n\nAfter 60000 meetings, the distribution of probabilities in the population looks like this.\n\nCodeFig06\n\n\n\n\n\n\n\nIt seems that the probability of ending up above the median rises back to 0.5. However, the probability of ending up above the mean remains low.\nProbabilities over Time\n\nCodeProbNormt &lt;- calc_p_t(sNorm$Timeline)\n\n\nThis can be seen even better when looking at the said probabilities over time.\n\nCodeFig07 &lt;-figProb_t(ProbNormt, \"Probability to ... of Money - Timeline\")\nFig07",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#equal-population-1",
    "href": "hw2/notebook_final3.html#equal-population-1",
    "title": "Notebook(Final)",
    "section": "Equal Population",
    "text": "Equal Population\nSimulation for 60000 exchanges with output after every 250th exchange.\n\nCodeeNorm &lt;- ecosim(60000, PopEqual$Money, TL = 250)\n\n\nPresentation of the end results\nAt first glance, it seems illogical that a population where everyone starts with the same amount of money would result in a similar final distribution of money. However, the simulation proves this.\n\nCodeFig08 &lt;- figHist(eNorm$Sum)\nFig08\n\n\n\n\n\n\n\nProbabilities for specific Timesteps\n\nCodeFig09 &lt;- figProb(calc_p(eNorm$Timeline[,1]), \n                \"Probability at Beginning\", 850)\nFig10 &lt;- figProb(calc_p(eNorm$Timeline[,3]), \n                \"Probability after 500 exchanges\", 850)\nFig11 &lt;- figProb(calc_p(eNorm$Timeline[,5]), \n                \"Probability after 1000 exchanges\", 850)\nFig12 &lt;- figProb(calc_p(eNorm$Timeline[,NCOL(eNorm$Timeline)]), \n                \"Probability at the End\", 850)\n\n\nAt the beginning, all probabilities are exactly 0.5.\n\nCodeFig09\n\n\n\n\n\n\n\nHowever, the same mechanism applies here. With each exchange, a rich and a poor agent are created.\n\nCodeFig10\n\n\n\n\n\n\n\nTherefore, the probability of meeting a rich agent in the future also decreases here. As a result, the probability of ending up above the median or the mean decreases here as well.\n\nCodeFig11\n\n\n\n\n\n\n\nAfter 50000 meetings, the distribution of probabilities in this population looks almost identical.\n\nCodeFig12\n\n\n\n\n\n\n\nProbabilities over Time\nThis is even more evident over time.\n\nCodeProbEqualt &lt;- calc_p_t(eNorm$Timeline)\n\n\nHowever, it seems that the median amount of money remains stable a bit longer.\n\nCodeFig13 &lt;- figProb_t(ProbEqualt, \"Probability to ... of Money - Timeline\")\nFig13",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "hw2/notebook_final3.html#minimal-population",
    "href": "hw2/notebook_final3.html#minimal-population",
    "title": "Notebook(Final)",
    "section": "Minimal Population",
    "text": "Minimal Population\nTo better illustrate the mechanism, I create a minimal population of three agents with a starting amount of 100.\n\nCodeset.seed(2)\nPopMin &lt;- rep(100,3)  \nsMin &lt;- ecosim(80, PopMin, TL = 1) \nsMint &lt;- calc_p_t(sMin$Timeline) \nFig18 &lt;- figProb_t(sMint,\"Probability to ... of Money\\nTimeline for the Minimal Population\") \nFig18 \n\n\n\n\n\n\n\nAs you can see in Figure 18, the curves are very unstable, so I try a larger population with 5 agents.\n\nCodeset.seed(2)\nPopMin &lt;- rep(100,5)  \nsMin &lt;- ecosim(80, PopMin, TL = 1) \nsMint &lt;- calc_p_t(sMin$Timeline) \nFig19 &lt;- figProb_t(sMint,\"Probability to ... of Money\\nTimeline for the Minimal Population\") \nFig19 \n\n\n\n\n\n\n\nHere we still have the same problem, so the next time we double the number of agents to 10.\n\nCodeset.seed(2)\nPopMin &lt;- rep(100,10)  \nsMin &lt;- ecosim(80, PopMin, TL = 1) \nsMint &lt;- calc_p_t(sMin$Timeline) \nFig20 &lt;- figProb_t(sMint,\"Probability to ... of Money\\nTimeline for the Minimal Population\") \nFig20 \n\n\n\n\n\n\n\nThis seems to produce a reasonably stable curve. And this population is still small enough to make the tables clear. This is shown below for the start situation in Table1.\nSo all Probabilities for winning more than the median of Monay are exactly 0.5 unless which Agent is the next Meeting partner. The diagonals also show the mean scores for each agent in the given population.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nMoney\n\nProbabilities\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nMoney\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n\n\n1\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n2\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n3\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n4\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n5\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n6\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n7\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n8\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n9\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n10\n100\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n\n\n\nItalic/bold = Median of Money, Bold = Mean in the Population\n\n\n\n\n\nTable 1 clearly shows that the first money exchange does not only change the probability of the two affected agents. The other agents now also have the chance of meeting an agent with less money, which reduces the probability for all agents in the population.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nMoney\n\nProbabilities\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nMoney\n100\n100.0\n100.0\n100.0\n100.0\n33.6\n166.4\n100.0\n100.0\n100.0\n100.0\n\n\n1\n100.0\n0.49\n0.50\n0.50\n0.50\n0.25\n0.62\n0.50\n0.50\n0.50\n0.50\n\n\n2\n100.0\n0.50\n0.49\n0.50\n0.50\n0.25\n0.62\n0.50\n0.50\n0.50\n0.50\n\n\n3\n100.0\n0.50\n0.50\n0.49\n0.50\n0.25\n0.62\n0.50\n0.50\n0.50\n0.50\n\n\n4\n100.0\n0.50\n0.50\n0.50\n0.49\n0.25\n0.62\n0.50\n0.50\n0.50\n0.50\n\n\n5\n33.6\n0.25\n0.25\n0.25\n0.25\n0.28\n0.50\n0.25\n0.25\n0.25\n0.25\n\n\n6\n166.4\n0.62\n0.62\n0.62\n0.62\n0.50\n0.61\n0.62\n0.62\n0.62\n0.62\n\n\n7\n100.0\n0.50\n0.50\n0.50\n0.50\n0.25\n0.62\n0.49\n0.50\n0.50\n0.50\n\n\n8\n100.0\n0.50\n0.50\n0.50\n0.50\n0.25\n0.62\n0.50\n0.49\n0.50\n0.50\n\n\n9\n100.0\n0.50\n0.50\n0.50\n0.50\n0.25\n0.62\n0.50\n0.50\n0.49\n0.50\n\n\n10\n100.0\n0.50\n0.50\n0.50\n0.50\n0.25\n0.62\n0.50\n0.50\n0.50\n0.49\n\n\n\nItalic/bold = Median of Money, Bold = Mean in the Population\n\n\n\n\n\nUntil the 8th exchange The median and mean are exactly the same. (Table 2) As you can see, two agents still have the starting capital of 100. so the Median of Money is still 100.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nMoney\n\nProbabilities\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nMoney\n100\n196.6\n40.6\n64.2\n100.0\n33.6\n190.9\n136.3\n130.4\n7.4\n100.0\n\n\n1\n196.6\n0.64\n0.58\n0.62\n0.66\n0.57\n0.74\n0.70\n0.69\n0.51\n0.66\n\n\n2\n40.6\n0.58\n0.29\n0.05\n0.29\n0.00\n0.57\n0.43\n0.42\n0.00\n0.29\n\n\n3\n64.2\n0.62\n0.05\n0.34\n0.39\n0.00\n0.61\n0.50\n0.49\n0.00\n0.39\n\n\n4\n100.0\n0.66\n0.29\n0.39\n0.44\n0.25\n0.66\n0.58\n0.57\n0.07\n0.50\n\n\n5\n33.6\n0.57\n0.00\n0.00\n0.25\n0.27\n0.55\n0.41\n0.39\n0.00\n0.25\n\n\n6\n190.9\n0.74\n0.57\n0.61\n0.66\n0.55\n0.63\n0.69\n0.69\n0.50\n0.66\n\n\n7\n136.3\n0.70\n0.43\n0.50\n0.58\n0.41\n0.69\n0.54\n0.63\n0.30\n0.58\n\n\n8\n130.4\n0.69\n0.42\n0.49\n0.57\n0.39\n0.69\n0.63\n0.52\n0.27\n0.57\n\n\n9\n7.4\n0.51\n0.00\n0.00\n0.07\n0.00\n0.50\n0.30\n0.27\n0.19\n0.07\n\n\n10\n100.0\n0.66\n0.29\n0.39\n0.50\n0.25\n0.66\n0.58\n0.57\n0.07\n0.44\n\n\n\nItalic/bold = Median of Money, Bold = Mean in the Population\n\n\n\n\n\nThis is changing in the next steps (exchange 9 and 10) as seen in Table 3 and 4. Also to see there is that the median of Money falls down now and with this the probability to gain more than the median increases again.\nThe easiest way to see all this mechanistics is with Agent 10, who still has the starting amount of 100.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nMoney\n\nProbabilities\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nMoney\n82.1\n196.6\n40.6\n64.2\n235.7\n33.6\n55.2\n136.3\n130.4\n7.4\n100.0\n\n\n1\n196.6\n0.70\n0.65\n0.69\n0.81\n0.64\n0.67\n0.75\n0.75\n0.60\n0.72\n\n\n2\n40.6\n0.65\n0.35\n0.22\n0.70\n0.00\n0.14\n0.54\n0.52\n0.00\n0.42\n\n\n3\n64.2\n0.69\n0.22\n0.42\n0.73\n0.16\n0.31\n0.59\n0.58\n0.00\n0.50\n\n\n4\n235.7\n0.81\n0.70\n0.73\n0.74\n0.70\n0.72\n0.78\n0.78\n0.66\n0.76\n\n\n5\n33.6\n0.64\n0.00\n0.16\n0.70\n0.33\n0.08\n0.52\n0.50\n0.00\n0.39\n\n\n6\n55.2\n0.67\n0.14\n0.31\n0.72\n0.08\n0.39\n0.57\n0.56\n0.00\n0.47\n\n\n7\n136.3\n0.75\n0.54\n0.59\n0.78\n0.52\n0.57\n0.61\n0.69\n0.43\n0.65\n\n\n8\n130.4\n0.75\n0.52\n0.58\n0.78\n0.50\n0.56\n0.69\n0.60\n0.40\n0.64\n\n\n9\n7.4\n0.60\n0.00\n0.00\n0.66\n0.00\n0.00\n0.43\n0.40\n0.26\n0.24\n\n\n10\n100.0\n0.72\n0.42\n0.50\n0.76\n0.39\n0.47\n0.65\n0.64\n0.24\n0.53\n\n\n\nItalic/bold = Median of Money, Bold = Mean in the Population\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nMoney\n\nProbabilities\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nMoney\n82.1\n196.6\n40.6\n64.2\n235.7\n33.6\n3.4\n136.3\n182.2\n7.4\n100.0\n\n\n1\n196.6\n0.69\n0.65\n0.69\n0.81\n0.64\n0.59\n0.75\n0.78\n0.60\n0.72\n\n\n2\n40.6\n0.65\n0.35\n0.22\n0.70\n0.00\n0.00\n0.54\n0.63\n0.00\n0.42\n\n\n3\n64.2\n0.69\n0.22\n0.39\n0.73\n0.16\n0.00\n0.59\n0.67\n0.00\n0.50\n\n\n4\n235.7\n0.81\n0.70\n0.73\n0.73\n0.70\n0.66\n0.78\n0.80\n0.66\n0.76\n\n\n5\n33.6\n0.64\n0.00\n0.16\n0.70\n0.34\n0.00\n0.52\n0.62\n0.00\n0.39\n\n\n6\n3.4\n0.59\n0.00\n0.00\n0.66\n0.00\n0.27\n0.41\n0.56\n0.00\n0.21\n\n\n7\n136.3\n0.75\n0.54\n0.59\n0.78\n0.52\n0.41\n0.60\n0.74\n0.43\n0.65\n\n\n8\n182.2\n0.78\n0.63\n0.67\n0.80\n0.62\n0.56\n0.74\n0.68\n0.57\n0.71\n\n\n9\n7.4\n0.60\n0.00\n0.00\n0.66\n0.00\n0.00\n0.43\n0.57\n0.28\n0.24\n\n\n10\n100.0\n0.72\n0.42\n0.50\n0.76\n0.39\n0.21\n0.65\n0.71\n0.24\n0.51\n\n\n\nItalic/bold = Median of Money, Bold = Mean in the Population\n\n\n\n\n\nAfter 80 money exchanges, the median of the money takes on a kind of minimum. The probability of landing above the median is again 50% in the population. This is not quite correct, as Table 5 shows, because the simulation with only 10 agents is not very stable (Figure 20).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nMoney\n\nProbabilities\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nMoney\n68.9\n71.5\n95.7\n23.0\n5.7\n121.4\n10.6\n66.3\n7.6\n347.9\n250.4\n\n\n1\n71.5\n0.45\n0.59\n0.27\n0.11\n0.64\n0.16\n0.50\n0.13\n0.84\n0.79\n\n\n2\n95.7\n0.59\n0.55\n0.42\n0.32\n0.68\n0.35\n0.57\n0.33\n0.84\n0.80\n\n\n3\n23.0\n0.27\n0.42\n0.33\n0.00\n0.52\n0.00\n0.23\n0.00\n0.81\n0.75\n\n\n4\n5.7\n0.11\n0.32\n0.00\n0.27\n0.46\n0.00\n0.04\n0.00\n0.81\n0.73\n\n\n5\n121.4\n0.64\n0.68\n0.52\n0.46\n0.62\n0.48\n0.63\n0.47\n0.85\n0.81\n\n\n6\n10.6\n0.16\n0.35\n0.00\n0.00\n0.48\n0.29\n0.10\n0.00\n0.81\n0.74\n\n\n7\n66.3\n0.50\n0.57\n0.23\n0.04\n0.63\n0.10\n0.42\n0.07\n0.83\n0.78\n\n\n8\n7.6\n0.13\n0.33\n0.00\n0.00\n0.47\n0.00\n0.07\n0.28\n0.81\n0.73\n\n\n9\n347.9\n0.84\n0.84\n0.81\n0.81\n0.85\n0.81\n0.83\n0.81\n0.83\n0.88\n\n\n10\n250.4\n0.79\n0.80\n0.75\n0.73\n0.81\n0.74\n0.78\n0.73\n0.88\n0.78\n\n\n\nItalic/bold = Median of Money, Bold = Mean in the Population",
    "crumbs": [
      "About",
      "Assignment 2: <br>Economic Simulation",
      "Notebook(Final)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "hubert_baechli_ICMB_HS24",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "hubert_baechli_ICMB_HS24"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html",
    "href": "Project/sketchbook00.html",
    "title": "Simple learningcurve",
    "section": "",
    "text": "First and foremost, the distribution of information and knowledge should have something to do with learning. So I start with an exponential learning curve, which is easy to implement.",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html#population-for-testing-the-functions",
    "href": "Project/sketchbook00.html#population-for-testing-the-functions",
    "title": "Simple learningcurve",
    "section": "Population for testing the Functions",
    "text": "Population for testing the Functions\n\nCodenA = 5            # number of Agents\nID = seq_len(nA)  # ID of the Agents\n\nPop &lt;- tibble( ID = ID )\nPop\n\n# A tibble: 5 × 1\n     ID\n  &lt;int&gt;\n1     1\n2     2\n3     3\n4     4\n5     5",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html#knowledge",
    "href": "Project/sketchbook00.html#knowledge",
    "title": "Simple learningcurve",
    "section": "Knowledge",
    "text": "Knowledge\nFunctions to set and update Knowledge\nSet Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the Knowledge (K) between 0 and 1. could be a scalar or e vector with the same length as the Population\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodeset_Knowledge &lt;- function(Pop = Pop,\n                          Typ = FALSE,\n                          K = Knowledge) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate(!!Kname := K)\n  } else {\n    Pop[[Kname]] &lt;- K\n  }\n  Pop &lt;- Pop %&gt;%\n\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeK &lt;- seq_len(nA)/5\n\nPop &lt;- set_Knowledge( Pop = Pop, K = 0.5 )\nPop &lt;- set_Knowledge( Pop = Pop, Typ = \"A\", K = K )\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge Knowledge_A\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1     1       0.5         0.2\n2     2       0.5         0.4\n3     3       0.5         0.6\n4     4       0.5         0.8\n5     5       0.5         1  \n\n\nUpdate Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value to add to the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 0 is used to add\nA value to multiplie (fac) the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 1 is used for the multiplikation\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe add operation is always used first!\nIf the Knowledge is not defined before it will be generated with the start value (add) and the multiplication with the value (fac)\n\n\nCodeupdate_Knowledge &lt;- function(Pop = Pop,\n                            Typ = FALSE,\n                            add = 0,\n                            fac = 1) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := ( .data[[Kname]] + add ) * fac )\n  } else {\n    Pop &lt;- set_Knowledge(Pop = Pop, K = add, Typ = Typ)\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := .data[[Kname]] * fac )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeadd &lt;- seq_len(nA)/20\nfac &lt;- seq_len(nA)/10 \n\nPop &lt;- update_Knowledge( Pop = Pop, add = add ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"A\", fac = fac ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"B\", add = add, fac = fac ) \nPop\n\n# A tibble: 5 × 4\n     ID Knowledge Knowledge_A Knowledge_B\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1     1      0.55        0.02       0.005\n2     2      0.6         0.08       0.02 \n3     3      0.65        0.18       0.045\n4     4      0.7         0.32       0.08 \n5     5      0.75        0.5        0.125",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html#learnrate",
    "href": "Project/sketchbook00.html#learnrate",
    "title": "Simple learningcurve",
    "section": "LearnRate",
    "text": "LearnRate\nFunctions to set and update the learn rate\nSet LearnRate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the learn rate (LR) greater than 0 and up to 1. could be a scalar or e vector with the same length as the Population\nHints\n\nLernRate 0 leads to Problems so it ist limited it to 1E-3\n\n\nCodeset_LearnRate &lt;- function(Pop = Pop,\n                          LR = LearnRate) {\n  LRname &lt;- \"LearnRate\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!LRname := LR,\n           !!LRname := pmax(.data[[LRname]],1E-3))\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodeLR &lt;- seq_len(nA)/5  \nPop &lt;- set_LearnRate( Pop = Pop, LR = 1 ) \nPop\n\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005         1\n2     2      0.6         0.08       0.02          1\n3     3      0.65        0.18       0.045         1\n4     4      0.7         0.32       0.08          1\n5     5      0.75        0.5        0.125         1",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html#studytime",
    "href": "Project/sketchbook00.html#studytime",
    "title": "Simple learningcurve",
    "section": "StudyTime",
    "text": "StudyTime\nFunctions to set and update the StudyTime\nSet StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the StudyTime (ST). could be a scalar or a vector with the same length as the Population\nHints\n\nIf StudyTime isn’t given the Population will be initializing with 0\n\n\nCodeset_StudyTime &lt;- function(Pop = Pop,\n                          ST = 0) {\n  STname &lt;- \"StudyTime\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!STname := ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- set_StudyTime( Pop = Pop, ST = 3)  \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005         1         3\n2     2      0.6         0.08       0.02          1         3\n3     3      0.65        0.18       0.045         1         3\n4     4      0.7         0.32       0.08          1         3\n5     5      0.75        0.5        0.125         1         3\n\n\nUpdate StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and StudyTime\nA Time (dT) that should added.\nHints\n\nIf StudyTime isn’t defined in Population it will be initialising with dT\n\n\nCodeupdate_StudyTime &lt;- function(Pop = Pop,\n                             dT = TimeToAdd) {\n  STname &lt;- \"StudyTime\"\n  if (STname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!STname := .data[[STname]] + dT )\n  } else {\n    Pop &lt;- set_StudyTime(Pop = Pop, ST = dT )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- update_StudyTime( Pop = Pop, dT = 1)   \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005         1         4\n2     2      0.6         0.08       0.02          1         4\n3     3      0.65        0.18       0.045         1         4\n4     4      0.7         0.32       0.08          1         4\n5     5      0.75        0.5        0.125         1         4",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html#timelines",
    "href": "Project/sketchbook00.html#timelines",
    "title": "Simple learningcurve",
    "section": "Timelines",
    "text": "Timelines\nsaving Timelines during Simulations\nGet Agents-Timelines\nNeeds\n\nA containername for the Timeline\nA value for the Time\nA Population (Pop) with several Agents defined by ID’s\nA colname from the Population which should followed ver Time\noptional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\nCodeget_Timeline &lt;- function(TL = Timeline,\n                          Time = 0,\n                          Pop = Pop,\n                          Info = name,\n                          Sum = 0) {\n  TLadd &lt;- tibble( ID = Pop[[\"ID\"]],\n                   Time = Time,\n                   !!Info := Pop[[Info]])\n  if (Sum == 1) {\n    Sumname1 &lt;- paste(Info,\"mean\", sep = \"_\")\n    Sumname2 &lt;- paste(Info,\"median\", sep = \"_\")\n    TLadd &lt;- TLadd %&gt;%\n        mutate(!!Sumname1 := mean(Pop[[Info]], na.rm = TRUE),\n               !!Sumname2 := median(Pop[[Info]], na.rm = TRUE))\n    }\n  if (Time == 0) {\n    TL &lt;- TLadd\n  } else {\n    TL &lt;- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n\n\nOutput\n\nA Timeline in a long format\n\n\nCodeTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 0, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 1, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline\n\n# A tibble: 10 × 5\n      ID  Time Knowledge Knowledge_mean Knowledge_median\n   &lt;int&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n 1     1     0      0.55           0.65             0.65\n 2     2     0      0.6            0.65             0.65\n 3     3     0      0.65           0.65             0.65\n 4     4     0      0.7            0.65             0.65\n 5     5     0      0.75           0.65             0.65\n 6     1     1      0.55           0.65             0.65\n 7     2     1      0.6            0.65             0.65\n 8     3     1      0.65           0.65             0.65\n 9     4     1      0.7            0.65             0.65\n10     5     1      0.75           0.65             0.65",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html#learning",
    "href": "Project/sketchbook00.html#learning",
    "title": "Simple learningcurve",
    "section": "Learning",
    "text": "Learning\nLearning with a exponential Lernrate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nA value for the lLearnRate (LR). could be a scalar or e vector with the same length as the Population\nA value for the StudyTime (ST). could be a scalar or e vector with the same length as the Population\nHints\n\nIf LearnRate isn’t given the values from the Population will be used, if this is missing in the Population 0 is used.\n\n\nCodelearn &lt;- function(Pop = Pop,\n                  Typ = FALSE,\n                  LR = FALSE,\n                  ST = StudyTime) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    K &lt;- Pop[[Kname]]\n  }\n  if (LR == FALSE) {\n    if (\"LearnRate\" %in% colnames(Pop)) {\n      LR &lt;- Pop[[\"LearnRate\"]]\n    }\n  }\n\n  T0 &lt;- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K &lt;- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  \n  Pop &lt;- set_Knowledge(Pop = Pop, Typ = Typ, K = K)\n  Pop &lt;- update_StudyTime(Pop = Pop, dT = ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with updated Knowledge\n\n\nCodePop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge(Pop = Pop, K = 0.1)\nPop &lt;- set_LearnRate(Pop = Pop, LR = 1)\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge LearnRate\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1       0.1         1\n2     2       0.1         1\n3     3       0.1         1\n4     4       0.1         1\n5     5       0.1         1\n\nCodePop &lt;- learn( Pop = Pop, ST = 10)\nPop\n\n# A tibble: 5 × 4\n     ID Knowledge LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.91         1        10\n2     2      0.91         1        10\n3     3      0.91         1        10\n4     4      0.91         1        10\n5     5      0.91         1        10",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook00.html#plots",
    "href": "Project/sketchbook00.html#plots",
    "title": "Simple learningcurve",
    "section": "Plots",
    "text": "Plots\nPlot Timeline\nNeeds\n\nA Timeline from get_Timeline\n\n\nCodeplt_Timeline &lt;- function(TL = Timeline) {\n  ggplot(data = TL, aes(x = Time)) +\n  geom_line(aes(y = Knowledge, group = ID, color = \"Agents\"), \n            alpha = 0.5,\n            linetype = \"solid\") +\n  geom_line(aes(y = Knowledge_mean, color = \"Mean\"),\n            linetype = \"solid\")  +\n  geom_line(aes(y = Knowledge_median, color = \"Median\"),\n            linetype = \"dashed\") +\n  ggtitle(\"Timeline\") +\n  xlab(\"Number of itterations\") +\n  ylab(\"Knowledge\") +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, 0.2)\n  ) +\n    scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Mean\" = \"black\", \"Median\" = \"black\"),\n    labels = c(\"Agents\" = \"Agents\", \"Mean\" = \"Mean\", \"Median\" = \"Median\")\n  ) +\n  theme_light() +\n  theme(legend.title = element_blank(),\n        legend.position = c(1, 0),\n        legend.justification = c(1, 0))\n}",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Simple learningcurve"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html",
    "href": "Project/sketchbook02.html",
    "title": "Random meetings",
    "section": "",
    "text": "The basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#population-for-testing-the-functions",
    "href": "Project/sketchbook02.html#population-for-testing-the-functions",
    "title": "Random meetings",
    "section": "Population for testing the Functions",
    "text": "Population for testing the Functions\n\nCodenA = 5            # number of Agents\nID = seq_len(nA)  # ID of the Agents\n\nPop &lt;- tibble( ID = ID )\nPop\n\n# A tibble: 5 × 1\n     ID\n  &lt;int&gt;\n1     1\n2     2\n3     3\n4     4\n5     5",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#knowledge",
    "href": "Project/sketchbook02.html#knowledge",
    "title": "Random meetings",
    "section": "Knowledge",
    "text": "Knowledge\nFunctions to set and update Knowledge\nSet Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the Knowledge (K) between 0 and 1. could be a scalar or e vector with the same length as the Population\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodeset_Knowledge &lt;- function(Pop = Pop,\n                          Typ = FALSE,\n                          K = Knowledge) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate(!!Kname := K)\n  } else {\n    Pop[[Kname]] &lt;- K\n  }\n  Pop &lt;- Pop %&gt;%\n\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeK &lt;- seq_len(nA)/5\n\nPop &lt;- set_Knowledge( Pop = Pop, K = 0.5 )\nPop &lt;- set_Knowledge( Pop = Pop, Typ = \"A\", K = K )\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge Knowledge_A\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1     1       0.5         0.2\n2     2       0.5         0.4\n3     3       0.5         0.6\n4     4       0.5         0.8\n5     5       0.5         1  \n\n\nUpdate Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value to add to the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 0 is used to add\nA value to multiplie (fac) the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 1 is used for the multiplikation\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe add operation is always used first!\nIf the Knowledge is not defined before it will be generated with the start value (add) and the multiplication with the value (fac)\n\n\nCodeupdate_Knowledge &lt;- function(Pop = Pop,\n                            Typ = FALSE,\n                            add = 0,\n                            fac = 1) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := ( .data[[Kname]] + add ) * fac )\n  } else {\n    Pop &lt;- set_Knowledge(Pop = Pop, K = add, Typ = Typ)\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := .data[[Kname]] * fac )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeadd &lt;- seq_len(nA)/20\nfac &lt;- seq_len(nA)/10 \n\nPop &lt;- update_Knowledge( Pop = Pop, add = add ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"A\", fac = fac ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"B\", add = add, fac = fac ) \nPop\n\n# A tibble: 5 × 4\n     ID Knowledge Knowledge_A Knowledge_B\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1     1      0.55        0.02       0.005\n2     2      0.6         0.08       0.02 \n3     3      0.65        0.18       0.045\n4     4      0.7         0.32       0.08 \n5     5      0.75        0.5        0.125",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#learnrate",
    "href": "Project/sketchbook02.html#learnrate",
    "title": "Random meetings",
    "section": "LearnRate",
    "text": "LearnRate\nFunctions to set and update the learn rate\nSet LearnRate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the learn rate (LR) greater than 0 and up to 1. could be a scalar or e vector with the same length as the Population\nHints\n\nLernRate 0 leads to Problems so it ist limited it to 1E-3\n\n\nCodeset_LearnRate &lt;- function(Pop = Pop,\n                          LR = LearnRate) {\n  LRname &lt;- \"LearnRate\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!LRname := LR,\n           !!LRname := pmax(.data[[LRname]],1E-3))\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodeLR &lt;- seq_len(nA)/5  \nPop &lt;- set_LearnRate( Pop = Pop, LR = 1 ) \nPop\n\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005         1\n2     2      0.6         0.08       0.02          1\n3     3      0.65        0.18       0.045         1\n4     4      0.7         0.32       0.08          1\n5     5      0.75        0.5        0.125         1\n\n\nUpdate LearnRate by Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe learn rate is defined as 50% of the Knowledge for each Agent\n\n\nCodeupdate_LearnRate_Knowledge &lt;- function(Pop = Pop,\n                                       Typ = FALSE) {\n  LR &lt;- \"LearnRate\"\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!LR := .data[[Kname]] * 0.5 )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodePop &lt;- update_LearnRate_Knowledge( Pop = Pop )  \nPop\n\n# A tibble: 5 × 5\n     ID Knowledge Knowledge_A Knowledge_B LearnRate\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275\n2     2      0.6         0.08       0.02      0.3  \n3     3      0.65        0.18       0.045     0.325\n4     4      0.7         0.32       0.08      0.35 \n5     5      0.75        0.5        0.125     0.375",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#studytime",
    "href": "Project/sketchbook02.html#studytime",
    "title": "Random meetings",
    "section": "StudyTime",
    "text": "StudyTime\nFunctions to set and update the StudyTime\nSet StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the StudyTime (ST). could be a scalar or a vector with the same length as the Population\nHints\n\nIf StudyTime isn’t given the Population will be initialising with 0\n\n\nCodeset_StudyTime &lt;- function(Pop = Pop,\n                          ST = 0) {\n  STname &lt;- \"StudyTime\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!STname := ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- set_StudyTime( Pop = Pop, ST = 3)  \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         3\n2     2      0.6         0.08       0.02      0.3           3\n3     3      0.65        0.18       0.045     0.325         3\n4     4      0.7         0.32       0.08      0.35          3\n5     5      0.75        0.5        0.125     0.375         3\n\n\nUpdate StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and StudyTime\nA Time (dT) that should added.\nHints\n\nIf StudyTime isn’t defined in Population it will be initialising with dT\n\n\nCodeupdate_StudyTime &lt;- function(Pop = Pop,\n                             dT = TimeToAdd) {\n  STname &lt;- \"StudyTime\"\n  if (STname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!STname := .data[[STname]] + dT )\n  } else {\n    Pop &lt;- set_StudyTime(Pop = Pop, ST = dT )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodes &lt;- Pop\n\nPop &lt;- update_StudyTime( Pop = s, dT = 1)   \nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     2      0.6         0.08       0.02      0.3           4\n3     3      0.65        0.18       0.045     0.325         4\n4     4      0.7         0.32       0.08      0.35          4\n5     5      0.75        0.5        0.125     0.375         4",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#data-management",
    "href": "Project/sketchbook02.html#data-management",
    "title": "Random meetings",
    "section": "Data Management",
    "text": "Data Management\nFunctions to select and reintegrate a Sub Populations\nSelect a Sub Population\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA vector wit ID’s(IDs). If no vector is defined it needs a (n, witch is initialised by 2) for selecting random ID’s\nA value (n) if the selection should be random\nHints\n\nIf StudyTime isn’t given the Population will be initialising with 0\n\n\nCodesel_SubPop &lt;- function(Pop = Pop,\n                       IDs = NULL,\n                       n = 2) {\n    if (is.null(IDs)) {\n      IDs &lt;- sample( Pop[[\"ID\"]], size=n )\n    }\n  SubPop &lt;- list()\n  SubPop$sel &lt;- Pop %&gt;%\n    filter(ID %in% IDs) %&gt;%\n    arrange(match(ID, IDs))\n  SubPop$rest &lt;- Pop %&gt;%\n    filter(!ID %in% IDs)\n  return(SubPop)\n}\n\n\nOutput\n\nList with Sub Population ($sel) and the rest of the Population($rest)\n\n\nCodeSubPop &lt;- sel_SubPop( Pop = Pop )\nSubPop$sel\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     4       0.7        0.32        0.08      0.35         4\n2     2       0.6        0.08        0.02      0.3          4\n\nCodeSubPop$rest\n\n# A tibble: 3 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     3      0.65        0.18       0.045     0.325         4\n3     5      0.75        0.5        0.125     0.375         4\n\n\n\nCodeSubPop &lt;- sel_SubPop( Pop = Pop , IDs = c(2, 1))\nSubPop$sel\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     2      0.6         0.08       0.02      0.3           4\n2     1      0.55        0.02       0.005     0.275         4\n\nCodeSubPop$rest\n\n# A tibble: 3 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3      0.65        0.18       0.045     0.325         4\n2     4      0.7         0.32       0.08      0.35          4\n3     5      0.75        0.5        0.125     0.375         4\n\n\nIntegrate Sub Population\nNeeds\n\nA Sub Population (SubPop) with Agents defined by ID’s which are also defined in Population\nA Population (Pop) with several Agents defined by ID’s\nHints\n\nSubPop and Pop has to have the same cols\n\n\nCodeint_SubPop &lt;- function(SubPop = SubPop,\n                       Pop = Pop) {\n  col_sort &lt;- colnames(Pop)\n  SubPop &lt;- SubPop[, col_sort]\n  IDs &lt;- SubPop[[\"ID\"]]\n  Pop[Pop$ID %in% IDs,] &lt;- SubPop\n  Pop &lt;- Pop %&gt;%\n    arrange(ID)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     2      0.6         0.08       0.02      0.3           4\n3     3      0.65        0.18       0.045     0.325         4\n4     4      0.7         0.32       0.08      0.35          4\n5     5      0.75        0.5        0.125     0.375         4\n\nCodeSubPop &lt;- sel_SubPop(Pop = Pop, n = 2 )$sel\nSubPop &lt;- set_Knowledge(Pop = SubPop, K = 0)\nSubPop\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3         0        0.18       0.045     0.325         4\n2     5         0        0.5        0.125     0.375         4\n\nCodePop &lt;- int_SubPop(SubPop = SubPop, Pop = Pop)\nPop\n\n# A tibble: 5 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.55        0.02       0.005     0.275         4\n2     2      0.6         0.08       0.02      0.3           4\n3     3      0           0.18       0.045     0.325         4\n4     4      0.7         0.32       0.08      0.35          4\n5     5      0           0.5        0.125     0.375         4",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#timelines",
    "href": "Project/sketchbook02.html#timelines",
    "title": "Random meetings",
    "section": "Timelines",
    "text": "Timelines\nsaving Timelines during Simulations\nGet Agents-Timelines\nNeeds\n\nA container name for the Timeline\nA value for the Time\nA Population (Pop) with several Agents defined by ID’s\nA colname from the Population which should followed ver Time\noptional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\nCodeget_Timeline &lt;- function(TL = Timeline,\n                          Time = 0,\n                          Pop = Pop,\n                          Info = name,\n                          Sum = 0) {\n  TLadd &lt;- tibble( ID = Pop[[\"ID\"]],\n                   Time = Time,\n                   !!Info := Pop[[Info]])\n  if (Sum == 1) {\n    Sumname1 &lt;- paste(Info,\"mean\", sep = \"_\")\n    Sumname2 &lt;- paste(Info,\"median\", sep = \"_\")\n    TLadd &lt;- TLadd %&gt;%\n        mutate(!!Sumname1 := mean(Pop[[Info]], na.rm = TRUE),\n               !!Sumname2 := median(Pop[[Info]], na.rm = TRUE))\n    }\n  if (Time == 0) {\n    TL &lt;- TLadd\n  } else {\n    TL &lt;- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n\n\nOutput\n\nA Timeline in a long format\n\n\nCodeTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 0, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 1, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline\n\n# A tibble: 10 × 5\n      ID  Time Knowledge Knowledge_mean Knowledge_median\n   &lt;int&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n 1     1     0      0.55           0.37             0.55\n 2     2     0      0.6            0.37             0.55\n 3     3     0      0              0.37             0.55\n 4     4     0      0.7            0.37             0.55\n 5     5     0      0              0.37             0.55\n 6     1     1      0.55           0.37             0.55\n 7     2     1      0.6            0.37             0.55\n 8     3     1      0              0.37             0.55\n 9     4     1      0.7            0.37             0.55\n10     5     1      0              0.37             0.55",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#learning",
    "href": "Project/sketchbook02.html#learning",
    "title": "Random meetings",
    "section": "Learning",
    "text": "Learning\nLearning with a exponential lern rate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nA value for the learn rate (LR). could be a scalar or e vector with the same length as the Population\nA value for the study time (ST). could be a scalar or e vector with the same length as the Population\nHints\n\nIf learn rate isn’t given the values from the Population will be used, if this is missing in the Population 0 is used.\n\n\nCodelearn &lt;- function(Pop = Pop,\n                  Typ = FALSE,\n                  LR = FALSE,\n                  ST = StudyTime) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    K &lt;- Pop[[Kname]]\n  }\n  if (LR == FALSE) {\n    if (\"LearnRate\" %in% colnames(Pop)) {\n      LR &lt;- Pop[[\"LearnRate\"]]\n    }\n  }\n\n  T0 &lt;- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K &lt;- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  \n  Pop &lt;- set_Knowledge(Pop = Pop, Typ = Typ, K = K)\n  Pop &lt;- update_StudyTime(Pop = Pop, dT = ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with updated Knowledge\n\n\nCodePop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge(Pop = Pop, K = 0.1)\nPop &lt;- set_LearnRate(Pop = Pop, LR = 1)\nPop\n\n# A tibble: 5 × 3\n     ID Knowledge LearnRate\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1       0.1         1\n2     2       0.1         1\n3     3       0.1         1\n4     4       0.1         1\n5     5       0.1         1\n\nCodePop &lt;- learn( Pop = Pop, ST = 10)\nPop\n\n# A tibble: 5 × 4\n     ID Knowledge LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     1      0.91         1        10\n2     2      0.91         1        10\n3     3      0.91         1        10\n4     4      0.91         1        10\n5     5      0.91         1        10",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#plots",
    "href": "Project/sketchbook02.html#plots",
    "title": "Random meetings",
    "section": "Plots",
    "text": "Plots\nPlot Timeline\nNeeds\n\nA Timeline from get_Timeline\n\n\nCodeplt_Timeline &lt;- function(TL = Timeline) {\n  ggplot(data = TL, aes(x = Time)) +\n  geom_line(aes(y = Knowledge, group = ID, color = \"Agents\"), \n            alpha = 0.5,\n            linetype = \"solid\") +\n  geom_line(aes(y = Knowledge_mean, color = \"Mean\"),\n            linetype = \"solid\")  +\n  geom_line(aes(y = Knowledge_median, color = \"Median\"),\n            linetype = \"dashed\") +\n  ggtitle(\"Timeline\") +\n  xlab(\"Number of Iterations\") +\n  ylab(\"Knowledge\") +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, 0.2)\n  ) +\n  scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Mean\" = \"black\", \"Median\" = \"black\"),\n    labels = c(\"Agents\" = \"Agents\", \"Mean\" = \"Mean\", \"Median\" = \"Median\")\n  ) +\n  theme_light() +\n  theme(legend.title = element_blank(),\n        legend.position = \"top\",\n        legend.justification = \"left\"\n        )\n}\n\n\nOutput\n\nggplot2",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook02.html#special-cases",
    "href": "Project/sketchbook02.html#special-cases",
    "title": "Random meetings",
    "section": "… Special Cases",
    "text": "… Special Cases\nOnly one Agent with Knowledge (0.8)\n\nCodeK &lt;- 0           # Knowledge\n\nPop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge( Pop = Pop, K = K )\nPop[ID == 1, \"Knowledge\"] &lt;- 0.8\nPop\n\n# A tibble: 50 × 2\n      ID Knowledge\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1       0.8\n 2     2       0  \n 3     3       0  \n 4     4       0  \n 5     5       0  \n 6     6       0  \n 7     7       0  \n 8     8       0  \n 9     9       0  \n10    10       0  \n# ℹ 40 more rows\n\nCoderes &lt;- sim_meeting(Pop = Pop,\n                   ST = 1,\n                   STn = STn)\n\nres$Pop\n\n# A tibble: 50 × 4\n      ID Knowledge LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1     0.824     0.412       180\n 2     2     0.672     0.336       182\n 3     3     0.577     0.289       138\n 4     4     0.645     0.323       142\n 5     5     0.643     0.321       150\n 6     6     0.642     0.321       168\n 7     7     0.616     0.308       168\n 8     8     0.588     0.294       148\n 9     9     0.631     0.315       156\n10    10     0.650     0.325       150\n# ℹ 40 more rows\n\nCodeplt_Timeline(res$TL)",
    "crumbs": [
      "About",
      "How knowledge is distributed <br> in the population?<br> Mayby!!",
      "Random meetings"
    ]
  },
  {
    "objectID": "Project/sketchbook04.html",
    "href": "Project/sketchbook04.html",
    "title": "in a Day Structure",
    "section": "",
    "text": "The basic idea is that when two agents meet, they learn together. Later, this should happen in a network. In the beginning, I will let the agents meet randomly in the population to see if the implementation of joint learning works.\nIf it works as it should, it will be expanded so that a certain percentage of the population meets at the same time.\nA daily structure with a certain number of working hours is introduced to enable better interpretation of the results."
  },
  {
    "objectID": "Project/sketchbook04.html#population-for-testing-the-functions",
    "href": "Project/sketchbook04.html#population-for-testing-the-functions",
    "title": "in a Day Structure",
    "section": "Population for testing the Functions",
    "text": "Population for testing the Functions\n\nCodenA = 10            # number of Agents\nID = seq_len(nA)  # ID of the Agents\n\nPop &lt;- tibble( ID = ID )\nPop\n\n# A tibble: 10 × 1\n      ID\n   &lt;int&gt;\n 1     1\n 2     2\n 3     3\n 4     4\n 5     5\n 6     6\n 7     7\n 8     8\n 9     9\n10    10"
  },
  {
    "objectID": "Project/sketchbook04.html#knowledge",
    "href": "Project/sketchbook04.html#knowledge",
    "title": "in a Day Structure",
    "section": "Knowledge",
    "text": "Knowledge\nFunctions to set and update Knowledge\nSet Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the Knowledge (K) between 0 and 1. could be a scalar or e vector with the same length as the Population\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodeset_Knowledge &lt;- function(Pop = Pop,\n                          Typ = FALSE,\n                          K = Knowledge) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  Pop &lt;- Pop %&gt;%\n    mutate(!!Kname := K)\n\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeK &lt;- seq_len(nA)/5\n\nPop &lt;- set_Knowledge( Pop = Pop, K = 0.5 )\nPop &lt;- set_Knowledge( Pop = Pop, Typ = \"A\", K = K )\nPop\n\n# A tibble: 10 × 3\n      ID Knowledge Knowledge_A\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1     1       0.5         0.2\n 2     2       0.5         0.4\n 3     3       0.5         0.6\n 4     4       0.5         0.8\n 5     5       0.5         1  \n 6     6       0.5         1.2\n 7     7       0.5         1.4\n 8     8       0.5         1.6\n 9     9       0.5         1.8\n10    10       0.5         2  \n\n\nUpdate Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value to add to the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 0 is used to add\nA value to multiplie (fac) the Knowledge. could be a scalar or e vector with the same length as the Population. if not defined 1 is used for the multiplikation\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe add operation is always used first!\nIf the Knowledge is not defined before it will be generated with the start value (add) and the multiplication with the value (fac)\n\n\nCodeupdate_Knowledge &lt;- function(Pop = Pop,\n                            Typ = FALSE,\n                            add = 0,\n                            fac = 1) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := ( .data[[Kname]] + add ) * fac )\n  } else {\n    Pop &lt;- set_Knowledge(Pop = Pop, K = add, Typ = Typ)\n    Pop &lt;- Pop %&gt;%\n      mutate( !!Kname := .data[[Kname]] * fac )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined Knowledge\n\n\nCodeadd &lt;- seq_len(nA)/20\nfac &lt;- seq_len(nA)/10 \n\nPop &lt;- update_Knowledge( Pop = Pop, add = add ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"A\", fac = fac ) \nPop &lt;- update_Knowledge( Pop = Pop, Typ = \"B\", add = add, fac = fac ) \nPop\n\n# A tibble: 10 × 4\n      ID Knowledge Knowledge_A Knowledge_B\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1     1      0.55        0.02       0.005\n 2     2      0.6         0.08       0.02 \n 3     3      0.65        0.18       0.045\n 4     4      0.7         0.32       0.08 \n 5     5      0.75        0.5        0.125\n 6     6      0.8         0.72       0.18 \n 7     7      0.85        0.98       0.245\n 8     8      0.9         1.28       0.32 \n 9     9      0.95        1.62       0.405\n10    10      1           2          0.5"
  },
  {
    "objectID": "Project/sketchbook04.html#learnrate",
    "href": "Project/sketchbook04.html#learnrate",
    "title": "in a Day Structure",
    "section": "LearnRate",
    "text": "LearnRate\nFunctions to set and update the learn rate\nSet LearnRate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the learn rate (LR) greater than 0 and up to 1. could be a scalar or e vector with the same length as the Population\nHints\n\nLernRate 0 leads to Problems so it ist limited it to 1E-3\n\n\nCodeset_LearnRate &lt;- function(Pop = Pop,\n                          LR = LearnRate) {\n  LRname &lt;- \"LearnRate\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!LRname := LR,\n           !!LRname := pmax(.data[[LRname]],1E-3))\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodeLR &lt;- seq_len(nA)/5  \nPop &lt;- set_LearnRate( Pop = Pop, LR = 0 ) \nPop\n\n# A tibble: 10 × 5\n      ID Knowledge Knowledge_A Knowledge_B LearnRate\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1     1      0.55        0.02       0.005     0.001\n 2     2      0.6         0.08       0.02      0.001\n 3     3      0.65        0.18       0.045     0.001\n 4     4      0.7         0.32       0.08      0.001\n 5     5      0.75        0.5        0.125     0.001\n 6     6      0.8         0.72       0.18      0.001\n 7     7      0.85        0.98       0.245     0.001\n 8     8      0.9         1.28       0.32      0.001\n 9     9      0.95        1.62       0.405     0.001\n10    10      1           2          0.5       0.001\n\n\nUpdate LearnRate by Knowledge\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nHints\n\nThe learn rate is defined as 50% of the Knowledge for each Agent\n\n\nCodeupdate_LearnRate_Knowledge &lt;- function(Pop = Pop,\n                                       Typ = FALSE) {\n  LR &lt;- \"LearnRate\"\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!LR := .data[[Kname]] * 0.5,\n              !!LR := pmax(.data[[LR]],1E-3))\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined learn rate\n\n\nCodePop &lt;- update_LearnRate_Knowledge( Pop = Pop )  \nPop\n\n# A tibble: 10 × 5\n      ID Knowledge Knowledge_A Knowledge_B LearnRate\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1     1      0.55        0.02       0.005     0.275\n 2     2      0.6         0.08       0.02      0.3  \n 3     3      0.65        0.18       0.045     0.325\n 4     4      0.7         0.32       0.08      0.35 \n 5     5      0.75        0.5        0.125     0.375\n 6     6      0.8         0.72       0.18      0.4  \n 7     7      0.85        0.98       0.245     0.425\n 8     8      0.9         1.28       0.32      0.45 \n 9     9      0.95        1.62       0.405     0.475\n10    10      1           2          0.5       0.5"
  },
  {
    "objectID": "Project/sketchbook04.html#studytime",
    "href": "Project/sketchbook04.html#studytime",
    "title": "in a Day Structure",
    "section": "StudyTime",
    "text": "StudyTime\nFunctions to set and update the StudyTime\nSet StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA value for the StudyTime (ST). could be a scalar or a vector with the same length as the Population\nHints\n\nIf StudyTime isn’t given the Population will be initialising with 0\n\n\nCodeset_StudyTime &lt;- function(Pop = Pop,\n                          ST = 0) {\n  STname &lt;- \"StudyTime\"\n  Pop &lt;- Pop %&gt;%\n    mutate(!!STname := ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- set_StudyTime( Pop = Pop, ST = 3)  \nPop\n\n# A tibble: 10 × 6\n      ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1      0.55        0.02       0.005     0.275         3\n 2     2      0.6         0.08       0.02      0.3           3\n 3     3      0.65        0.18       0.045     0.325         3\n 4     4      0.7         0.32       0.08      0.35          3\n 5     5      0.75        0.5        0.125     0.375         3\n 6     6      0.8         0.72       0.18      0.4           3\n 7     7      0.85        0.98       0.245     0.425         3\n 8     8      0.9         1.28       0.32      0.45          3\n 9     9      0.95        1.62       0.405     0.475         3\n10    10      1           2          0.5       0.5           3\n\n\nUpdate StudyTime\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and StudyTime\nA Time (dT) that should added.\nHints\n\nIf StudyTime isn’t defined in Population it will be initialising with dT\n\n\nCodeupdate_StudyTime &lt;- function(Pop = Pop,\n                             dT = TimeToAdd) {\n  STname &lt;- \"StudyTime\"\n  if (STname %in% colnames(Pop)) {\n    Pop &lt;- Pop %&gt;%\n      mutate( !!STname := .data[[STname]] + dT )\n  } else {\n    Pop &lt;- set_StudyTime(Pop = Pop, ST = dT )\n  }\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop &lt;- update_StudyTime( Pop = Pop, dT = 1)   \nPop\n\n# A tibble: 10 × 6\n      ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1      0.55        0.02       0.005     0.275         4\n 2     2      0.6         0.08       0.02      0.3           4\n 3     3      0.65        0.18       0.045     0.325         4\n 4     4      0.7         0.32       0.08      0.35          4\n 5     5      0.75        0.5        0.125     0.375         4\n 6     6      0.8         0.72       0.18      0.4           4\n 7     7      0.85        0.98       0.245     0.425         4\n 8     8      0.9         1.28       0.32      0.45          4\n 9     9      0.95        1.62       0.405     0.475         4\n10    10      1           2          0.5       0.5           4"
  },
  {
    "objectID": "Project/sketchbook04.html#data-management",
    "href": "Project/sketchbook04.html#data-management",
    "title": "in a Day Structure",
    "section": "Data Management",
    "text": "Data Management\nFunctions to select and reintegrate a Sub Populations\nSelect a Sub Population\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA vector wit ID’s(IDs). If no vector is defined it needs a (n, witch is initialised by 2) for selecting random ID’s\nA value (n) if the selection should be random\nHints\n\nIf StudyTime isn’t given the Population will be initialising with 0\n\n\nCodesel_SubPop &lt;- function(Pop = Pop,\n                       IDs = NULL,\n                       n = 2) {\n    if (is.null(IDs)) {\n      IDs &lt;- sample( Pop[[\"ID\"]], size=n )\n    }\n  SubPop &lt;- list()\n  SubPop$sel &lt;- Pop %&gt;%\n    filter(ID %in% IDs) %&gt;%\n    arrange(match(ID, IDs))\n  SubPop$rest &lt;- Pop %&gt;%\n    filter(!ID %in% IDs)\n  return(SubPop)\n}\n\n\nOutput\n\nList with Sub Population ($sel) and the rest of the Population($rest)\n\n\nCodeSubPop &lt;- sel_SubPop( Pop = Pop )\nSubPop$sel\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     2      0.6         0.08       0.02      0.3           4\n2     1      0.55        0.02       0.005     0.275         4\n\nCodeSubPop$rest\n\n# A tibble: 8 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3      0.65        0.18       0.045     0.325         4\n2     4      0.7         0.32       0.08      0.35          4\n3     5      0.75        0.5        0.125     0.375         4\n4     6      0.8         0.72       0.18      0.4           4\n5     7      0.85        0.98       0.245     0.425         4\n6     8      0.9         1.28       0.32      0.45          4\n7     9      0.95        1.62       0.405     0.475         4\n8    10      1           2          0.5       0.5           4\n\n\n\nCodeSubPop &lt;- sel_SubPop( Pop = Pop , IDs = c(2, 1))\nSubPop$sel\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     2      0.6         0.08       0.02      0.3           4\n2     1      0.55        0.02       0.005     0.275         4\n\nCodeSubPop$rest\n\n# A tibble: 8 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3      0.65        0.18       0.045     0.325         4\n2     4      0.7         0.32       0.08      0.35          4\n3     5      0.75        0.5        0.125     0.375         4\n4     6      0.8         0.72       0.18      0.4           4\n5     7      0.85        0.98       0.245     0.425         4\n6     8      0.9         1.28       0.32      0.45          4\n7     9      0.95        1.62       0.405     0.475         4\n8    10      1           2          0.5       0.5           4\n\n\nIntegrate Sub Population\nNeeds\n\nA Sub Population (SubPop) with Agents defined by ID’s which are also defined in Population\nA Population (Pop) with several Agents defined by ID’s\nHints\n\nSubPop and Pop has to have the same cols\n\n\nCodeint_SubPop &lt;- function(SubPop = SubPop,\n                       Pop = Pop) {\n  col_sort &lt;- colnames(Pop)\n  SubPop &lt;- SubPop[, col_sort]\n  IDs &lt;- SubPop[[\"ID\"]]\n  Pop[Pop$ID %in% IDs,] &lt;- SubPop\n  Pop &lt;- Pop %&gt;%\n    arrange(ID)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with the defined StudyTime\n\n\nCodePop\n\n# A tibble: 10 × 6\n      ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1      0.55        0.02       0.005     0.275         4\n 2     2      0.6         0.08       0.02      0.3           4\n 3     3      0.65        0.18       0.045     0.325         4\n 4     4      0.7         0.32       0.08      0.35          4\n 5     5      0.75        0.5        0.125     0.375         4\n 6     6      0.8         0.72       0.18      0.4           4\n 7     7      0.85        0.98       0.245     0.425         4\n 8     8      0.9         1.28       0.32      0.45          4\n 9     9      0.95        1.62       0.405     0.475         4\n10    10      1           2          0.5       0.5           4\n\nCodeSubPop &lt;- sel_SubPop(Pop = Pop, n = 2 )$sel\nSubPop &lt;- set_Knowledge(Pop = SubPop, K = 0)\nSubPop\n\n# A tibble: 2 × 6\n     ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1     3         0        0.18       0.045     0.325         4\n2     9         0        1.62       0.405     0.475         4\n\nCodePop &lt;- int_SubPop(SubPop = SubPop, Pop = Pop)\nPop\n\n# A tibble: 10 × 6\n      ID Knowledge Knowledge_A Knowledge_B LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1      0.55        0.02       0.005     0.275         4\n 2     2      0.6         0.08       0.02      0.3           4\n 3     3      0           0.18       0.045     0.325         4\n 4     4      0.7         0.32       0.08      0.35          4\n 5     5      0.75        0.5        0.125     0.375         4\n 6     6      0.8         0.72       0.18      0.4           4\n 7     7      0.85        0.98       0.245     0.425         4\n 8     8      0.9         1.28       0.32      0.45          4\n 9     9      0           1.62       0.405     0.475         4\n10    10      1           2          0.5       0.5           4"
  },
  {
    "objectID": "Project/sketchbook04.html#timelines",
    "href": "Project/sketchbook04.html#timelines",
    "title": "in a Day Structure",
    "section": "Timelines",
    "text": "Timelines\nsaving Timelines during Simulations\nGet Agents-Timelines\nNeeds\n\nA container name for the Timeline\nA value for the Time\nA Population (Pop) with several Agents defined by ID’s\nA colname from the Population which should followed ver Time\noptional parameter Sum. Ich Sum = 1 a mean and median is calculated for each Time\n\n\nCodeget_Timeline &lt;- function(TL = Timeline,\n                          Time = 0,\n                          Pop = Pop,\n                          Info = name,\n                          Sum = 0) {\n  TLadd &lt;- tibble( ID = Pop[[\"ID\"]],\n                   Time = Time,\n                   !!Info := Pop[[Info]])\n  if (Sum == 1) {\n    Sumname1 &lt;- paste(Info,\"mean\", sep = \"_\")\n    Sumname2 &lt;- paste(Info,\"median\", sep = \"_\")\n    TLadd &lt;- TLadd %&gt;%\n        mutate(!!Sumname1 := mean(Pop[[Info]], na.rm = TRUE),\n               !!Sumname2 := median(Pop[[Info]], na.rm = TRUE))\n    }\n  if (Time == 0) {\n    TL &lt;- TLadd\n  } else {\n    TL &lt;- bind_rows(TL, TLadd)\n  }\n  return(TL) \n}\n\n\nOutput\n\nA Timeline in a long format\n\n\nCodeTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 0, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline &lt;- get_Timeline( TL = Timeline, \n                           Time = 1, \n                           Pop = Pop, \n                           Info = \"Knowledge\", \n                           Sum = 1)\nTimeline\n\n# A tibble: 20 × 5\n      ID  Time Knowledge Knowledge_mean Knowledge_median\n   &lt;int&gt; &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n 1     1     0      0.55          0.615            0.725\n 2     2     0      0.6           0.615            0.725\n 3     3     0      0             0.615            0.725\n 4     4     0      0.7           0.615            0.725\n 5     5     0      0.75          0.615            0.725\n 6     6     0      0.8           0.615            0.725\n 7     7     0      0.85          0.615            0.725\n 8     8     0      0.9           0.615            0.725\n 9     9     0      0             0.615            0.725\n10    10     0      1             0.615            0.725\n11     1     1      0.55          0.615            0.725\n12     2     1      0.6           0.615            0.725\n13     3     1      0             0.615            0.725\n14     4     1      0.7           0.615            0.725\n15     5     1      0.75          0.615            0.725\n16     6     1      0.8           0.615            0.725\n17     7     1      0.85          0.615            0.725\n18     8     1      0.9           0.615            0.725\n19     9     1      0             0.615            0.725\n20    10     1      1             0.615            0.725"
  },
  {
    "objectID": "Project/sketchbook04.html#learning",
    "href": "Project/sketchbook04.html#learning",
    "title": "in a Day Structure",
    "section": "Learning",
    "text": "Learning\nLearning with a exponential lern rate\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nA value for the learn rate (LR). could be a scalar or e vector with the same length as the Population\nA value for the study time (ST). could be a scalar or e vector with the same length as the Population\nHints\n\nIf learn rate isn’t given the values from the Population will be used, if this is missing in the Population 0 is used.\n\n\nCodelearn &lt;- function(Pop = Pop,\n                  Typ = FALSE,\n                  LR = FALSE,\n                  ST = StudyTime) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  if (Kname %in% colnames(Pop)) {\n    K &lt;- Pop[[Kname]]\n  }\n  if (LR == FALSE) {\n    if (\"LearnRate\" %in% colnames(Pop)) {\n      LR &lt;- Pop[[\"LearnRate\"]]\n    }\n  }\n\n  T0 &lt;- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K &lt;- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  \n  Pop &lt;- set_Knowledge(Pop = Pop, Typ = Typ, K = K)\n  Pop &lt;- update_StudyTime(Pop = Pop, dT = ST)\n  return(Pop)\n}\n\n\nOutput\n\nPopulation with updated Knowledge\n\n\nCodePop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge(Pop = Pop, K = 0.1)\nPop &lt;- set_LearnRate(Pop = Pop, LR = 1)\nPop\n\n# A tibble: 10 × 3\n      ID Knowledge LearnRate\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1       0.1         1\n 2     2       0.1         1\n 3     3       0.1         1\n 4     4       0.1         1\n 5     5       0.1         1\n 6     6       0.1         1\n 7     7       0.1         1\n 8     8       0.1         1\n 9     9       0.1         1\n10    10       0.1         1\n\nCodePop &lt;- learn( Pop = Pop, ST = 1)\nPop\n\n# A tibble: 10 × 4\n      ID Knowledge LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1     0.526         1         1\n 2     2     0.526         1         1\n 3     3     0.526         1         1\n 4     4     0.526         1         1\n 5     5     0.526         1         1\n 6     6     0.526         1         1\n 7     7     0.526         1         1\n 8     8     0.526         1         1\n 9     9     0.526         1         1\n10    10     0.526         1         1"
  },
  {
    "objectID": "Project/sketchbook04.html#slots",
    "href": "Project/sketchbook04.html#slots",
    "title": "in a Day Structure",
    "section": "Slots",
    "text": "Slots\nFunctions to select and sets learning slots from a Population\nSelect a random Slot of pairs\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s\nA size of the Slot in percents of the population\nHints\n\nbecause it leads to trouble will selecting otherwise the calculated n is limited at the moment between 1 and half of the Population\n\n\nCodesel_Slot_rnd &lt;- function(Pop = Pop,\n                         psize = percentsOfPop) {   \n  sID &lt;- \"Slot_ID\"\n  n &lt;- round(nrow(Pop)*psize / 2, 0)\n  n &lt;- max(n, 1)\n  n &lt;- min(n, round(nrow(Pop) / 2, 0))\n  \n  SubPop &lt;- sel_SubPop( Pop = Pop, n = n)   \n  Slot1 &lt;- SubPop$sel %&gt;%     \n    mutate(!!sID := seq_len(n)) \n  SubPop &lt;- sel_SubPop( Pop = SubPop$rest, n = n) \n  Slot2 &lt;- SubPop$sel %&gt;%     \n    mutate(!!sID := seq_len(n))\n  Slot &lt;- bind_rows(Slot1, Slot2)\n  return(Slot)  \n  }  \n\n\nOutput\n\nA random Slot-Population with Slot ID’s which marks the pairs\n\n\nCodePop\n\n# A tibble: 10 × 4\n      ID Knowledge LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1     0.526         1         1\n 2     2     0.526         1         1\n 3     3     0.526         1         1\n 4     4     0.526         1         1\n 5     5     0.526         1         1\n 6     6     0.526         1         1\n 7     7     0.526         1         1\n 8     8     0.526         1         1\n 9     9     0.526         1         1\n10    10     0.526         1         1\n\nCodeSlot &lt;- sel_Slot_rnd(Pop = Pop, psize = 1)\nSlot\n\n# A tibble: 10 × 5\n      ID Knowledge LearnRate StudyTime Slot_ID\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;\n 1     6     0.526         1         1       1\n 2     4     0.526         1         1       2\n 3     2     0.526         1         1       3\n 4     9     0.526         1         1       4\n 5     8     0.526         1         1       5\n 6     3     0.526         1         1       1\n 7     1     0.526         1         1       2\n 8     7     0.526         1         1       3\n 9     5     0.526         1         1       4\n10    10     0.526         1         1       5\n\n\nSets Slot parameter by Slot-ID’s\nNeeds\n\nA Slot of paird Agents defined by Slot_ID’s\nA duration of the slot. could be a scalar or a vector with the same length as the number of pairs in the Slot\n\n\nCodeset_SlotPar &lt;- function(Slot = Slot,\n                        ST = SlotDuration) {\n  LRname &lt;- \"LearnRate\"\n  sLRname &lt;- \"Slot_LearnRate\"\n  STname &lt;- \"Slot_Duration\"\n  Slot &lt;- Slot %&gt;%\n    group_by(Slot_ID) %&gt;%\n    mutate( !!sLRname := mean(.data[[LRname]], na.rm = TRUE),\n            !!STname := ST) %&gt;%\n    ungroup()\n  return(Slot)\n}\n\n\nOutput\n\nA random Slot-Population with Slot ID’s which marks the pairs, learn rate and duration of the Slot defined by pairs\n\n\nCodeSlot &lt;- set_SlotPar(Slot = Slot, ST = 1)\nSlot\n\n# A tibble: 10 × 7\n      ID Knowledge LearnRate StudyTime Slot_ID Slot_LearnRate Slot_Duration\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n 1     6     0.526         1         1       1              1             1\n 2     4     0.526         1         1       2              1             1\n 3     2     0.526         1         1       3              1             1\n 4     9     0.526         1         1       4              1             1\n 5     8     0.526         1         1       5              1             1\n 6     3     0.526         1         1       1              1             1\n 7     1     0.526         1         1       2              1             1\n 8     7     0.526         1         1       3              1             1\n 9     5     0.526         1         1       4              1             1\n10    10     0.526         1         1       5              1             1\n\n\nLearning by Slots\nLearning with a exponential learn rate defined by pairs\nNeeds\n\nA Slot-Population with several paired Agents defined by Slot-ID’s. Prepaerd by the function set_SlotPar()\noptional for future implementations a name (Typ) for the specific Knowledge\n\n\nCodelearn_Slot &lt;- function(Slot = Slot,\n                       Typ = FALSE) {\n  Kname &lt;- \"Knowledge\"\n  if (Typ != FALSE) {\n    Kname &lt;- paste(Kname, Typ, sep = \"_\")\n  }\n  LRname &lt;- \"Slot_LearnRate\"\n  STname &lt;- \"Slot_Duration\"\n  K &lt;- Slot[[Kname]]\n  LR &lt;- Slot[[LRname]]\n  ST &lt;- Slot[[STname]]\n\n  T0 &lt;- ( 1 - K )^( 1 / -LR )   # assumed time learnd allready\n  K &lt;- 1 - ( T0 + ST )^( -LR )  # Knowledge after time learnd\n  Slot &lt;- set_Knowledge(Pop = Slot, Typ = Typ, K = K)\n  Slot &lt;- update_StudyTime(Pop = Slot, dT = ST)\n  return(Slot)\n}\n\n\nOutput\n\nSlot-Population with updated Knowledge\n\n\nCodeSlot &lt;- learn_Slot(Slot = Slot)\nSlot\n\n# A tibble: 10 × 7\n      ID Knowledge LearnRate StudyTime Slot_ID Slot_LearnRate Slot_Duration\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;int&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n 1     6     0.679         1         2       1              1             1\n 2     4     0.679         1         2       2              1             1\n 3     2     0.679         1         2       3              1             1\n 4     9     0.679         1         2       4              1             1\n 5     8     0.679         1         2       5              1             1\n 6     3     0.679         1         2       1              1             1\n 7     1     0.679         1         2       2              1             1\n 8     7     0.679         1         2       3              1             1\n 9     5     0.679         1         2       4              1             1\n10    10     0.679         1         2       5              1             1"
  },
  {
    "objectID": "Project/sketchbook04.html#learning-by-days",
    "href": "Project/sketchbook04.html#learning-by-days",
    "title": "in a Day Structure",
    "section": "Learning by Days",
    "text": "Learning by Days\nLearning by Days with a exponential learn rate defined by pairs according learning by Slots\nNeeds\n\nA Population (Pop) with several Agents defined by ID’s and Knowledge\noptional for future implementations a name (Typ) for the specific Knowledge\nA percentage of Daytime which each agents stays in meetings (mean-value). has to be a scalar.\nA amount of hours for the day, is set to 8\nA duration for the meetings in hours, is set to 1\nHints\n\nThe learn rate is fixed during the Day and updated at the end of the Day\n\n\nCodelearn_Days &lt;- function(Pop = Pop,                        \n                       Typ = FALSE,\n                       pM = percentsOfMeetings,\n                       dH = 8,\n                       ST = 1) { \n  Pop &lt;- update_LearnRate_Knowledge( Pop = Pop, Typ = Typ )\n  Pop &lt;- update_StudyTime( Pop = Pop , dT = 0)\n  for(i in 1:dH) {\n    Slot &lt;- sel_Slot_rnd( Pop = Pop, psize = pM )\n    Slot &lt;- set_SlotPar(Slot = Slot, ST = ST)\n    Slot &lt;- learn_Slot(Slot = Slot, Typ = Typ)\n    Pop &lt;- int_SubPop( SubPop = Slot, Pop = Pop )\n  } \n  Pop &lt;- update_LearnRate_Knowledge( Pop = Pop, Typ = Typ )\n  return(Pop) \n  }\n\n\nOutput\n\nPopulation with updated Knowledge, learn rate and study time\n\n\nCodePop &lt;- update_LearnRate_Knowledge( Pop = Pop, Typ = FALSE )\nPop &lt;- set_StudyTime( Pop = Pop , ST = 0)\nPop\n\n# A tibble: 10 × 4\n      ID Knowledge LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1     0.526     0.263         0\n 2     2     0.526     0.263         0\n 3     3     0.526     0.263         0\n 4     4     0.526     0.263         0\n 5     5     0.526     0.263         0\n 6     6     0.526     0.263         0\n 7     7     0.526     0.263         0\n 8     8     0.526     0.263         0\n 9     9     0.526     0.263         0\n10    10     0.526     0.263         0\n\nCodePop &lt;- learn_Days(Pop = Pop, pM = 0.8, dH = 2 ) \nPop\n\n# A tibble: 10 × 4\n      ID Knowledge LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1     0.526     0.263         0\n 2     2     0.540     0.270         2\n 3     3     0.540     0.270         2\n 4     4     0.540     0.270         2\n 5     5     0.533     0.267         1\n 6     6     0.533     0.267         1\n 7     7     0.540     0.270         2\n 8     8     0.540     0.270         2\n 9     9     0.540     0.270         2\n10    10     0.540     0.270         2"
  },
  {
    "objectID": "Project/sketchbook04.html#plots",
    "href": "Project/sketchbook04.html#plots",
    "title": "in a Day Structure",
    "section": "Plots",
    "text": "Plots\nPlot Timeline\nNeeds\n\nA Timeline from get_Timeline\n\n\nCodeplt_Timeline &lt;- function(TL = Timeline) {\n  ggplot(data = TL, aes(x = Time)) +\n  geom_line(aes(y = Knowledge, group = ID, color = \"Agents\"), \n            alpha = 0.5,\n            linetype = \"solid\") +\n  geom_line(aes(y = Knowledge_mean, color = \"Mean\"),\n            linetype = \"solid\")  +\n  geom_line(aes(y = Knowledge_median, color = \"Median\"),\n            linetype = \"dashed\") +\n  ggtitle(\"Timeline\") +\n  xlab(\"Number of Days\") +\n  ylab(\"Knowledge\") +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, 0.2)\n  ) +\n  scale_color_manual(\n    values = c(\"Agents\" = \"grey\", \"Mean\" = \"black\", \"Median\" = \"black\"),\n    labels = c(\"Agents\" = \"Agents\", \"Mean\" = \"Mean\", \"Median\" = \"Median\")\n  ) +\n  theme_light() +\n  theme(legend.title = element_blank(),\n        legend.position = \"top\",\n        legend.justification = \"left\"\n        )\n}\n\n\nOutput\n\nggplot2"
  },
  {
    "objectID": "Project/sketchbook04.html#special-cases",
    "href": "Project/sketchbook04.html#special-cases",
    "title": "in a Day Structure",
    "section": "… Special Cases",
    "text": "… Special Cases\nOnly one Agent with Knowledge (0.8)\n\nCodeK &lt;- 0           # Knowledge\n\nPop &lt;- tibble( ID = ID )\nPop &lt;- set_Knowledge( Pop = Pop, K = K )\nPop[ID == 1, \"Knowledge\"] &lt;- 0.8\nPop\n\n# A tibble: 50 × 2\n      ID Knowledge\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1       0.8\n 2     2       0  \n 3     3       0  \n 4     4       0  \n 5     5       0  \n 6     6       0  \n 7     7       0  \n 8     8       0  \n 9     9       0  \n10    10       0  \n# ℹ 40 more rows\n\nCoderes &lt;- sim_Days(Pop = Pop,\n                nD = nD,\n                pM = pM)\n\nres$Pop\n\n# A tibble: 50 × 4\n      ID Knowledge LearnRate StudyTime\n   &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1     1     0.857     0.428       165\n 2     2     0.804     0.402       162\n 3     3     0.802     0.401       158\n 4     4     0.791     0.395       159\n 5     5     0.801     0.401       167\n 6     6     0.790     0.395       160\n 7     7     0.790     0.395       154\n 8     8     0.801     0.401       163\n 9     9     0.791     0.395       156\n10    10     0.785     0.393       151\n# ℹ 40 more rows\n\nCodeplt_Timeline(res$TL)"
  },
  {
    "objectID": "Snippets/BetaDistribution.html",
    "href": "Snippets/BetaDistribution.html",
    "title": "Beta Distribution",
    "section": "",
    "text": "Loading some Packages\n\nCodelibrary(fitdistrplus)\n\nLade nötiges Paket: MASS\n\n\nLade nötiges Paket: survival\n\nCodelibrary(survival)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ dplyr::select() masks MASS::select()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCode# set.seed(1)\n\n\nGenerating Betakurve Parameter\n\nCodebeta_par &lt;- function(mu, sigma) {\n  mu &lt;- max(mu, 0.0001)\n  mu &lt;- min(mu, 0.9999)\n  sigma &lt;- max(sigma, 0.00001)\n  par &lt;- c(sqrt(mu * (1 - mu))*0.99, sigma)\n  sigma &lt;- min(par)\n  a_b &lt;- (mu * (1 - mu)) / sigma^2 - 1  # calc alpha + beta\n  a &lt;- mu * a_b\n  b &lt;- (1 - mu) * a_b\n  Output &lt;- list(alpha = a,\n                   beta = b)\n  return(Output)\n}\n\nsigma &lt;- 0.1\nmu &lt;- 0.4\n\nbeta_par(mu = mu, sigma = sigma)\n\n$alpha\n[1] 9.2\n\n$beta\n[1] 13.8\n\n\nGenerating random values\n\nCodegen_rbeta &lt;- function(n = n,\n                      mu = mu, \n                      sigma = sigma\n                      ) {\n  par &lt;- beta_par(mu = mu, sigma = sigma)\n  vec &lt;- rbeta(n = 1000, shape1 = par$alpha, shape2 = par$beta)\n\n  return(vec)\n}\n\n\nTesting for different Parameters\n\nCoden &lt;- 1000\nm &lt;- 10\n\ndata01 &lt;- data.frame(ID = seq(1,n))  \n\n# Weitere Spalten hinzufügen\nfor (i in seq(0, 10)) {\n  temp &lt;- round(gen_rbeta(n = n, mu = i / m, sigma = 0.1), 3)\n  temp &lt;- sort(temp)\n  name &lt;- sprintf(\"Set%03d\", i)\n  data01[[name]] &lt;- temp\n}\nsummary(data01$Set000)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\n\n\nCodedata001 &lt;- pivot_longer(data01,\n                     cols = starts_with(\"Set\"),\n                     names_to = \"Set\",\n                     values_to = \"Values\")\n\nggplot(data = data001, aes(x = ID, y = Values, color = Set))  +\n  geom_line() +\n  ggtitle(\"\") +\n  xlab(\"number\") +\n  labs(color = \"Data Sets\") +\n  theme_light() +\n  theme()\n\n\n\n\n\n\n\n\nCodedata02 &lt;- data.frame(ID = seq(1,n))  \n\n# Weitere Spalten hinzufügen\nfor (i in seq(0, 10)) {\n  temp &lt;- round(gen_rbeta(n = n, mu = i / m, sigma = 0.5), 3)\n  temp &lt;- sort(temp)\n  name &lt;- sprintf(\"Set%03d\", i)\n  data02[[name]] &lt;- temp\n}\ndata002 &lt;- pivot_longer(data02,\n                     cols = starts_with(\"Set\"),\n                     names_to = \"Set\",\n                     values_to = \"Values\")\n\nggplot(data = data002, aes(x = ID, y = Values, color = Set))  +\n  geom_line() +\n  ggtitle(\"\") +\n  xlab(\"number\") +\n  labs(color = \"Data Sets\") +\n  theme_light() +\n  theme()\n\n\n\n\n\n\n\n\nCodedata03 &lt;- data.frame(ID = seq(1,n))  \n\n# Weitere Spalten hinzufügen\nfor (i in seq(0, 10)) {\n  temp &lt;- round(gen_rbeta(n = n, mu = 0.5, sigma = i / m), 3)\n  temp &lt;- sort(temp)\n  name &lt;- sprintf(\"Set%03d\", i)\n  data03[[name]] &lt;- temp\n}\ndata003 &lt;- pivot_longer(data03,\n                     cols = starts_with(\"Set\"),\n                     names_to = \"Set\",\n                     values_to = \"Values\")\n\nggplot(data = data003, aes(x = ID, y = Values, color = Set))  +\n  geom_line() +\n  ggtitle(\"\") +\n  xlab(\"number\") +\n  labs(color = \"Data Sets\") +\n  theme_light() +\n  theme()\n\n\n\n\n\n\n\n\nCodedata04 &lt;- data.frame(ID = seq(1,n))  \n\n# Weitere Spalten hinzufügen\nfor (i in seq(0, 10)) {\n  temp &lt;- round(gen_rbeta(n = n, mu = 0.1, sigma = i / m), 3)\n  temp &lt;- sort(temp)\n  name &lt;- sprintf(\"Set%03d\", i)\n  data04[[name]] &lt;- temp\n}\ndata04 &lt;- pivot_longer(data04,\n                     cols = starts_with(\"Set\"),\n                     names_to = \"Set\",\n                     values_to = \"Values\")\n\nggplot(data = data04, aes(x = ID, y = Values, color = Set))  +\n  geom_line() +\n  ggtitle(\"\") +\n  xlab(\"number\") +\n  labs(color = \"Data Sets\") +\n  theme_light() +\n  theme()\n\n\n\n\n\n\n\nFit Betaparameter\n\nCodedatah &lt;- data03[, \"Set002\"]\nbeta_par(mu = 0.5, sigma = 2/10)\n\n$alpha\n[1] 2.625\n\n$beta\n[1] 2.625\n\nCodehist(datah)\n\n\n\n\n\n\n\n\nCodefit &lt;- fitdist(datah, \"beta\", start = list(shape1 = 0.5, shape2 = 0.2))\nfit\n\nFitting of the distribution ' beta ' by maximum likelihood \nParameters:\n       estimate Std. Error\nshape1 2.882962  0.1243341\nshape2 2.796242  0.1202756\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Snippets",
      "Beta Distribution"
    ]
  }
]